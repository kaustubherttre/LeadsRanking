{"version":3,"sources":["views/AgentSurveyQuestions.jsx"],"names":["AgentSurveyQuestions","props","handleChange","e","target","id","FieldOptionsList","includes","value","setState","editFieldOptions","formvalue","state","od","type","checked","_isAMomentObject","format","parseInt","ModalValueChanged","isLoaded","showModal","items","store","activePage","root","departmentId","valid_sid","ParentOption","PageTitle","FormTitle","event","user","handleRemove","bind","handleClose","handleShow","handleSave","handleAddNested","selectedrow","getUrlParameter","SurveyMasterList","name","label","columnlist","searchable","editable","required","sid","this","GetCommonData","limit","skip","order","cols","GetJsonToArray","con","c","setTimeout","getuser","nextProps","CommonData","isError","SurveyName","columns","fnDatatableCol","push","cell","row","aria-label","variant","onClick","handleEdit","className","aria-hidden","disabled","FieldType","window","confirm","DeleteData","query","QuestionID","data","status","toast","error","NestedQuestionId","Object","assign","FieldOptions","document","getElementsByName","length","reportValidity","JSON","parse","stringify","console","log","fnCleanData","ParentQuestionID","ParentOptionSelected","qid","replace","trim","UpdateData","body","querydata","CreatedOn","moment","InsertData","scope","message","recordset","ParentQuestionId","SelectedOption","result","i","md","tag","extention","export","print","show","onHide","dialogClassName","Header","closeButton","Title","Body","map","col","Group","as","Col","controlId","key","Label","Control","onChange","defaultValue","placeholder","selected","fnRenderfrmControl","split","option","index","Footer","condition","React","Component","connect"],"mappings":"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","file":"static/js/117.12c0b109.chunk.js","sourcesContent":["\nimport React from \"react\";\nimport { ButtonGroup, Button, Modal, Form } from 'react-bootstrap';\nimport moment from 'moment';\n// import {\n//   GetCommonData, addRecord, UpdateData, DeleteData\n// } from \"../store/actions/CommonMongoAction\";\n\nimport { GetCommonData, InsertData, UpdateData, DeleteData } from \"../store/actions/CommonAction\";\n\nimport { If, Then } from 'react-if';\n//import { If, Then, Else, When, Unless, Switch, Case, Default } from 'react-if';\n\nimport { connect } from \"react-redux\";\n// import { Link } from \"react-router-dom\";\nimport DataTable from './Common/DataTableWithFilter';\nimport DropDown from './Common/DropDownListMongo';\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { fnRenderfrmControl, fnDatatableCol, fnCleanData, GetJsonToArray, getUrlParameter } from '../utility/utility.jsx';\n// reactstrap components\nimport {\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  Row,\n  Col\n} from \"reactstrap\";\nimport { getuser } from \"utility/utility\";\n\nclass AgentSurveyQuestions extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      showModal: false,\n      items: [],\n      store: [],\n      activePage: 1,\n      root: \"SurveyQuestionMaster\",\n      departmentId: \"0\",\n      valid_sid: true,\n      ParentOption: \"\",\n\n      PageTitle: \"\",\n      FormTitle: \"\",\n      formvalue: {},\n      event: \"\",\n      ModalValueChanged: false,\n      user: {},\n      editFieldOptions: false\n    };\n    this.handleRemove = this.handleRemove.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.handleShow = this.handleShow.bind(this);\n    this.handleSave = this.handleSave.bind(this);\n    this.handleAddNested = this.handleAddNested.bind(this);\n    this.selectedrow = {\n      \"QuestionText\": \"\", \"FieldOptions\": \"\", \"SurveyID\": getUrlParameter(\"sid\")\n      // , \"isOutbound\": false, \"chatbot\": false, \"offline\": false, \"newcar\": false \n    }\n    this.FieldOptionsList = ['textarea', 'number', 'string', 'email', 'empty', 'link', 'embedded'];\n    this.SurveyMasterList = [\n      {\n        name: \"SurveyId\",\n        label: \"SurveyId\",\n        type: \"number\"\n      },\n      {\n        name: \"SurveyName\",\n        label: \"SurveyName\",\n        type: \"string\"\n      }\n    ];\n    this.columnlist = [\n      {\n        name: \"QuestionID\",\n        label: \"QuestionID\",\n        type: \"number\",\n        searchable: true,\n        editable: false\n      },\n      {\n        name: \"QuestionText\",\n        label: \"QuestionText\",\n        type: \"string\",\n        searchable: true,\n        required: true\n        // editable: false\n      },\n      {\n        name: \"SurveyID\",\n        label: \"SurveyID\",\n        type: \"number\",\n        // searchable: true,\n        editable: false\n      },\n      {\n        name: \"FieldType\",\n        label: \"FieldType\",\n        type: \"string\",\n        searchable: true,\n        editable: false\n      },\n      {\n        name: \"FieldOptions\",\n        label: \"FieldOptions\",\n        type: \"string\",\n        searchable: true,\n        required: true\n      },\n      {\n        name: \"IsRequired\",\n        label: \"IsRequired\",\n        type: \"bool\",\n        searchable: true,\n        required: true\n      }\n    ];\n  }\n\n\n\n  componentDidMount() {\n    let sid = getUrlParameter(\"sid\");\n    this.props.GetCommonData({\n      limit: 10,\n      skip: 0,\n      root: this.state.root,\n      order: 1,\n      cols: GetJsonToArray(this.columnlist, \"name\"),\n      con: [{ \"SurveyID\": sid }],\n      c: \"L\",\n    });\n\n    this.props.GetCommonData({\n      limit: 10,\n      skip: 0,\n      root: \"SurveyMaster\",\n      cols: GetJsonToArray(this.SurveyMasterList, \"name\"),\n      con: [{ \"SurveyId\": sid }],\n      c: \"L\",\n    });\n\n    setTimeout(function () {\n      this.setState({ user: getuser() });\n    }.bind(this), 500);\n  }\n\n\n\n  componentWillReceiveProps(nextProps) {\n\n    if (!nextProps.CommonData.isError) {\n\n      if (nextProps.CommonData['SurveyMaster'] && nextProps.CommonData['SurveyMaster'][0]) {\n        this.setState(() => ({\n          valid_sid: false,\n          PageTitle: nextProps.CommonData['SurveyMaster'][0].SurveyName\n        }))\n      }\n\n      this.setState({ items: nextProps.CommonData[this.state.root] });\n\n      this.setState({ store: nextProps.CommonData });\n\n    }\n\n  }\n\n\n  fnDatatableCol() {\n\n    var columns = fnDatatableCol(this.columnlist);\n\n    columns.push({\n      name: \"Action\",\n      cell: row => <ButtonGroup aria-label=\"Basic example\">\n        <Button variant=\"secondary\" onClick={() => this.handleEdit(row)}><i className=\"fa fa-pencil-square-o\" aria-hidden=\"true\"></i></Button>\n        <Button variant=\"secondary\" onClick={() => this.handleAddNested(row)} disabled={row.FieldType != 'single select' && row.FieldType != 'dropdown'}>\n          <i className=\"fa fa-plus\" aria-hidden=\"true\"></i>\n        </Button>\n        <Button variant=\"secondary\" onClick={() => { if (window.confirm('Are you sure you wish to delete this quesiton?')) this.handleRemove(row) }}><i className=\"fa fa-trash\" aria-hidden=\"true\"></i></Button>\n      </ButtonGroup>\n    });\n    return columns;\n  }\n\n  handleRemove(row) {\n\n    this.props.DeleteData({\n      root: this.state.root,\n      query: { QuestionID: row.QuestionID }\n    }, function (data) {\n      if (data.data.status === 200)\n        toast(\"Question removed!\", { type: 'success' });\n      else\n        toast.error(\"Question could not be removed\");\n    })\n\n    this.props.DeleteData({\n      root: \"SurveyNestedQuestionMaster\",\n      query: { NestedQuestionId: row.QuestionID }\n    })\n\n    setTimeout(function () {\n      let sid = getUrlParameter(\"sid\");\n      this.props.GetCommonData({\n        limit: 10,\n        skip: 0,\n        order: 1,\n        root: this.state.root,\n        cols: GetJsonToArray(this.columnlist, \"name\"),\n        con: [{ \"SurveyID\": sid }],\n        c: \"L\",\n      });\n    }.bind(this), 1000);\n\n  }\n  handleEdit(row) {\n    if (!this.FieldOptionsList.includes(row.FieldType)) {\n      this.setState(() => ({\n        editFieldOptions: true\n      }));\n    } else {\n      this.setState(() => ({\n        editFieldOptions: false\n      }));\n    }\n    this.setState({ od: Object.assign({}, row, {}), formvalue: Object.assign({}, row, {}), event: \"Edit\", showModal: true, FormTitle: \"Edit Question\" });\n  }\n  handleClose() {\n    this.setState({ showModal: false });\n  }\n  handleShow() {\n    this.setState({ formvalue: { ...this.selectedrow }, event: \"Add\", showModal: true, FormTitle: \"Add New Question\" });\n  }\n  handleAddNested(row) {\n    this.setState({ formvalue: { ...this.selectedrow, \"ParentQuestionID\": row.QuestionID }, event: \"AddNested\", ParentOption: row.FieldOptions, showModal: true, FormTitle: \"Add New Nested Question\" });\n  }\n\n  handleSave() {\n    if (document.getElementsByName(\"frmChatAgentConfigure\").length > 0 &&\n      document.getElementsByName(\"frmChatAgentConfigure\")[0].reportValidity()) {\n\n      let formvalue = JSON.parse(JSON.stringify(this.state.formvalue));\n      console.log(\"formvalue\", formvalue);\n      this.fnCleanData(formvalue);\n      let qid = formvalue.QuestionID;\n      delete formvalue[\"QuestionID\"];\n\n      formvalue['FieldOptions'] = formvalue['FieldOptions'].replace(/\\s*,\\s*/g, \",\");\n      formvalue['FieldOptions'] = formvalue['FieldOptions'].trim();\n\n      if (formvalue.FieldType == 'single select') formvalue.FieldType = 'radio';\n      if (formvalue.FieldType == 'multi-select') formvalue.FieldType = 'checkbox';\n\n      if (this.FieldOptionsList.includes(formvalue.FieldType)) {\n        formvalue.FieldOptions = \"\";\n      }\n\n\n      let ParentQuestionID;\n      let ParentOptionSelected;\n      if (formvalue.ParentQuestionID) {\n        ParentQuestionID = formvalue.ParentQuestionID;\n        ParentOptionSelected = formvalue.ParentOption;\n        console.log('---nested----', formvalue.ParentQuestionID, formvalue.ParentOption);\n        delete formvalue[\"ParentOption\"];\n        delete formvalue[\"ParentQuestionID\"];\n      }\n\n      if (this.state.event == \"Edit\") {\n        this.fnCleanData(formvalue);\n\n        let res = this.props.UpdateData({\n          root: this.state.root,\n          body: formvalue,\n          querydata: { QuestionID: qid },\n          c: \"L\",\n\n        }, function (data) {\n          toast(\"Question Saved Successfully!\", { type: 'success' });\n        });\n\n      } else {\n        formvalue.CreatedOn = moment().format(\"YYYY-MM-DD HH:mm:ss\");\n        this.props.InsertData({\n          root: this.state.root,\n          body: formvalue,\n          scope: true\n        }, (data) => {\n          if (data.data.status != 200) {\n            toast.error(data.data.message);\n          } else {\n            if (ParentQuestionID) {\n              let NestedQuestionId = data.data.data.recordset[0][\"\"];\n              console.log('////////', ParentOptionSelected, ParentQuestionID, NestedQuestionId);\n              this.props.InsertData({\n                root: \"SurveyNestedQuestionMaster\",\n                body: {\n                  NestedQuestionId,\n                  ParentQuestionId: ParentQuestionID,\n                  SelectedOption: ParentOptionSelected\n                }\n              }, (result) => {\n                if (result.data.status != 200) {\n                  toast.error(result.data.message);\n                } else {\n                  toast(\"Question Added Successfully!\", { type: 'success' });\n                }\n              });\n            } else\n              toast(\"Question Added Successfully!\", { type: 'success' });\n          }\n        });\n        console.log('---------', formvalue);\n      }\n      // let departmentid = formvalue[\"departmentId\"];\n\n      setTimeout(function () {\n        let sid = getUrlParameter(\"sid\");\n        this.props.GetCommonData({\n          limit: 10,\n          skip: 0,\n          order: 1,\n          root: this.state.root,\n          cols: GetJsonToArray(this.columnlist, \"name\"),\n          con: [{ \"SurveyID\": sid }],\n          c: \"L\",\n        });\n      }.bind(this), 1000);\n\n      this.setState({ showModal: false });\n    }\n    return false;\n  }\n\n  handleChange = (e, props) => {\n    if (e.target.id == 'FieldType') {\n      if (!this.FieldOptionsList.includes(e.target.value)) {\n        this.setState(() => ({\n          editFieldOptions: true\n        }));\n      } else {\n        this.setState(() => ({\n          editFieldOptions: false\n        }));\n      }\n    }\n    let formvalue = this.state.formvalue;\n    let od = this.state.od;\n\n    if (e.target && e.target.type == \"checkbox\") {\n      formvalue[e.target.id] = e.target.checked;\n    }\n    else if (e._isAMomentObject) {\n      formvalue[props] = e.format()\n    }\n    else {\n      formvalue[e.target.id] = e.target.type === 'number' ? parseInt(e.target.value) : e.target.value;\n    }\n    //debugger;\n    //let Changed = CompareJson(od, formvalue);\n\n    this.setState({ formvalue: formvalue, ModalValueChanged: true });\n  }\n\n  fnCleanData(formvalue) {\n    // formvalue = fnCleanData(this.columnlist, formvalue);\n    // this.setState({ formvalue: formvalue });\n  }\n\n\n  render() {\n    const columns = this.fnDatatableCol();\n    const { items, PageTitle, showModal, FormTitle, formvalue, ModalValueChanged, event } = this.state;\n    console.log(\"renderitems\", items, formvalue);\n    if (items) {\n      for (let i = 0; i < items.length; i++) {\n        if (items[i].FieldType == 'radio') items[i].FieldType = 'single select';\n        if (items[i].FieldType == 'checkbox') items[i].FieldType = 'multi-select';\n      }\n    }\n\n\n    return (\n      <>\n        <div className=\"content\">\n          <ToastContainer />\n          <Row>\n            <Col md=\"12\">\n              <Card>\n                <CardHeader>\n                  <Row>\n                    <Col md={10}>\n                      <CardTitle tag=\"h4\">{PageTitle}</CardTitle>\n                    </Col>\n\n                    <Col md={2}>\n                      <Button disabled={this.state.valid_sid} variant=\"primary\" onClick={this.handleShow}>Add New Question</Button>\n                    </Col>\n                  </Row>\n                </CardHeader>\n                <CardBody>\n                  <DataTable\n                    columns={columns}\n                    data={items}\n                    extention={true}\n                    export={false}\n                    print={false}\n                  />\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n\n          <Modal show={showModal} onHide={this.handleClose} dialogClassName=\"modal-90w\">\n            <Modal.Header closeButton>\n              <Modal.Title>{FormTitle}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n              <Form name=\"frmChatAgentConfigure\">\n                <Row>\n                  {this.columnlist.map(col => {\n                    if (col.name == 'FieldType') {\n                      return <Form.Group as={Col} md={3} controlId={col.name} key={col.name}>\n                        <Form.Label>{col.label}</Form.Label>\n                        <Form.Control as=\"select\" onChange={this.handleChange} defaultValue={formvalue.FieldType}\n                          placeholder=\"Select\" required>\n                          <option key={0} value=\"\" disabled selected>Select your option</option>\n                          <option key={1} value=\"string\">string</option>\n                          <option key={2} value=\"textarea\">textarea</option>\n                          <option key={3} value=\"multi-select\">multi-select</option>\n                          <option key={4} value=\"single select\">single select</option>\n                          <option key={5} value=\"number\">number</option>\n                          <option key={6} value=\"dropdown\">dropdown</option>\n                          <option key={7} value=\"email\">email</option>\n                          <option key={8} value=\"empty\">empty</option>\n                          <option key={9} value=\"link\">link</option>\n                          <option key={10} value=\"embedded\">embedded</option>\n                        </Form.Control>\n                      </Form.Group>\n                    }\n                    if (col.name == 'FieldOptions' && !this.state.editFieldOptions)\n                      return false;\n\n                    return col.name == 'SurveyID' || col.name == 'QuestionID' ? false :\n                      fnRenderfrmControl(col, formvalue, this.handleChange, event)\n                  })}\n                  {event == \"AddNested\" &&\n                    <Form.Group as={Col} md={3} controlId=\"ParentOption\" key=\"ParentOption\">\n                      <Form.Label>ParentOption</Form.Label>\n                      <Form.Control as=\"select\" onChange={this.handleChange}\n                        placeholder=\"Select\" required>\n                        <option key={0} value=\"\" disabled selected>Select your option</option>\n                        {this.state.ParentOption.split(',').map((option, index) => {\n                          return <option key={index + 1} value={option}>{option}</option>\n                        })}\n                      </Form.Control>\n                    </Form.Group>\n                  }\n                  {event == \"AddNested\" &&\n                    <Form.Group as={Col} md={2} controlId=\"ParentQuestionID\" key=\"ParentQuestionID\">\n                      <Form.Label>ParentQuestionID</Form.Label>\n                      <Form.Control required\n                        disabled\n                        type=\"number\" onChange={this.handleChange} value={formvalue[\"ParentQuestionID\"]} />\n                    </Form.Group>\n                  }\n                </Row>\n              </Form>\n            </Modal.Body>\n            <Modal.Footer>\n              <Button variant=\"secondary\" onClick={this.handleClose}>\n                Close\n              </Button>\n              <If condition={ModalValueChanged}>\n                <Then>\n                  <input type=\"submit\" value=\"Save Changes\" className=\"btn btn-primary\" onClick={this.handleSave} />\n                </Then>\n              </If>\n            </Modal.Footer>\n          </Modal>\n        </div>\n      </>\n    );\n  }\n}\n\n\nfunction mapStateToProps(state) {\n  return {\n    CommonData: state.CommonData\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  {\n    GetCommonData,\n    InsertData,\n    UpdateData,\n    DeleteData\n  }\n)(AgentSurveyQuestions);"],"sourceRoot":""}