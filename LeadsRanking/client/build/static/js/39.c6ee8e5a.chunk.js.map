{"version":3,"sources":["views/MobileCallingReport.jsx","views/Common/AlertBox.jsx","store/actions/CommonMysqlAction.jsx","views/Common/ManagerHierarchy.jsx","views/Common/DropDownListMysql.jsx","views/Common/DropDown.jsx"],"names":["MobileCallingReport","props","handleChange","e","_isAMomentObject","setState","ReportDate","format","this","fetchCallBackData","handleStartDateChange","startdate","handleEndDateChange","enddate","validation","currentDate","isBefore","moment","state","maxdate","validationEndDate","root","PageTitle","ProductData","ProductId","subtract","ReportTime","showMoreInfoModal","MoreInfoData","addClass","selectedIvrProduct","ivrType","ivrProducts","ivrQueues","SelectedQueues","queueServerIp","selectedValue","label","value","ConfType","addClassDisabled","confTypes","ivrtypechange","bind","ivrproductchange","conftypechange","onSelect","columnlist","name","selector","width","type","cell","row","className","callid","searchable","hidden","conference_type","calldate","utc","sortable","config","statename","data","Id","Display","indexOf","custom_disposition","getHtmlListenMoreInfo","IvrTypeList","ConfTypeList","GetMySqlData","result","col","nextProps","items","CommonData","joinObject","isError","store","console","log","map","fnBindStore","fnDatatableCol","queues","serverip","val","selectedqueues","join","conftype","length","MobileAbandonReport","toast","ProductType","number","audio","document","getElementById","icon","paused","play","classList","remove","add","pause","currentTime","id","row_num","onClick","CreateMoreInfoRecordingURL","class","innerHTML","userfield","dstchannel","date","Date","hour","datetime","phoneNo","substring","recfilename","GetAwsRecordingUrl","results","status","url","src","GetFileExists","params","onloadedmetadata","duration","onended","target","fetchProductData","fetchQueueData","selectedList","selectedItem","newselectedList","filter","task","columns","moreinfolist","showAlert","AlertMsg","AlertVarient","show","variant","body","md","tag","Group","controlId","firstoption","onChange","options","selectAllLabel","as","Col","dateFormat","fetchAbandonData","React","Component","connect","GetCommonData","GetCommonspData","GetDataDirect","AlertBox","setTimeout","GetCommonData_fetched","Todos","dataToSend","localStorage","setItem","JSON","stringify","constants","GET_COMMON_SUCCESS","payload","GetCommonData_fetch_error","error","GET_COMMON_FAIL","cb","undefined","dispatch","getState","getItem","parse","axios","get","api","base_url","then","catch","InsertData","post","INSERT_COMMON_SUCCESS","INSERT_COMMON_FAIL","InsertData_fetch_error","UpdateData","UPDATE_COMMON_SUCCESS","UPDATE_COMMON_FAIL","UpdateData_fetch_error","ManagerHierarchy","nodes","checked","expanded","UserId","getuser","RoleId","UserID","ManagerId","res","replace","handleShow","SelectedSupervisors","forceUpdate","style","right","checkeditem","index","splice","onMouseLeave","onMouseOut","onMouseEnter","onButtonClick","checkModel","showNodeIcon","onCheck","onExpand","showExpandAll","DropDownListMysql","CallApi","Idfield","Displayfield","limit","skip","cols","con","visible","Control","disabled","key","item","DropDown","displayoption"],"mappings":"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","file":"static/js/39.c6ee8e5a.chunk.js","sourcesContent":["\r\nimport React from \"react\";\r\nimport {\r\n    GetCommonData, GetCommonspData, GetFileExists, GetAwsRecordingUrl\r\n} from \"../store/actions/CommonAction\";\r\nimport {\r\n    GetMySqlData, GetDataDirect\r\n} from \"../store/actions/CommonMysqlAction\";\r\nimport { connect } from \"react-redux\";\r\nimport { OpenSalesView, getUrlParameter, getuser, fnDatatableCol, hhmmss, joinObject } from '../utility/utility.jsx';\r\n//import { Multiselect } from 'multiselect-react-dropdown';\r\n//import { MDBSelect } from \"mdbreact\";\r\n//import Select from 'react-select'; \r\n//import makeAnimated from 'react-select/animated'; \r\nimport DropDownListMysql from './Common/DropDownListMysql';\r\nimport MultiSelect from \"react-multi-select-component\";\r\nimport DataTable from './Common/DataTableWithFilter';\r\nimport DropDown from './Common/DropDown';\r\nimport ManagerHierarchy from './Common/ManagerHierarchy';\r\nimport Moment from 'react-moment';\r\nimport moment from 'moment';\r\nimport { If, Then, Else } from 'react-if';\r\nimport AlertBox from './Common/AlertBox';\r\nimport config from \"../config.jsx\";\r\n\r\n\r\n\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport * as Datetime from 'react-datetime';\r\nimport 'react-datetime/css/react-datetime.css'\r\n\r\n\r\n\r\n// reactstrap components\r\nimport {\r\n    Card,\r\n    CardHeader,\r\n    CardBody,\r\n    CardTitle,\r\n    Table,\r\n    Row,\r\n    Col\r\n} from \"reactstrap\";\r\nimport { ButtonGroup, Button, Modal, Form } from 'react-bootstrap';\r\nimport { func, string } from \"prop-types\";\r\n\r\nclass MobileCallingReport extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            root: \"queueAbandonData\",\r\n            PageTitle: \"Mobile Calling Report\",\r\n            ProductData: [],\r\n            ProductId: 0,\r\n            ReportDate: moment().subtract(1, 'days').format(\"YYYY-MM-DD\"),\r\n            ReportTime: null,\r\n            startdate: moment().format(\"YYYY-MM-DD\"),\r\n            enddate: moment().format(\"YYYY-MM-DD\"),\r\n            maxdate: moment().subtract(60, 'days').format(\"YYYY-MM-DD\"),\r\n            showMoreInfoModal: false,\r\n            MoreInfoData: [],\r\n            addClass: \"fa fa-play-circle\",\r\n            selectedIvrProduct: \"\",\r\n            ivrType: \"0\",\r\n            ivrProducts: [],\r\n            ivrQueues: [],\r\n            SelectedQueues: [],\r\n            queueServerIp: \"\",\r\n            selectedValue: [ { label: \"Select IVR Queues\", value: \"0\" }],\r\n            ConfType: '',\r\n            addClassDisabled: '',\r\n            confTypes: [],\r\n\r\n\r\n        };\r\n        this.ivrtypechange = this.ivrtypechange.bind(this);\r\n        this.ivrproductchange = this.ivrproductchange.bind(this);\r\n        this.conftypechange = this.conftypechange.bind(this);\r\n        this.onSelect = this.onSelect.bind(this);\r\n\r\n        this.columnlist = [\r\n            {\r\n                name: \"CallId\",\r\n                selector: \"callid\",\r\n                width: \"150px\",\r\n                type: \"string\",\r\n                cell: row => <div className=\"callid\">{row.callid ? row.callid : \"N.A\"}</div>,\r\n            },\r\n            {\r\n                name: \"LeadId\",\r\n                selector: \"leadid\",\r\n                searchable: true\r\n            },\r\n            {\r\n                name: \"dstchannel\",\r\n                selector: \"dstchannel\",\r\n                hidden: true,\r\n            },  \r\n            {\r\n                name: \"userfield\",\r\n                selector: \"userfield\",\r\n                hidden: true\r\n            },\r\n            {\r\n                name: \"queuename\",\r\n                selector: \"queuename\",\r\n                searchable: true\r\n\r\n            },\r\n            {\r\n                name: \"ConfType\",\r\n                selector: \"conference_type\",\r\n                cell: row => <div className=\"conference_type\">{row.conference_type ? row.conference_type : \"N.A\"}</div>,\r\n            },\r\n            {\r\n                name: \"Calldate\",\r\n                selector: \"calldate\",\r\n                cell: row => <div className=\"calldate\">{row.calldate ? <Moment utc={true} format=\"YYYY-MM-DD HH:mm:ss\"\r\n                >{row.calldate}</Moment> : \"N.A\"}</div>,\r\n                type: \"datetime\",\r\n                sortable: true,\r\n                width: \"150px\",\r\n            },\r\n            {\r\n                name: \"agentid\",\r\n                selector: \"agentid\",\r\n                searchable: true,\r\n            },\r\n            {\r\n                name: \"agentno\",\r\n                selector: \"agentno\",\r\n                searchable: true\r\n            },\r\n            {\r\n                name: \"duration\",\r\n                selector: \"ringtime\",\r\n                searchable: true,\r\n            },\r\n            {\r\n                name: \"disposition\",\r\n                selector: \"custom_disposition\",\r\n                type: \"dropdown\",\r\n                searchable: true,\r\n                config: {\r\n                    root: \"custom_disposition\",\r\n                    state: true,\r\n                    statename: \"custom_disposition\",\r\n                    data: [{ Id: \"ANSWERED\", Display: \"ANSWERED\" }, { Id: \"NO ANSWER\", Display: \"NO ANSWER\" }, { Id: \"BUSY\", Display: \"BUSY\" }, { Id: \"FAILED\", Display: \"FAILED\" }],\r\n                }\r\n            },\r\n            {\r\n                name: \"Listen\", cell: row =>(['Playback','Hangup'].indexOf(row.custom_disposition) > -1)?'No file found':\r\n                <div className=\"listen\">\r\n                    {this.getHtmlListenMoreInfo(row)}\r\n                </div>,\r\n                width: \"150px\",  \r\n            },\r\n            // {\r\n            //     name: \"Listen\", cell: row =>\r\n            //       <div className=\"listen\">\r\n            //         {this.CreateRecordingURL(row)}\r\n            //       </div>,\r\n            //     width: \"150px\",  \r\n            // }\r\n\r\n        ];\r\n\r\n\r\n\r\n        this.IvrTypeList = {\r\n            config:\r\n            {\r\n                root: \"Ivrtypelist\",\r\n                data: [{ Id: \"Service\", Display: \"Service\" }, { Id: \"Sales\", Display: \"Sales\" }, { Id: \"Claim\", Display: \"Claim\" }],\r\n            }\r\n        };\r\n\r\n        this.ConfTypeList = {\r\n            config:\r\n            {\r\n                root: \"Conftypelist\",\r\n                data: [{ Id: \"sales_to_service\", Display: \"Life Hot Call Transfer\" }, { Id: \"telimedical\", Display: \"Teli-Medical [BMS Transfer]\" }, { Id: \"telemax\", Display: \"Tele-Max\" }, { Id: \"tltransfer\", Display: \"TLTransfer\" }\r\n                    , { Id: \"0\", Display: \"Other\" }],\r\n            }\r\n        };\r\n\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.props.GetMySqlData({\r\n          root: \"getConferenceType\",\r\n        }, function (result) {\r\n            this.setState({ confTypes: result.data.data[0] });\r\n        }.bind(this));\r\n    \r\n      }\r\n\r\n    componentWillMount() {\r\n        // this.props.GetMySqlData({\r\n        //   root: this.state.root,\r\n        //   startdate: this.state.startdate,\r\n        //   enddate: this.state.enddate,\r\n        //   conftype: 'sales_to_service',\r\n        // }, function (result) {\r\n        //   this.setState({ MobileCallingReport: result.data.data[0] });\r\n        // }.bind(this));\r\n\r\n    }\r\n\r\n    fnBindStore(col, nextProps) {\r\n       // debugger;\r\n        if (col.type == \"dropdown\") {\r\n            let items;\r\n            if (nextProps.CommonData[this.state.root] && (nextProps.CommonData[col.config.root] || col.config.data)) {\r\n                items = joinObject(nextProps.CommonData[this.state.root], (nextProps.CommonData[col.config.root] || col.config.data), col.name)\r\n                this.setState({ items: items });\r\n            }\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        //debugger;\r\n        if (!nextProps.CommonData.isError) {\r\n            //debugger;\r\n            //this.setState({ MobileCallingReport: nextProps.CommonData[this.state.root] });\r\n            this.setState({ items: nextProps.CommonData[this.state.root] });\r\n            this.setState({ store: nextProps.CommonData });\r\n            console.log(nextProps.CommonData[this.state.root]);\r\n            this.columnlist.map(col => (\r\n                this.fnBindStore(col, nextProps)\r\n            ));\r\n        }\r\n    }\r\n\r\n    fnDatatableCol() {\r\n\r\n        var columns = fnDatatableCol(this.columnlist);\r\n        return columns;\r\n    }\r\n\r\n\r\n    fetchAbandonData() {\r\n        //debugger;\r\n        if (this.state.ivrType == 0) {\r\n        toast(\"Please enter ivrType\", { type: 'error' });\r\n        return;\r\n          }\r\n        if (this.state.ivrProducts == '') {\r\n        toast(\"Please enter ivrProducts\", { type: 'error' });\r\n        return;\r\n        }\r\n        if (this.state.ivrQueues == '') {\r\n        toast(\"Please enter ivrQueues\", { type: 'error' });\r\n        return;\r\n        }  \r\n          \r\n        this.setState({addClassDisabled:'disabled'});\r\n\r\n        let queues = this.state.selectedValue;\r\n\r\n        var serverip = queues.map(function (val) {\r\n            return val.serverip;\r\n        });\r\n\r\n        var queuestring = queues.map(function (val) {\r\n            return val.label;\r\n        });\r\n        var selectedqueues = queuestring.join(\"','\");\r\n\r\n        this.props.GetMySqlData({\r\n            root: this.state.root,\r\n            startdate: this.state.startdate,\r\n            enddate: this.state.enddate,\r\n            queues: selectedqueues,\r\n            conftype: this.state.ConfType,\r\n            queueServerIp: serverip[0],\r\n        }, function (result) {\r\n            if(result.data.data[0].length == 0){\r\n                this.setState({ MobileAbandonReport: [] ,addClassDisabled:''});\r\n            } else{\r\n            this.setState({ MobileAbandonReport: result.data.data[0] ,addClassDisabled:''});\r\n            }\r\n            let nextProps = this.props;\r\n            this.columnlist.map(col => (\r\n                this.fnBindStore(col, nextProps)\r\n            ));\r\n        }.bind(this));\r\n\r\n    }\r\n\r\n    fetchProductData() {\r\n\r\n\r\n        this.props.GetMySqlData({\r\n            // root: \"getProduct\",\r\n            // con: [{ \"ivrtype\": this.state.ivrType }],\r\n            root: \"getProductByIvrType\",\r\n            ProductType: this.state.ivrType,\r\n        }, function (result) {\r\n            this.setState({ ivrProducts: result.data.data[0] });\r\n        }.bind(this));\r\n\r\n    }\r\n\r\n    fetchQueueData() {\r\n\r\n        //debugger;\r\n        this.props.GetMySqlData({\r\n            // root: \"getIvrQueue\",\r\n            // con: [{ \"ivrtype\": this.state.ivrType, \"product\": this.state.selectedIvrProduct }],\r\n            root: \"getQueuesByIvrProduct\",\r\n            ProductType: this.state.ivrType,\r\n            ProductId: this.state.selectedIvrProduct,\r\n     \r\n        }, function (result) {\r\n            this.setState({ ivrQueues: result.data.data[0] }); \r\n                if (result.data.data[0].length == 1) {\r\n                    this.setState({\r\n                        selectedValue: result.data.data[0]\r\n                    });\r\n                }         \r\n        }.bind(this));\r\n\r\n    }\r\n\r\n\r\n    play(number) {\r\n        var audio = document.getElementById('audio_' + number);\r\n        var icon = document.getElementById(\"play\" + number);\r\n        if (audio.paused) {\r\n            audio.play();\r\n            icon.classList.remove(\"fa-play-circle\");\r\n            icon.classList.add(\"fa-stop-circle\");\r\n        } else {\r\n            audio.pause();\r\n            audio.currentTime = 0\r\n            icon.classList.remove(\"fa-stop-circle\");\r\n            icon.classList.add(\"fa-play-circle\");\r\n        }\r\n    }\r\n\r\n    // CreateRecordingURL(row) {\r\n\r\n    //     let userfield = row.userfield;\r\n    //     let dstchannel = row.dstchannel;\r\n    //     let date = moment(new Date(userfield)).format(\"DD-MM-YYYY\");\r\n    //     let hour = moment(new Date(userfield)).format(\"H\");\r\n    //     let datetime = moment(new Date(userfield)).format(\"YYYYMMDDHHmmss\");\r\n    //     let phoneNo = dstchannel.substring(dstchannel.indexOf(\"/\") + 1, dstchannel.indexOf(\"-\"));\r\n    //     let callid = row.callid;\r\n    //     console.log(date, hour, datetime, phoneNo, callid);\r\n    //     let url = config.api.s3recordingurl + date + \"/\" + hour + \"/\" + callid + \"-\" + datetime + \"-\" + phoneNo + \".wav\";\r\n    //     console.log(url);\r\n    //     if (date == \"Invalid date\" || hour == \"Invalid date\" || datetime == \"Invalid date\" || phoneNo == null) {\r\n    //         return <span class='NotFound'>File not found</span>\r\n    //     }\r\n\r\n    //     GetFileExists(url, function (params) {\r\n    //         if (params && params.status && params.status != 404) {\r\n    //         }\r\n    //         else {   \r\n    //              //debugger;\r\n    //             var listenelement = document.getElementById(\"span_\" + row.row_num);\r\n    //             if(typeof(listenelement) != 'undefined' && listenelement != null){ \r\n    //                 document.getElementById(\"span_\" + row.row_num).innerHTML = \"<span class='NotFound'>File not found</span>\";\r\n    //             }\r\n    //         }\r\n    //     });\r\n\r\n    //     //let url = \"https://asterisk-log.s3.ap-south-1.amazonaws.com/recording/12-05-2020/10/1589258668.10883-20200512101428-07509883158.wav\";\r\n    //     return <span id={\"span_\" + row.row_num}><audio src={url} id={\"audio\" + \"_\" + row.row_num}></audio>\r\n    //         <i className={this.state.addClass} id={\"play\" + row.row_num} onClick={(e) => this.play(row.row_num, e)}></i>\r\n    //     </span>;\r\n    // }\r\n\r\n\r\n    getHtmlListenMoreInfo(row){\r\n        return  (<span id={\"span_\" + row.row_num} onClick={(e) => this.CreateMoreInfoRecordingURL(e, row)}>\r\n          <i class=\"fa fa-play-circle listen\"></i>\r\n          </span>)\r\n      }\r\n    \r\n      CreateMoreInfoRecordingURL(e, row){\r\n        var audio = document.getElementById('audio2');\r\n        var number = row.row_num;\r\n        if (audio.paused) {\r\n          document.getElementById('span_'+ number).innerHTML = '<i class=\"fa fa-spinner fa-spin\"></i>';\r\n          let userfield = row.userfield;\r\n          let dstchannel = row.dstchannel;\r\n          let date = moment(new Date(userfield)).format(\"DD-MM-YYYY\");\r\n          let hour = moment(new Date(userfield)).format(\"H\");\r\n          let datetime = moment(new Date(userfield)).format(\"YYYYMMDDHHmmss\");\r\n          let phoneNo = dstchannel.substring(dstchannel.indexOf(\"/\") + 1, dstchannel.indexOf(\"-\"));\r\n          let callid = row.callid;\r\n          console.log(date, hour, datetime, phoneNo, callid);\r\n          let recfilename = \"recording/\"+ date + \"/\" + hour + \"/\" + callid + \"-\" + datetime + \"-\" + phoneNo + \".wav\";\r\n          //let url = \"https://asterisk-log.s3.ap-south-1.amazonaws.com/recording/\" + date + \"/\" + hour + \"/\" + callid + \"-\" + datetime + \"-\" + phoneNo + \".wav\";\r\n      \r\n      \r\n          if (date == \"Invalid date\" || hour == \"Invalid date\" || datetime == \"Invalid date\" || phoneNo == null) {\r\n            document.getElementById('span_'+ number).innerHTML = 'No File Found';\r\n            return;\r\n          }\r\n         \r\n          //debugger;\r\n              GetAwsRecordingUrl(recfilename, 'asterisk-log' ,function (results) {debugger;\r\n                //debugger;\r\n    \r\n                console.log(\"results\", results);\r\n                if (results.data.status == 200) {\r\n                  let url = results.data.data;\r\n                  audio.src = results.data.data;\r\n                  document.getElementById('span_'+ number).innerHTML = '<i class=\"fa fa-spinner fa-spin\"></i>';\r\n                  GetFileExists(url, function (params) {\r\n                    //debugger;\r\n                    if (params && params.status && params.status != 404) {\r\n                      audio.onloadedmetadata = function() {\r\n                        console.log(audio.duration)\r\n                        //setTimeout(function () {\r\n                          audio.play();\r\n                          console.log(audio.duration);\r\n                          if(audio.paused == false && audio.duration > 0 && audio.duration != 'Infinity' && audio.duration != 'NaN'){\r\n                          document.getElementById('span_'+ number).innerHTML = '<i class=\"fa fa-stop-circle listen\"></i>';\r\n                         \r\n                          audio.onended = function() {\r\n                            document.getElementById('span_'+ number).innerHTML = '<i class=\"fa fa-play-circle listen\"></i>';\r\n                          };\r\n                         \r\n                          }else{\r\n                          document.getElementById('span_'+ number).innerHTML = 'No File Found'; \r\n                          }\r\n                       // }.bind(this), 500);\r\n                      };\r\n                    } else {\r\n                      try {\r\n                        document.getElementById(\"span_\" + row.row_num).innerHTML = \"File not found\";\r\n                      } catch (e) {\r\n                        //console.log('error', e);        \r\n                      }\r\n                    }\r\n                  });\r\n                \r\n                  \r\n                } else {\r\n                  document.getElementById('span_'+ number).innerHTML = 'No File Found';\r\n                }\r\n              }.bind(this));\r\n           \r\n    \r\n    \r\n        } else {\r\n          //debugger;\r\n          audio.pause();\r\n          audio.currentTime = 0;\r\n          document.getElementById('span_'+ number).innerHTML = '<i class=\"fa fa-play-circle listen\"></i>';\r\n    \r\n        }\r\n    \r\n      }\r\n\r\n      \r\n    ivrtypechange(e, props) {\r\n        this.setState({\r\n            ivrType: e.target.value,\r\n            selectedValue: [{ label: \"Select IVR Queues\", value: \"0\" }],\r\n            ivrProducts: [{ Display: \"Select Ivr Product\", Id: \"0\" }]\r\n        }, function () {\r\n            this.fetchProductData();\r\n        });\r\n\r\n    }\r\n\r\n    ivrproductchange(e, props) {\r\n        this.setState({\r\n            selectedIvrProduct: e.target.value,\r\n            ivrQueues : [],\r\n            selectedValue : [{ label: \"Select IVR Queues\", value: \"0\" }]\r\n        }, function () {\r\n            this.fetchQueueData();\r\n        });\r\n    }\r\n\r\n    conftypechange(e, props) {\r\n        this.setState({\r\n            ConfType: e.target.value\r\n        }, function () {\r\n            //this.fetchConferenceData();\r\n        });\r\n\r\n    }\r\n\r\n    handleChange = (e, props) => {\r\n\r\n        if (e._isAMomentObject) {\r\n            this.setState({ ReportDate: e.format(\"YYYY-MM-DD\") }, function () {\r\n                this.fetchCallBackData();\r\n            });\r\n        }\r\n\r\n\r\n    }\r\n\r\n    handleStartDateChange = (e, props) => {\r\n\r\n        if (e._isAMomentObject) {\r\n            this.setState({ startdate: e.format(\"YYYY-MM-DD\") }, function () {\r\n                //this.fetchCallBackData();\r\n            });\r\n        }\r\n\r\n\r\n    }\r\n\r\n    handleEndDateChange = (e, props) => {\r\n\r\n        if (e._isAMomentObject) {\r\n            this.setState({ enddate: e.format(\"YYYY-MM-DD\") }, function () {\r\n                //this.fetchCallBackData();\r\n            });\r\n        }\r\n\r\n\r\n    }\r\n\r\n    onSelect(selectedList, selectedItem) {\r\n        debugger;\r\n        console.log(\"selectlist\",selectedList);\r\n        const newselectedList = selectedList.filter(task => task.label !== 'Select IVR Queues');\r\n        this.setState({ selectedValue: newselectedList });\r\n    }\r\n\r\n\r\n    validation = (currentDate) => {\r\n        return !currentDate.isBefore(moment(this.state.maxdate));\r\n    };\r\n\r\n    validationEndDate = (currentDate) => {\r\n        return !currentDate.isBefore(moment(this.state.startdate));\r\n    };\r\n\r\n    render() {\r\n        const columns = this.columnlist;\r\n        //const columns = this.fnDatatableCol();\r\n        const moreinfocolumns = this.moreinfolist;\r\n        const { items, PageTitle, MobileAbandonReport, showAlert, AlertMsg, AlertVarient, ReportTime, MoreInfoData } = this.state;\r\n        console.log(\"MobileAbandonReport\", MobileAbandonReport);\r\n        console.log(\"columns\", columns);\r\n        let selectedLeads = [];\r\n\r\n\r\n        return (\r\n            <>\r\n                <div className=\"content\">\r\n                    <AlertBox show={showAlert} variant={AlertVarient} body={AlertMsg}></AlertBox>\r\n                    <ToastContainer />\r\n                    <Row>\r\n                        <Col md=\"12\">\r\n                            <Card>\r\n                                <CardHeader>\r\n                                    <Row>\r\n                                        <Col md={12}>\r\n                                            <CardTitle tag=\"h5\">{PageTitle}</CardTitle>\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n                                    <Row>\r\n                                        <Col md={2}>\r\n                                            <Form.Group controlId=\"ivrtype_dropdown\">\r\n                                                <DropDownListMysql firstoption=\"Select Ivr Type\" value={this.state.ivrType} col={this.IvrTypeList} onChange={this.ivrtypechange}>\r\n                                                </DropDownListMysql>\r\n                                            </Form.Group>\r\n                                        </Col>\r\n                                        <Col md={2}>\r\n                                            <Form.Group controlId=\"product_dropdown\">\r\n                                                <DropDown firstoption=\"Select Ivr Product\" items={this.state.ivrProducts} onChange={this.ivrproductchange}>\r\n                                                </DropDown>\r\n                                            </Form.Group>\r\n\r\n                                        </Col>\r\n                                        <Col md={3}>\r\n                                            <MultiSelect\r\n                                                options={this.state.ivrQueues} // Options to display in the dropdown\r\n                                                value={this.state.selectedValue} // Preselected value to persist in dropdown\r\n                                                onChange={this.onSelect} // Function will trigger on select event                                                \r\n                                                //labelledBy={\"Select IVR Queues\"}\r\n                                                selectAllLabel={\"Select ALL IVR Queues\"}\r\n                                            />\r\n                                        </Col>\r\n                                        <Col md={3}>\r\n                                            <Form.Group as={Col} md={12} controlId=\"conftype_dropdown\">\r\n                                                <DropDown firstoption=\"Select Conference Type\" items={this.state.confTypes} onChange={this.conftypechange}>\r\n                                                </DropDown>\r\n                                            </Form.Group>\r\n                                        </Col>\r\n\r\n                                        <Col md={2}>\r\n                                            <Datetime value={new Date()}\r\n                                                dateFormat=\"YYYY-MM-DD\"\r\n                                                value={this.state.startdate}\r\n                                                isValidDate={this.validation}\r\n                                                onChange={moment => this.handleStartDateChange(moment)}\r\n                                                utc={true}\r\n                                                timeFormat={false}\r\n                                                className=\"form-group\"\r\n                                            />\r\n                                        </Col>\r\n                                        <Col md={2}>\r\n                                            <Datetime value={new Date()}\r\n                                                dateFormat=\"YYYY-MM-DD\"\r\n                                                value={this.state.enddate}\r\n                                                isValidDate={this.validationEndDate}\r\n                                                onChange={moment => this.handleEndDateChange(moment)}\r\n                                                utc={true}\r\n                                                timeFormat={false}\r\n                                                className=\"form-group\"\r\n                                            />\r\n                                        </Col>\r\n                                        <Col md={1}>\r\n                                            <Button className={this.state.addClassDisabled} variant=\"primary\" onClick={() => this.fetchAbandonData()}>Fetch</Button>\r\n                                        </Col>\r\n\r\n                                    </Row>\r\n\r\n                                </CardHeader>\r\n                                <CardBody>\r\n                                    <DataTable\r\n                                        columns={columns}\r\n                                        data={(MobileAbandonReport && MobileAbandonReport.length > 0) ? MobileAbandonReport : []}\r\n                                    />\r\n                                </CardBody>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n\r\n\r\n\r\n                </div>\r\n                <audio src=\"\" id={\"audio2\"}></audio>\r\n\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        CommonData: state.CommonData\r\n    };\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    {\r\n        GetCommonData,\r\n        GetCommonspData,\r\n        GetMySqlData,\r\n        GetDataDirect,\r\n\r\n    }\r\n)(MobileCallingReport);","\r\nimport React from \"react\";\r\nimport { Alert } from 'react-bootstrap';\r\n\r\n\r\nclass AlertBox extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            show: this.props.show\r\n        }\r\n    }\r\n    componentDidUpdate() {\r\n\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        this.setState({ show: nextProps.show });\r\n        if (nextProps.show) {\r\n            setTimeout(function () {\r\n                this.setState({ show: false });\r\n            }.bind(this), 5000);\r\n        }\r\n    }\r\n    render() {\r\n        if (this.state.show) {\r\n            return (\r\n                <Alert variant={this.props.variant}>\r\n                    {this.props.body}\r\n                </Alert>\r\n            );\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nexport default AlertBox;\r\n","import axios from \"axios\";\nimport config from \"../../config.jsx\";\nimport constants from \"../../Constants/Constants.jsx\";\n\nconst GetCommonData_fetched = Todos => {\n\n  if (Todos.dataToSend.state && Todos.dataToSend.statename) {\n    localStorage.setItem(Todos.dataToSend.statename, JSON.stringify(Todos.data));\n  }\n\n  return {\n    type: constants.GET_COMMON_SUCCESS,\n    payload: Todos.data,\n    root: Todos.dataToSend.root\n  };\n};\n\nconst GetCommonData_fetch_error = error => {\n  return {\n    type: constants.GET_COMMON_FAIL,\n    payload: error\n  };\n};\n\nexport const GetMySqlData = (dataToSend,cb) => {\n\n  if (dataToSend.data != null || dataToSend.data != undefined) {\n    return function (dispatch, getState) {\n      dispatch(GetCommonData_fetched({ data: dataToSend.data, dataToSend: dataToSend }));\n    };\n  }\n  try {\n    if ((dataToSend.state && localStorage.getItem(dataToSend.statename)) || localStorage.getItem(dataToSend.statename)) {\n\n      return function (dispatch, getState) {\n        let data = JSON.parse(localStorage.getItem(dataToSend.statename))\n        dispatch(GetCommonData_fetched({ data: data, dataToSend: dataToSend }));\n      }\n    }\n  }\n  catch (e) {\n\n  }\n\n\n  return function (dispatch, getState) {\n    axios\n      .get(config.api.base_url + \"/mydb/list/\", {\n        params: dataToSend\n      })\n      .then(data => {\n        if (dataToSend.state && dataToSend.statename) {\n          localStorage.setItem(dataToSend.statename, JSON.stringify(data.data.data));\n        }\n        if (cb) {\n          cb(data);\n        }\n        dispatch(GetCommonData_fetched({ data: data.data.data[0], dataToSend: dataToSend }));\n      })\n      .catch(error => {\n        dispatch(GetCommonData_fetch_error(error, dataToSend));\n      });\n  };\n};\n\n\n\n\nconst InsertData_fetched = Todos => {\n\n  return {\n    type: constants.INSERT_COMMON_SUCCESS,\n    payload: Todos.data\n  };\n};\n\nconst InsertData_fetch_error = error => {\n  return {\n    type: constants.INSERT_COMMON_FAIL,\n    payload: error\n  };\n};\n\nexport const InsertData = (dataToSend, cb) => {\n  return function (dispatch, getState) {\n    axios\n      .post(config.api.base_url + \"/mydb/insert/\", {\n        data: dataToSend\n      })\n      .then(data => {\n        if (cb) {\n          cb(data);\n        }\n        dispatch(InsertData_fetched({ data: data.data }));\n      })\n      .catch(error => {\n        dispatch(InsertData_fetch_error(error));\n      });\n  };\n};\n\n\nconst UpdateData_fetched = Todos => {\n\n  return {\n    type: constants.UPDATE_COMMON_SUCCESS,\n    payload: Todos.data\n  };\n};\n\nconst UpdateData_fetch_error = error => {\n  return {\n    type: constants.UPDATE_COMMON_FAIL,\n    payload: error\n  };\n};\n\nexport const UpdateData = (dataToSend, cb) => {\n\n  return function (dispatch, getState) {\n    axios\n      .post(config.api.base_url + \"/mydb/update/\", {\n        data: dataToSend\n      })\n      .then(data => {\n        if (cb) {\n          cb(data);\n        }\n        dispatch(UpdateData_fetched({ data: data.data }));\n      })\n      .catch(error => {\n        dispatch(UpdateData_fetch_error(error));\n      });\n  };\n};\n\n\n\n\nexport const GetDataDirect = (dataToSend, cb) => {\n\n  try {\n    if ((dataToSend.state && localStorage.getItem(dataToSend.statename)) || localStorage.getItem(dataToSend.statename)) {\n\n      let data = JSON.parse(localStorage.getItem(dataToSend.statename));\n      cb(data);\n      return;\n    }\n  }\n  catch (e) {\n\n  }\n  //return function (dispatch, getState) {\n  axios\n    .get(config.api.base_url + \"/mydb/list/\", {\n      params: dataToSend\n    })\n    .then(data => {\n      if (dataToSend.state && dataToSend.statename) {\n        localStorage.setItem(dataToSend.statename, JSON.stringify(data.data.data));\n      }\n      cb(data.data.data);\n\n      //dispatch(GetCommonData_fetched({ data: data.data.data[0], dataToSend: dataToSend }));\n    })\n    .catch(error => {\n      //dispatch(GetCommonData_fetch_error(error, dataToSend));\n    });\n  //};\n\n};\n\nexport const GetRealTimeAgentData = (manager, context, cb) => {\n\n  let url = config.api.realtimeurl + \"RealTimeAgentStatus?managercode=\" + (context == \"\" ? manager : \"\") + \"&context=\" + context;\n\n  axios\n    .get(url)\n    .then(data => {\n\n      cb(data);\n      //dispatch(GetCommonData_fetched({ data: data.data.data[0], dataToSend: dataToSend }));\n    })\n    .catch(error => {\n      //dispatch(GetCommonData_fetch_error(error, dataToSend));\n    });\n  //};\n\n};\n\nexport const GetRealTimeTotalData = (context, cb) => {\n\n  let url = config.api.realtimeurl + \"RealTimeData?context=\" + context;\n\n  axios\n    .get(url)\n    .then(data => {\n\n      cb(data);\n      //dispatch(GetCommonData_fetched({ data: data.data.data[0], dataToSend: dataToSend }));\n    })\n    .catch(error => {\n      //dispatch(GetCommonData_fetch_error(error, dataToSend));\n    });\n  //};\n\n};\n\n\nexport const SendOTP = (dataToSend, cb) => {\n  let url = config.api.SendOTP;\n  const headers = {\n    'Content-Type': 'application/json',\n    'Authorization': 'cG9saWN5 YmF6YWFy'\n  }\n  axios\n    .post(url,\n      dataToSend\n      , {\n        headers: headers\n      })\n    .then(data => {\n\n      cb(data);\n    })\n    .catch(error => {\n    });\n};\n\nexport const ValidateOTP = (dataToSend, cb) => {\n  let url = config.api.ValidateOTP;\n  const headers = {\n    'Content-Type': 'application/json',\n    'Authorization': 'cG9saWN5 YmF6YWFy'\n  }\n  axios\n    .post(url,\n      dataToSend\n      , {\n        headers: headers\n      })\n    .then(data => {\n\n      cb(data);\n    })\n    .catch(error => {\n    });\n};\n\nexport const GetComunicationData = (dataToSend, cb) => {\n\n  return function (dispatch, getState) {\n    axios\n      .get(config.api.ServiceAPI + dataToSend.root, {\n        params: dataToSend.data\n      })\n      .then(data => {\n        cb(data);\n        //dispatch(GetCommonData_fetched({ data: data, dataToSend: dataToSend }));\n      })\n      .catch(error => {\n        dispatch(GetCommonData_fetch_error(error, dataToSend));\n      });\n  };\n};","\r\nimport React, { Suspense } from 'react';\r\n\r\nimport {\r\n    GetCommonData, GetCommonspData, GetDataDirect\r\n} from \"../../store/actions/CommonAction\";\r\nimport { getUrlParameter, getuser } from '../../utility/utility.jsx';\r\n\r\n\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport 'react-checkbox-tree/lib/react-checkbox-tree.css';\r\nimport CheckboxTree from 'react-checkbox-tree';\r\n\r\n\r\nclass ManagerHierarchy extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: [],\r\n            checked: [],\r\n            expanded: [],\r\n        }\r\n        //this.onExpand = this.onExpand.bind(this);\r\n    }\r\n    componentDidMount() {\r\n\r\n        let UserId = getuser().RoleId == 2 ? 75 : getuser().UserID;\r\n\r\n        GetDataDirect({\r\n            root: \"Hierarchy\",\r\n            ManagerId: UserId,\r\n            statename: \"Hierarchy-\" + UserId,\r\n            value: this.props.value,\r\n            state: true\r\n        }, function (result) {\r\n\r\n            let str = JSON.stringify(result);\r\n            var res = str.replace(/UserName/g, \"label\");\r\n            res = res.replace(this.props.value, \"value\");\r\n\r\n            this.setState({ nodes: JSON.parse(res) });\r\n        }.bind(this));\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n\r\n    }\r\n\r\n\r\n    onButtonClick() {\r\n        this.props.handleShow({\r\n            SelectedSupervisors: this.state.checked\r\n        });\r\n        this.forceUpdate();\r\n    }\r\n    onMouseEnter(e) {\r\n        document.getElementById(\"floating\").style.right = 0\r\n        document.getElementById(\"handle\").style.right = \"395px\"\r\n        //e.target.style.right = 0;\r\n    }\r\n    onMouseOut(e) {\r\n        setTimeout(function () {\r\n            document.getElementById(\"floating\").style.right = \"-400px\"\r\n            document.getElementById(\"handle\").style.right = \"-15px\"\r\n        }, 700);\r\n\r\n        //e.target.style.right = \"-350px\";\r\n    }\r\n    RemoveChecked(checkeditem) {\r\n        const { checked } = this.state;\r\n        let index = checked.indexOf(checkeditem);\r\n        if (index > -1) {\r\n            checked.splice(index, 1);\r\n        }\r\n        this.setState(checked);\r\n    }\r\n    onClick() {\r\n\r\n    }\r\n    render() {\r\n        const { nodes, checked } = this.state;\r\n        if (nodes.length == 0) {\r\n            return null;\r\n        }\r\n        return (\r\n\r\n\r\n            <div id=\"floating\" className=\"floating\" onMouseLeave={this.onMouseOut}>\r\n\r\n                <Row >\r\n                    <Col md=\"8\"><div id=\"handle\" className=\"handle\" onClick={this.onMouseEnter}>Filter</div></Col>\r\n                    <Col md=\"4\"><input type=\"button\" className=\"btn btn-primary\" onClick={this.onButtonClick.bind(this)} value=\"Show\" /></Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                    <Col>\r\n\r\n                        <div className=\"managers\">\r\n                            <CheckboxTree\r\n                                nodes={nodes}\r\n                                checked={this.state.checked}\r\n                                expanded={this.state.expanded}\r\n                                checkModel=\"all\"\r\n                                name=\"UserName\"\r\n                                showNodeIcon={false}\r\n                                onCheck={checked => this.setState({ checked })}\r\n                                onExpand={expanded => this.setState({ expanded })}\r\n                                showExpandAll={true}\r\n                            />\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n\r\n\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default ManagerHierarchy;\r\n","\r\nimport React from \"react\";\r\nimport { Form } from 'react-bootstrap';\r\nimport { connect } from \"react-redux\";\r\n// reactstrap components\r\n\r\nimport {\r\n    GetMySqlData\r\n} from \"../../store/actions/CommonMysqlAction\";\r\nclass DropDownListMysql extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            items: [],\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        if (this.state.items && this.state.items.length === 0) {\r\n            this.CallApi();\r\n        }\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        \r\n        // if (nextProps.col.config.rebind) {\r\n            \r\n        // }\r\n\r\n        if (!nextProps.CommonData.isError) {\r\n            //debugger;\r\n            if (nextProps.CommonData[this.props.col.config.root]) {\r\n                let str = JSON.stringify(nextProps.CommonData[this.props.col.config.root]);\r\n                var res = str.replace(this.props.col.config.Idfield, \"Id\");\r\n                res = res.replace(this.props.col.config.Displayfield, \"Display\");\r\n\r\n                this.setState({ items: JSON.parse(res) });\r\n            }\r\n        }\r\n    }\r\n\r\n    componentWillUpdate(){\r\n        //this.CallApi();\r\n    }\r\n\r\n    CallApi() {\r\n\r\n        this.props.GetMySqlData({\r\n            limit: 10,\r\n            skip: 0,\r\n            root: this.props.col.config.root,\r\n            cols: this.props.col.config.cols,\r\n            con: this.props.col.config.con,\r\n            data: this.props.col.config.data,\r\n            statename: this.props.col.config.statename,\r\n            state: this.props.col.config.state\r\n        });\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        let { items } = this.state;\r\n        const { value, onChange, visible } = this.props;\r\n\r\n        if (!items) {\r\n            items = [];\r\n        }\r\n        if (visible == false) {\r\n            return null;\r\n        }\r\n        return (\r\n\r\n            <div>\r\n\r\n                <Form.Control as=\"select\" disabled={this.props.disabled} value={value} name={this.props.col.name} onChange={onChange}>\r\n                    <option key={0} value={0}>{this.props.firstoption ? this.props.firstoption : \"Select\"}</option>\r\n                    {items.map(item => (\r\n                        <option key={item.Id} value={item.Id}>{item.Display}</option>\r\n                    ))}\r\n\r\n                </Form.Control>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        CommonData: state.CommonData\r\n    };\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    {\r\n        GetMySqlData\r\n    }\r\n)(DropDownListMysql);\r\n\r\n","\nimport React from \"react\";\nimport { Form } from 'react-bootstrap';\nimport { connect } from \"react-redux\";\n// reactstrap components\n\nimport {\n    GetCommonData\n} from \"../../store/actions/CommonAction\";\nclass DropDown extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: [],\n        }\n    }\n    componentDidMount() {\n    }\n    componentWillReceiveProps(nextProps) {\n        this.setState({ items: nextProps.items });\n\n    }\n\n    displayoption(item) {\n        return <option key={item.Id} value={item.Id}>{item.Display}</option>\n    }\n\n    render() {\n\n\n        let { name, value, onChange, visible, items } = this.props;\n        if (!items) {\n            items = [];\n        }\n        if (visible == false) {\n            return null;\n        }\n        return (\n\n            <div>\n\n                <Form.Control as=\"select\" disabled={this.props.disabled} value={value} name={name} onChange={onChange}>\n                    {(this.props.firstoption !== false) && (\n                        <option key={0} value={0}>{this.props.firstoption ? this.props.firstoption : \"Select\"}</option>\n                    )}\n                    {items.map(item => (\n                        this.displayoption(item)\n                    ))}\n\n                </Form.Control>\n            </div>\n\n        );\n    }\n}\n\n\nexport default DropDown;\n\n"],"sourceRoot":""}