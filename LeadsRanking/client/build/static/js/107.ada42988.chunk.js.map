{"version":3,"sources":["views/CallBackTracker.jsx","views/Common/AlertBox.jsx","views/Common/ManagerHierarchy.jsx"],"names":["CallBackTracker","props","state","PageTitle","showAssignLeadPopUp","SelectedAgentAssigTo","SelectedRow","hideAssign","ReportTime","SelectedSupervisors","SelectedRows","clearSelected","dtRef","React","createRef","handleShow","bind","columnlist","name","selector","sortable","cell","row","className","href","OpenSalesView","CustomerID","LeadId","ProductId","target","searchable","utc","format","NextCallBackTime","LastCallTime","type","config","root","data","Id","Display","Flag","GetDataDirect","con","getuser","UserID","result","length","this","setState","nextProps","CommonData","isError","e","Date","setTimeout","fetchCallBackData","GetCommonspData","limit","skip","params","ManagerIds","join","current","handleClearRows","option","map","item","push","key","value","UserName","index","element","c","AssignedTo_AgentId","AssignedBy_AgentId","GroupId","flag","JobId","toast","columns","items","showAlert","AlertMsg","AlertVarient","selectedLeads","forEach","show","variant","body","md","tag","onClick","OpenAssignLeadPopUp","defaultSortField","defaultSortAsc","selectableRows","ref","onSelectedRows","onHide","handleClose","Header","closeButton","Title","Body","Control","as","onChange","onSelectedAgent","bindAgentDropdown","Footer","condition","AssignLead","Component","connect","GetCommonData","AlertBox","ManagerHierarchy","nodes","checked","expanded","UserId","RoleId","ManagerId","statename","res","JSON","stringify","replace","parse","forceUpdate","document","getElementById","style","right","checkeditem","indexOf","splice","id","onMouseLeave","onMouseOut","onMouseEnter","onButtonClick","checkModel","showNodeIcon","onCheck","onExpand","showExpandAll"],"mappings":"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","file":"static/js/107.ada42988.chunk.js","sourcesContent":["\r\nimport React from \"react\";\r\nimport {\r\n  GetCommonData, GetCommonspData, GetDataDirect\r\n} from \"../store/actions/CommonAction\";\r\nimport { connect } from \"react-redux\";\r\nimport { OpenSalesView, getUrlParameter, getuser } from '../utility/utility.jsx';\r\nimport DataTable from './Common/DataTableWithFilter';\r\nimport ManagerHierarchy from './Common/ManagerHierarchy';\r\nimport Moment from 'react-moment';\r\nimport { If, Then, Else } from 'react-if';\r\nimport AlertBox from './Common/AlertBox';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n// reactstrap components\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  CardTitle,\r\n  Table,\r\n  Row,\r\n  Col\r\n} from \"reactstrap\";\r\nimport { ButtonGroup, Button, Modal, Form } from 'react-bootstrap';\r\nimport { func } from \"prop-types\";\r\n\r\nclass CallBackTracker extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      PageTitle: \"CallBack Tracker\",\r\n      CallBackTracker: [],\r\n      showAssignLeadPopUp: false,\r\n      SelectedAgentAssigTo: 0,\r\n      SelectedRow: null,\r\n      hideAssign: true,\r\n      ReportTime: null,\r\n      SelectedSupervisors: [],\r\n      SelectedRows: [],\r\n      clearSelected: false\r\n    };\r\n    this.dtRef = React.createRef();\r\n    this.handleShow = this.handleShow.bind(this);\r\n    this.columnlist = [\r\n      {\r\n        name: \"LeadId\",\r\n        selector: \"LeadId\",\r\n        sortable: true,\r\n        cell: row => <a className=\"pointer\" href={OpenSalesView(row.CustomerID, row.LeadId, row.ProductId)} target=\"_blank\">\r\n          {row.LeadId}\r\n        </a>\r\n      },\r\n      {\r\n        name: \"Customer Name\",\r\n        selector: \"CustName\",\r\n        sortable: true,\r\n      },\r\n      {\r\n        name: \"Emp Id\",\r\n        selector: \"EmployeeId\",\r\n        sortable: true,\r\n        searchable: true,\r\n      },\r\n      {\r\n        name: \"Agent Name\",\r\n        selector: \"AgentName\",\r\n        sortable: true,\r\n        searchable: true,\r\n      },\r\n      {\r\n        name: \"Current Callback\",\r\n        selector: \"NextCallBackTime\",\r\n        sortable: true,\r\n        cell: row => <Moment utc={true} format=\"DD/MM/YYYY HH:mm:ss\">{row.NextCallBackTime}</Moment>\r\n      },\r\n      {\r\n        name: \"Lead Status\",\r\n        selector: \"LeadStatus\",\r\n        sortable: true,\r\n      },\r\n      {\r\n        name: \"Last Call Time\",\r\n        selector: \"LastCallTime\",\r\n        sortable: true,\r\n        cell: row => <Moment utc={true} format=\"DD/MM/YYYY HH:mm:ss\">{row.LastCallTime}</Moment>\r\n      },\r\n      // {\r\n      //   name: \"AgentStatus\",\r\n      //   selector: \"AgentStatus\",\r\n      //   sortable: true,\r\n      // },\r\n      {\r\n        name: \"Flag\",\r\n        selector: \"Flag\",\r\n        sortable: true,\r\n        type: \"dropdown\",\r\n        searchable: true,\r\n        config: {\r\n          root: \"Flag\",\r\n          data: [{ Id: 'RED', Display: \"RED\" }, { Id: 'GREY', Display: \"GREY\" }],\r\n        },\r\n        cell: row => <div className={row.Flag}>\r\n          {row.Flag}\r\n        </div>\r\n      }\r\n\r\n    ];\r\n\r\n    GetDataDirect({\r\n      root: \"UserMenu\",\r\n      con: [{ \"UserId\": getuser().UserID }, { \"MenuId\": 263 }],\r\n    }, function (result) {\r\n      if (result && result[0] && result[0].length == 0) {\r\n        this.state.hideAssign = true\r\n      }\r\n      else {\r\n        this.state.hideAssign = false\r\n      }\r\n    }.bind(this))\r\n  }\r\n\r\n  OpenAssignLeadPopUp(row) {\r\n    this.setState({ showAssignLeadPopUp: true });\r\n\r\n  }\r\n\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n\r\n    if (!nextProps.CommonData.isError) {\r\n      this.setState({ CallBackTracker: nextProps.CommonData[\"CallBackTracker\"] });\r\n      if (nextProps.CommonData[\"AssignedToAgent\"]) {\r\n        //this.setState({ showAlert: true, AlertMsg: \"Lead Assigned Successfully.\", AlertVarient: \"success\" });\r\n\r\n      }\r\n      else {\r\n\r\n      }\r\n    }\r\n  }\r\n  handleShow(e) {\r\n\r\n    this.setState({ ReportTime: new Date(), SelectedSupervisors: e.SelectedSupervisors });\r\n    setTimeout(function () {\r\n      this.fetchCallBackData();\r\n    }.bind(this), 500);\r\n\r\n  }\r\n\r\n  handleClose() {\r\n    this.setState({ showAssignLeadPopUp: false })\r\n  }\r\n\r\n  fetchCallBackData() {\r\n    var SelectedSupervisors = this.state.SelectedSupervisors;\r\n    this.props.GetCommonspData({\r\n      limit: 10,\r\n      skip: 0,\r\n      root: \"CallBackTracker\",\r\n      params: [{ ManagerIds: SelectedSupervisors.join() }]\r\n    });\r\n\r\n    if (this.state.SelectedRows.length > 0) {\r\n      this.dtRef.current.handleClearRows();\r\n    }\r\n\r\n  }\r\n\r\n  bindAgentDropdown() {\r\n\r\n    const CallBackTracker = this.state.CallBackTracker;\r\n    let option = [];\r\n    if (CallBackTracker.length > 0) {\r\n      CallBackTracker[1].map(item => (\r\n        option.push(<option key={item.UserID} value={item.UserID}>{item.UserName}</option>)\r\n      ))\r\n    }\r\n    return option;\r\n  }\r\n  onSelectedAgent(e) {\r\n    this.setState({ SelectedAgentAssigTo: e.target.value });\r\n  }\r\n  AssignLead() {\r\n    const { SelectedRows, SelectedAgentAssigTo } = this.state;\r\n\r\n    for (let index = 0; index < SelectedRows.length; index++) {\r\n      const element = SelectedRows[index];\r\n      //toast(\"Lead (\" + element.LeadId + \") assign successfully\", { type: 'success' });\r\n\r\n      this.props.GetCommonspData({\r\n        limit: 10,\r\n        skip: 0,\r\n        root: \"AssignedToAgent\",\r\n        c: \"L\",\r\n        params: [{\r\n          AssignedTo_AgentId: SelectedAgentAssigTo,\r\n          AssignedBy_AgentId: getuser().UserID,\r\n          ProductId: element.ProductId,\r\n          LeadId: element.LeadId,\r\n          GroupId: 0,\r\n          flag: 1,\r\n          JobId: 40\r\n        }]\r\n      }, function (data) {\r\n        toast(\"Lead (\" + element.LeadId + \") assign successfully\", { type: 'success' });\r\n      });\r\n    }\r\n\r\n    this.setState({ showAssignLeadPopUp: false });\r\n\r\n    setTimeout(function () {\r\n      this.fetchCallBackData();\r\n    }.bind(this), 300);\r\n  }\r\n  onSelectedRows(SelectedRows) {\r\n    this.setState({ SelectedRows: SelectedRows });\r\n  }\r\n  render() {\r\n    const columns = this.columnlist;\r\n    const { items, PageTitle, CallBackTracker, showAssignLeadPopUp, showAlert, AlertMsg, AlertVarient, ReportTime, SelectedRows } = this.state;\r\n\r\n    let selectedLeads = [];\r\n    SelectedRows.forEach(element => {\r\n      selectedLeads.push(element.LeadId);\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <div className=\"content\">\r\n          <AlertBox show={showAlert} variant={AlertVarient} body={AlertMsg}></AlertBox>\r\n          <ToastContainer />\r\n          <Row>\r\n            <Col md=\"12\">\r\n              <Card>\r\n                <CardHeader>\r\n                  <Row>\r\n                    <Col md={6}>\r\n                      <CardTitle tag=\"h4\">{PageTitle}</CardTitle>\r\n                    </Col>\r\n                    <Col md={4}>\r\n                      <CardTitle tag=\"h5\">\r\n                        {ReportTime ? <Moment format=\"DD/MM/YYYY HH:mm:ss\">{ReportTime}</Moment> : null}\r\n                      </CardTitle>\r\n\r\n                    </Col>\r\n                    <Col md={2}>\r\n                      <ManagerHierarchy\r\n                        handleShow={this.handleShow} value={/UserID/g}\r\n                      >\r\n                      </ManagerHierarchy>\r\n                      {this.state.hideAssign ? null : <button className=\"btn btn-info btn-sm\" onClick={() => this.OpenAssignLeadPopUp()} >Assign Lead</button>}\r\n                    </Col>\r\n                  </Row>\r\n\r\n                </CardHeader>\r\n                <CardBody>\r\n                  <DataTable\r\n                    columns={columns}\r\n                    data={(CallBackTracker && CallBackTracker.length > 0) ? CallBackTracker[0] : []}\r\n                    defaultSortField=\"Flag\"\r\n                    defaultSortAsc={false}\r\n                    selectableRows={true}\r\n                    ref={this.dtRef}\r\n                    onSelectedRows={this.onSelectedRows.bind(this)}\r\n                  />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n\r\n          <Modal show={showAssignLeadPopUp} onHide={this.handleClose.bind(this)} >\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Assign Leads</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n              <Row>\r\n                <Col>\r\n                  LeadId : {selectedLeads.join()}\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <Form.Control as=\"select\" name=\"products\" onChange={this.onSelectedAgent.bind(this)} >\r\n                    <option key={0} value={0}>Select</option>\r\n                    {\r\n                      this.bindAgentDropdown()\r\n                    }\r\n                  </Form.Control>\r\n                </Col>\r\n              </Row>\r\n\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n\r\n              <If condition={this.state.SelectedAgentAssigTo != 0}>\r\n                <Then>\r\n                  <Button variant=\"primary\" onClick={this.AssignLead.bind(this)}>Assign Lead</Button>\r\n                </Then>\r\n              </If>\r\n              <Button variant=\"secondary\" onClick={this.handleClose.bind(this)}>\r\n                Close\r\n                </Button>\r\n            </Modal.Footer>\r\n          </Modal>\r\n\r\n\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    CommonData: state.CommonData\r\n  };\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {\r\n    GetCommonData,\r\n    GetCommonspData\r\n  }\r\n)(CallBackTracker);","\r\nimport React from \"react\";\r\nimport { Alert } from 'react-bootstrap';\r\n\r\n\r\nclass AlertBox extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            show: this.props.show\r\n        }\r\n    }\r\n    componentDidUpdate() {\r\n\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        this.setState({ show: nextProps.show });\r\n        if (nextProps.show) {\r\n            setTimeout(function () {\r\n                this.setState({ show: false });\r\n            }.bind(this), 5000);\r\n        }\r\n    }\r\n    render() {\r\n        if (this.state.show) {\r\n            return (\r\n                <Alert variant={this.props.variant}>\r\n                    {this.props.body}\r\n                </Alert>\r\n            );\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nexport default AlertBox;\r\n","\r\nimport React, { Suspense } from 'react';\r\n\r\nimport {\r\n    GetCommonData, GetCommonspData, GetDataDirect\r\n} from \"../../store/actions/CommonAction\";\r\nimport { getUrlParameter, getuser } from '../../utility/utility.jsx';\r\n\r\n\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport 'react-checkbox-tree/lib/react-checkbox-tree.css';\r\nimport CheckboxTree from 'react-checkbox-tree';\r\n\r\n\r\nclass ManagerHierarchy extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: [],\r\n            checked: [],\r\n            expanded: [],\r\n        }\r\n        //this.onExpand = this.onExpand.bind(this);\r\n    }\r\n    componentDidMount() {\r\n\r\n        let UserId = getuser().RoleId == 2 ? 75 : getuser().UserID;\r\n\r\n        GetDataDirect({\r\n            root: \"Hierarchy\",\r\n            ManagerId: UserId,\r\n            statename: \"Hierarchy-\" + UserId,\r\n            value: this.props.value,\r\n            state: true\r\n        }, function (result) {\r\n\r\n            let str = JSON.stringify(result);\r\n            var res = str.replace(/UserName/g, \"label\");\r\n            res = res.replace(this.props.value, \"value\");\r\n\r\n            this.setState({ nodes: JSON.parse(res) });\r\n        }.bind(this));\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n\r\n    }\r\n\r\n\r\n    onButtonClick() {\r\n        this.props.handleShow({\r\n            SelectedSupervisors: this.state.checked\r\n        });\r\n        this.forceUpdate();\r\n    }\r\n    onMouseEnter(e) {\r\n        document.getElementById(\"floating\").style.right = 0\r\n        document.getElementById(\"handle\").style.right = \"395px\"\r\n        //e.target.style.right = 0;\r\n    }\r\n    onMouseOut(e) {\r\n        setTimeout(function () {\r\n            document.getElementById(\"floating\").style.right = \"-400px\"\r\n            document.getElementById(\"handle\").style.right = \"-15px\"\r\n        }, 700);\r\n\r\n        //e.target.style.right = \"-350px\";\r\n    }\r\n    RemoveChecked(checkeditem) {\r\n        const { checked } = this.state;\r\n        let index = checked.indexOf(checkeditem);\r\n        if (index > -1) {\r\n            checked.splice(index, 1);\r\n        }\r\n        this.setState(checked);\r\n    }\r\n    onClick() {\r\n\r\n    }\r\n    render() {\r\n        const { nodes, checked } = this.state;\r\n        if (nodes.length == 0) {\r\n            return null;\r\n        }\r\n        return (\r\n\r\n\r\n            <div id=\"floating\" className=\"floating\" onMouseLeave={this.onMouseOut}>\r\n\r\n                <Row >\r\n                    <Col md=\"8\"><div id=\"handle\" className=\"handle\" onClick={this.onMouseEnter}>Filter</div></Col>\r\n                    <Col md=\"4\"><input type=\"button\" className=\"btn btn-primary\" onClick={this.onButtonClick.bind(this)} value=\"Show\" /></Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                    <Col>\r\n\r\n                        <div className=\"managers\">\r\n                            <CheckboxTree\r\n                                nodes={nodes}\r\n                                checked={this.state.checked}\r\n                                expanded={this.state.expanded}\r\n                                checkModel=\"all\"\r\n                                name=\"UserName\"\r\n                                showNodeIcon={false}\r\n                                onCheck={checked => this.setState({ checked })}\r\n                                onExpand={expanded => this.setState({ expanded })}\r\n                                showExpandAll={true}\r\n                            />\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n\r\n\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default ManagerHierarchy;\r\n"],"sourceRoot":""}