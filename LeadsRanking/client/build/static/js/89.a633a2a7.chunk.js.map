{"version":3,"sources":["views/Chat/ChatHistory.jsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"names":["columnlist","name","label","selector","PrintExcelColumn","React","lazy","connect","state","CommonData","GetCommonData","props","useState","items","setItems","root","roomserachvalue","setRoomserachvalue","leadserachvalue","setLeadserachvalue","moment","format","dateserachvalue","setDateserachvalue","pageTitle","useEffect","console","log","isError","isTableEmpty","length","className","md","style","tag","Control","type","onChange","e","target","value","placeholder","Date","dateFormat","_isAMomentObject","variant","onClick","condition","push","RID","LeadId","LastMessage","limit","skip","cols","GetJsonToArray","c","con","sort","ts","data","columnNames","fileName","getTime","toString","columns","defaultSortFieldId","pagination","striped","onRowClicked","row","url","ProductName","window","open","highlightOnHover","customStyles","rows","cursor","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","err","unsupportedIterableToArray","TypeError"],"mappings":"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","file":"static/js/89.a633a2a7.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport { GetCommonData } from \"../../store/actions/CommonAction\";\nimport { connect } from \"react-redux\";\nimport DataTable from \"react-data-table-component\";\nimport moment from \"moment\";\nimport * as Datetime from \"react-datetime\";\nimport \"react-datetime/css/react-datetime.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { Card, CardHeader, CardBody, CardTitle, Row, Col } from \"reactstrap\";\nimport { GetJsonToArray } from \"../../utility/utility.jsx\";\n\n\nconst columnlist = [\n  {\n    name: \"LeadId\",\n    label: \"LeadId\",\n    selector: \"LeadId\",\n  },\n  {\n    label: \"RoomID\",\n    name: \"RoomID\",\n    selector: \"RID\",\n  },\n  {\n    name: \"ProductName\",\n    label: \"ProductName\",\n    selector: \"ProductName\",\n  },\n  {\n    name: \"LastMessage\",\n    label: \"LastMessage\",\n    selector: \"LastMessage\",\n  },\n];\nconst PrintExcelColumn = React.lazy(() => import(\"../Common/PrintExcelColumn\"));\nconst ChatHistory = (props) => {\n  const [items, setItems] = useState([]);\n  const [root] = useState(\"Rooms\");\n  const [roomserachvalue, setRoomserachvalue] = useState(\"\");\n  const [leadserachvalue, setLeadserachvalue] = useState(\"\");\n  const [dateserachvalue, setDateserachvalue] = useState(\n    moment().format(\"YYYY-MM-DD\")\n  );\n  const [bool,setBool]=useState(false)\n  const [pageTitle] = useState(\"ChatHistory\");\n  const getChatHistory = () => {\n    let condition = [];\n    if (roomserachvalue != \"\") {\n      condition.push({ RID: roomserachvalue });\n    }\n    if (leadserachvalue != \"\") {\n      condition.push({ LeadId: leadserachvalue });\n    }\n    if (dateserachvalue != \"\") {\n      condition.push({ LastMessage: dateserachvalue });\n    }\n\n    if (\n      roomserachvalue != \"\" ||\n      leadserachvalue != \"\" ||\n      dateserachvalue != \"\"\n    ) \n    {\n      props.GetCommonData({\n        limit: 10,\n        skip: 0,\n        root: root,\n        cols: GetJsonToArray(columnlist, \"selector\"),\n        c: \"L\",\n        con: condition,\n        sort: { ts: -1 },\n      });\n    }\n   \n  };\n\n  \n  useEffect(() => {\n    console.log(\"props.CommonData::\",props.CommonData)\n    if (!props.CommonData.isError) {\n      setItems(props.CommonData[root]);\n    }\n  }, [props]);\n \n  const searchRoom = (e) => {\n    setRoomserachvalue(e.target.value);\n  };\n  const searchLead = (e) => {\n    setLeadserachvalue(e.target.value);\n  };\n  const CallDateChange = (moment) => {\n    if (moment._isAMomentObject) {\n      setDateserachvalue(moment.format(\"YYYY-MM-DD\"));\n    } else {\n      setDateserachvalue(\"\");\n    }\n  };\n\n  const handler = (row, e) => {\n    const url = `https://matrixdashboard.policybazaar.com/client/chatroomhistory?rid=${row.RID}&dep=${row.ProductName}`;\n    window.open(url, \"_blank\");\n  };\n\n  const customStyles = {\n    rows: {\n      style: {\n        cursor: \"pointer\",\n      },\n    },\n  };\n  const isTableEmpty = items && items.length ? true : false\n \n  return (\n    <>\n       <div className=\"content\">\n      <Row>\n        <Col md=\"12\">\n          <Card>\n            <CardHeader>\n              <Row style={{\"marginLeft\":\"30px\"}} > \n                <Col md={11}>\n                  <CardTitle tag=\"h4\">{pageTitle}</CardTitle>\n                </Col>\n                \n                <Col md={3}>\n                  <Form.Control\n                    type=\"text\"\n                    onChange={searchRoom}\n                    placeholder={\"Enter RoomId\"}\n                  />\n                </Col>\n                <Col md={3}>\n                  <Form.Control\n                    type=\"text\"\n                    onChange={searchLead}\n                    placeholder={\"Enter LeadId\"}\n                  />\n                </Col>\n\n                <Col md={3}>\n                  <Datetime\n                    value={new Date()}\n                    dateFormat=\"YYYY-MM-DD\"\n                    value={dateserachvalue}\n                    onChange={CallDateChange}\n                    utc={true}\n                    timeFormat={false}\n                  />\n                </Col>\n                <Col md={1}>\n                  <Button variant=\"primary\" onClick={getChatHistory}>\n                    Fetch\n                  </Button>\n                </Col>\n                <Col md={1}>\n                 { isTableEmpty? <PrintExcelColumn\n                data={items}\n                columnNames={columnlist}\n                fileName={new Date().getTime().toString()}\n              />:''}\n                </Col>\n             \n            \n              </Row>\n            </CardHeader>\n            <CardBody>\n              \n             \n              <DataTable\n                columns={columnlist}\n                data={items}\n                defaultSortFieldId={1}\n                pagination\n                striped={true}\n                onRowClicked={handler}\n                highlightOnHover\n                customStyles={customStyles}\n              />\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n      </div>\n    </>\n  );\n};\nfunction mapStateToProps(state) {\n  return {\n    CommonData: state.CommonData,\n  };\n}\nexport default connect(mapStateToProps, {\n  GetCommonData,\n})(ChatHistory);","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}