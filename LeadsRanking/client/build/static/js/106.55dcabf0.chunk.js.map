{"version":3,"sources":["views/AgentLeadsNotCalled.jsx","views/Common/AlertBox.jsx","views/Common/ManagerHierarchy.jsx"],"names":["AgentLeadsNotCalled","props","handleChange","e","_isAMomentObject","setState","ReportDate","format","this","fetchCallBackData","state","PageTitle","ProductId","moment","subtract","ReportTime","SelectedSupervisors","LastAssigned","productchange","bind","handleShow","columnlist","cell","row","LastAssignDate","utc","width","PolicyExpireDate","LastCallDate","LastCallBackDate","setTimeout","nextProps","CommonData","isError","Date","user","getuser","indexOf","RoleId","push","UserID","GetCommonspData","root","params","ManagerIds","join","target","value","columns","items","showAlert","AlertMsg","AlertVarient","console","log","className","show","variant","body","md","tag","data","length","React","Component","connect","GetCommonData","AlertBox","ManagerHierarchy","nodes","checked","expanded","UserId","GetDataDirect","ManagerId","statename","result","res","JSON","stringify","replace","parse","forceUpdate","document","getElementById","style","right","checkeditem","index","splice","id","onMouseLeave","onMouseOut","onClick","onMouseEnter","type","onButtonClick","checkModel","name","showNodeIcon","onCheck","onExpand","showExpandAll"],"mappings":"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","file":"static/js/106.55dcabf0.chunk.js","sourcesContent":["\r\nimport React from \"react\";\r\nimport {\r\n  GetCommonData, GetCommonspData, GetDataDirect\r\n} from \"../store/actions/CommonAction\";\r\nimport { connect } from \"react-redux\";\r\nimport { OpenSalesView, getUrlParameter, getuser } from '../utility/utility.jsx';\r\nimport DataTable from './Common/DataTableWithFilter';\r\nimport DropDown from './Common/DropDownList';\r\nimport ManagerHierarchy from './Common/ManagerHierarchy';\r\nimport Moment from 'react-moment';\r\nimport moment from 'moment';\r\nimport { If, Then, Else } from 'react-if';\r\nimport AlertBox from './Common/AlertBox';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport * as Datetime from 'react-datetime';\r\nimport 'react-datetime/css/react-datetime.css'\r\n\r\n\r\n\r\n// reactstrap components\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  CardTitle,\r\n  Table,\r\n  Row,\r\n  Col\r\n} from \"reactstrap\";\r\nimport { ButtonGroup, Button, Modal, Form } from 'react-bootstrap';\r\nimport { func } from \"prop-types\";\r\n\r\nclass AgentLeadsNotCalled extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      PageTitle: \"AgentLeadsNotCalled\",\r\n      AgentLeadsNotCalled: [],\r\n      ProductId: 0,\r\n      ReportDate: moment().subtract(1, 'days').format(\"YYYY-MM-DD\"),\r\n      ReportTime: null,\r\n      SelectedSupervisors: [],\r\n      LastAssigned: 3\r\n\r\n    };\r\n    this.productchange = this.productchange.bind(this);\r\n    this.handleShow = this.handleShow.bind(this);\r\n    this.columnlist = [\r\n      {\r\n        \"name\": \"EmployeeId\",\r\n        \"selector\": \"EmployeeId\"\r\n      },\r\n      {\r\n        \"name\": \"UserName\",\r\n        \"selector\": \"UserName\"\r\n      },\r\n      {\r\n        \"name\": \"LeadID\",\r\n        \"selector\": \"LeadID\"\r\n      },\r\n      {\r\n        \"name\": \"LastAssignDate\",\r\n        cell: row => <div>{row.LastAssignDate ? <Moment format=\"YYYY-MM-DD HH:mm:ss\" utc={true}>{row.LastAssignDate}</Moment> : \"N.A\"}</div>,\r\n        width: \"150px\"\r\n      },\r\n      {\r\n        \"name\": \"StatusName\",\r\n        \"selector\": \"StatusName\"\r\n      },\r\n      {\r\n        \"name\": \"Total talktime (mins)\",\r\n        \"selector\": \"TalkTimeInMin\"\r\n      }, \r\n      {\r\n        \"name\": \"Lead createdOn\",\r\n        \"selector\": \"LeadCreationDate\"\r\n      },\r\n      {\r\n        \"name\": \"PolicyExpireDate\",\r\n        cell: row => <div>{row.PolicyExpireDate ? <Moment format=\"YYYY-MM-DD HH:mm:ss\" utc={true}>{row.PolicyExpireDate}</Moment> : \"N.A\"}</div>,\r\n        width: \"150px\"\r\n      },\r\n      {\r\n        \"name\": \"LastCallDate\",\r\n        cell: row => <div>{row.LastCallDate ? <Moment format=\"YYYY-MM-DD HH:mm:ss\" utc={true}>{row.LastCallDate}</Moment> : \"N.A\"}</div>,\r\n        width: \"150px\"\r\n      },\r\n      {\r\n        \"name\": \"LastCallBackDate\",\r\n        cell: row => <div>{row.LastCallBackDate ? <Moment format=\"YYYY-MM-DD HH:mm:ss\" utc={true}>{row.LastCallBackDate}</Moment> : \"N.A\"}</div>,\r\n        width: \"150px\"\r\n      },\r\n\r\n      {\r\n        \"name\": \"NotCalledDays\",\r\n        \"selector\": \"NotCalledDays\"\r\n      }\r\n    ]\r\n  }\r\n\r\n\r\n  componentWillMount() {\r\n    setTimeout(function () {\r\n      this.fetchCallBackData();\r\n    }.bind(this), 500);\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    debugger;\r\n    if (!nextProps.CommonData.isError) {\r\n      this.setState({ AgentLeadsNotCalled: nextProps.CommonData[\"AgentLeadsNotCalled\"] });\r\n    }\r\n  }\r\n  handleShow(e) {\r\n\r\n    this.setState({ ReportTime: new Date(), SelectedSupervisors: e.SelectedSupervisors });\r\n    setTimeout(function () {\r\n      this.fetchCallBackData();\r\n    }.bind(this), 500);\r\n\r\n  }\r\n\r\n\r\n\r\n  fetchCallBackData() {\r\n    var SelectedSupervisors = this.state.SelectedSupervisors;\r\n    const user = getuser();\r\n    let LastAssigned = 3;\r\n    if ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].indexOf(user.RoleId) > -1) {\r\n      LastAssigned = 5;\r\n    }\r\n    this.setState({ LastAssigned: LastAssigned });\r\n    \r\n\r\n    if (user.RoleId == 12) {\r\n      SelectedSupervisors.push(user.UserID);\r\n    }\r\n\r\n    this.props.GetCommonspData({\r\n      root: \"AgentLeadsNotCalled\",\r\n      params: [{ ManagerIds: SelectedSupervisors.join(), LastAssigned: LastAssigned }],\r\n    });\r\n\r\n    \r\n\r\n  }\r\n  productchange(e, props) {\r\n    this.setState({\r\n      ProductId: e.target.value\r\n    }, function () {\r\n      this.fetchCallBackData();\r\n    });\r\n\r\n\r\n  }\r\n  handleChange = (e, props) => {\r\n\r\n    if (e._isAMomentObject) {\r\n      this.setState({ ReportDate: e.format(\"YYYY-MM-DD\") }, function () {\r\n        this.fetchCallBackData();\r\n      });\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n  render() {\r\n    const columns = this.columnlist;\r\n    const { items, PageTitle, AgentLeadsNotCalled, showAlert, AlertMsg, AlertVarient, LastAssigned } = this.state;\r\n    console.log(this.state);\r\n    let selectedLeads = [];\r\n\r\n\r\n    return (\r\n      <>\r\n        <div className=\"content\">\r\n          <AlertBox show={showAlert} variant={AlertVarient} body={AlertMsg}></AlertBox>\r\n          <ToastContainer />\r\n          <Row>\r\n            <Col md=\"12\">\r\n              <Card>\r\n                <CardHeader>\r\n                  <Row>\r\n                    <Col md={4}>\r\n                      <CardTitle tag=\"h4\">{LastAssigned} Days Not Called Report</CardTitle>\r\n                    </Col>\r\n                    <Col md={3}>\r\n                    </Col>\r\n                    <Col md={3}>\r\n\r\n                    </Col>\r\n                    <Col md={2}>\r\n                      <ManagerHierarchy\r\n                        handleShow={this.handleShow} value={/UserID/g}\r\n                      >\r\n                      </ManagerHierarchy>\r\n\r\n                    </Col>\r\n                  </Row>\r\n\r\n                </CardHeader>\r\n                <CardBody>\r\n                  <DataTable\r\n                    columns={columns}\r\n                    data={(AgentLeadsNotCalled && AgentLeadsNotCalled.length > 0) ? AgentLeadsNotCalled[0] : []}\r\n\r\n\r\n                  />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n\r\n\r\n\r\n\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    CommonData: state.CommonData\r\n  };\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {\r\n    GetCommonData,\r\n    GetCommonspData\r\n  }\r\n)(AgentLeadsNotCalled);","\r\nimport React from \"react\";\r\nimport { Alert } from 'react-bootstrap';\r\n\r\n\r\nclass AlertBox extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            show: this.props.show\r\n        }\r\n    }\r\n    componentDidUpdate() {\r\n\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        this.setState({ show: nextProps.show });\r\n        if (nextProps.show) {\r\n            setTimeout(function () {\r\n                this.setState({ show: false });\r\n            }.bind(this), 5000);\r\n        }\r\n    }\r\n    render() {\r\n        if (this.state.show) {\r\n            return (\r\n                <Alert variant={this.props.variant}>\r\n                    {this.props.body}\r\n                </Alert>\r\n            );\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nexport default AlertBox;\r\n","\r\nimport React, { Suspense } from 'react';\r\n\r\nimport {\r\n    GetCommonData, GetCommonspData, GetDataDirect\r\n} from \"../../store/actions/CommonAction\";\r\nimport { getUrlParameter, getuser } from '../../utility/utility.jsx';\r\n\r\n\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport 'react-checkbox-tree/lib/react-checkbox-tree.css';\r\nimport CheckboxTree from 'react-checkbox-tree';\r\n\r\n\r\nclass ManagerHierarchy extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: [],\r\n            checked: [],\r\n            expanded: [],\r\n        }\r\n        //this.onExpand = this.onExpand.bind(this);\r\n    }\r\n    componentDidMount() {\r\n\r\n        let UserId = getuser().RoleId == 2 ? 75 : getuser().UserID;\r\n\r\n        GetDataDirect({\r\n            root: \"Hierarchy\",\r\n            ManagerId: UserId,\r\n            statename: \"Hierarchy-\" + UserId,\r\n            value: this.props.value,\r\n            state: true\r\n        }, function (result) {\r\n\r\n            let str = JSON.stringify(result);\r\n            var res = str.replace(/UserName/g, \"label\");\r\n            res = res.replace(this.props.value, \"value\");\r\n\r\n            this.setState({ nodes: JSON.parse(res) });\r\n        }.bind(this));\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n\r\n    }\r\n\r\n\r\n    onButtonClick() {\r\n        this.props.handleShow({\r\n            SelectedSupervisors: this.state.checked\r\n        });\r\n        this.forceUpdate();\r\n    }\r\n    onMouseEnter(e) {\r\n        document.getElementById(\"floating\").style.right = 0\r\n        document.getElementById(\"handle\").style.right = \"395px\"\r\n        //e.target.style.right = 0;\r\n    }\r\n    onMouseOut(e) {\r\n        setTimeout(function () {\r\n            document.getElementById(\"floating\").style.right = \"-400px\"\r\n            document.getElementById(\"handle\").style.right = \"-15px\"\r\n        }, 700);\r\n\r\n        //e.target.style.right = \"-350px\";\r\n    }\r\n    RemoveChecked(checkeditem) {\r\n        const { checked } = this.state;\r\n        let index = checked.indexOf(checkeditem);\r\n        if (index > -1) {\r\n            checked.splice(index, 1);\r\n        }\r\n        this.setState(checked);\r\n    }\r\n    onClick() {\r\n\r\n    }\r\n    render() {\r\n        const { nodes, checked } = this.state;\r\n        if (nodes.length == 0) {\r\n            return null;\r\n        }\r\n        return (\r\n\r\n\r\n            <div id=\"floating\" className=\"floating\" onMouseLeave={this.onMouseOut}>\r\n\r\n                <Row >\r\n                    <Col md=\"8\"><div id=\"handle\" className=\"handle\" onClick={this.onMouseEnter}>Filter</div></Col>\r\n                    <Col md=\"4\"><input type=\"button\" className=\"btn btn-primary\" onClick={this.onButtonClick.bind(this)} value=\"Show\" /></Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                    <Col>\r\n\r\n                        <div className=\"managers\">\r\n                            <CheckboxTree\r\n                                nodes={nodes}\r\n                                checked={this.state.checked}\r\n                                expanded={this.state.expanded}\r\n                                checkModel=\"all\"\r\n                                name=\"UserName\"\r\n                                showNodeIcon={false}\r\n                                onCheck={checked => this.setState({ checked })}\r\n                                onExpand={expanded => this.setState({ expanded })}\r\n                                showExpandAll={true}\r\n                            />\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n\r\n\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default ManagerHierarchy;\r\n"],"sourceRoot":""}