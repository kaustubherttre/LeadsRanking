{"version":3,"sources":["views/SelectList/CourseList.jsx","views/SelectList/QuizList.jsx","views/Common/DateRange.jsx","views/MoodleComponent/MoodleManagerHierarchy.jsx","views/Common/Loading.jsx","views/MoodleReport.jsx","views/Common/AlertBox.jsx","store/actions/CommonMysqlAction.jsx","views/Common/DropDownListMysql.jsx","views/Common/DropDown.jsx","views/SelectList/ProductList.jsx"],"names":["CourseList","props","state","CourseData","selecteddata","selectedValue","label","value","onSelect","bind","nextProps","ProductId","this","StartDate","EndDate","fetchCourseData","setState","GetMoodleCourse","results","data","AllDates","enumerateDaysBetweenDates","resultdata","filter","val","_","contains","date","startDate","endDate","dates","push","currDate","moment","startOf","lastDate","add","diff","format","selectedList","selectedItem","console","log","newselectedList","task","onSelectCourse","visible","Form","Group","controlId","options","disabled","onChange","selectAllLabel","className","React","Component","QuizList","QuizData","courseId","fetchQuizData","GetMoodleQuiz","onSelectQuiz","DateRange","handleStartDateChange","e","_isAMomentObject","onStartDate","startdate","enddate","handleEndDateChange","onEndDate","validation","currentDate","isBefore","validationEndDate","subtract","Col","md","Label","Date","dateFormat","MoodleManagerHierarchy","handleQuizSelect","QuizValue","QuizSelectList","handleCourseSelect","CourseValue","CourseSelect","handleStartDate","StartDateValue","handleEndDate","EndDateValue","nodes","checked","expanded","ReportType","ExportQuizData","reporttypechange","ReportTypeList","config","root","Id","Display","productchange","onSummaryClick","dateRangeRef","createRef","UserId","getuser","RoleId","UserID","GetDataDirect","ManagerId","statename","result","res","JSON","stringify","replace","parse","handleSelectManager","SelectedSupervisors","forceUpdate","document","getElementById","style","right","setTimeout","checkeditem","index","indexOf","splice","target","onProductId","length","join","SelectedUsers","toast","type","onExportQuiz","onExportCourse","dtrange","current","getSelectedDateRange","onExportLMS","onSummaryQuiz","onSummaryCourse","onSummaryLMS","id","onMouseLeave","onMouseOut","Row","onClick","onMouseEnter","onExportClick","ProductList","DropDown","firstoption","items","ref","checkModel","name","showNodeIcon","onCheck","onExpand","showExpandAll","Loading","show","MoodleReport","handleProductId","handleSummaryQuiz","QuizMultiList","showLoading","obj","i","LoadQuizData","DefaultSelectedQuiz","handleSummaryCourse","CourseMultiList","LoadCourseData","CourseSelectList","DefaultSelectedCourse","handleSummaryLMS","DaysList","enumerateWeeksBetweenDates","DefaultSelectedDaysList","str","substr","DropDownStartDate","DropDownEndDate","LoadLMSData","handleExportQuiz","QuizColumns","quiz","quizid","map","toString","json","GetExportQuiz","ExportQuizList","renderExportQuizData","handleExportLMS","LoadLMSExportData","handleExportCourse","LoadCourseExportData","GetSummaryCourse","renderExportCourseData","PageTitle","selector","searchable","sortable","width","LMSSummaryColumns","AllManagerData","ReportTime","pluck","courseid","p","findById","ExportData","that","Object","keys","forEach","key","AgentData","managerId","Array","isArray","tlName","tlId","TLdata","AMdata","MGRdata","AMid","MGRid","EmployeeId","toUpperCase","UserName","userName","TL_Name","AM_Name","undefined","Manager_Name","Team_Name","userGroupName","error","item","productId","GetSummaryQuiz","SummaryQuizData","CalcSummaryQuizData","userQuizSummary","empid","TLId","TLUserName","pass","percentage","resp","respGrandTotal","TLData","groupBy","countBy","fail","DontAppear","Appear","true","sum","reduce","s","f","Reportees","Pass","Fail","TotalAgents","Average","toFixed","AverageScoreAttendes","GrandTotalSumPercentage","memoizer","parseFloat","AvgScoreAttended","QuizSummaryData","GrandTotalData","CourseSummaryData","LMSSummaryData","ExportCourseData","ExportLMSData","SummaryCourseData","renderSummaryCourseData","userCourseSummary","attendance","Complete","Pending","false","SummaryLMSData","userLMSSummary","assign","element","list","col","GrandTotalColumns","GetSummaryLMS","renderSummaryLMSData","TLid","Quiz","userQuiz","quizId","BindDefaultExportData","toLowerCase","ExportLMSColumns","BindDefaultExportColumns","renderExportLMSData","AllCourse","Course","j","ExportCourseColumns","Card","CardHeader","CardTitle","tag","quizchange","CardBody","renderQuizGrandTotalData","columns","QuizSummaryColumns","dayslistchange","renderLMSGrandTotalData","coursechange","renderCourseGrandTotalData","CourseSummaryColumns","ExportLMSdayslistchange","tr","Table","responsive","th","moreinfolist","showAlert","AlertMsg","AlertVarient","MoreInfoData","renderQuizSummary","renderCourseSummary","renderLMSSummary","renderQuizExport","renderLMSExport","renderCourseExport","connect","CommonData","GetCommonData","GetCommonspData","GetMySqlData","AlertBox","variant","body","GetCommonData_fetched","Todos","dataToSend","localStorage","setItem","constants","GET_COMMON_SUCCESS","payload","GetCommonData_fetch_error","GET_COMMON_FAIL","cb","dispatch","getState","getItem","axios","get","api","base_url","params","then","catch","InsertData","post","INSERT_COMMON_SUCCESS","INSERT_COMMON_FAIL","InsertData_fetch_error","UpdateData","UPDATE_COMMON_SUCCESS","UPDATE_COMMON_FAIL","UpdateData_fetch_error","DropDownListMysql","CallApi","isError","Idfield","Displayfield","limit","skip","cols","con","Control","as","displayoption"],"mappings":"2WA2HeA,E,kDAvGX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,WAAY,GACZC,aAAc,GACdC,cAAe,CAAC,CAAEC,MAAO,gBAAiBC,MAAO,OAIrD,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBATD,E,qDAanB,c,uCAEA,SAA0BC,IAEjBA,EAAUC,WAAaD,EAAUC,WAAaC,KAAKX,MAAMU,WAAeD,EAAUG,WAAaD,KAAKX,MAAMY,WAAeH,EAAUI,SAAWF,KAAKX,MAAMa,WAC1JF,KAAKG,gBAAgBL,EAAUC,UAAWD,EAAUG,UAAWH,EAAUI,SACzEF,KAAKI,SAAS,CAAEX,cAAe,CAAC,CAAEC,MAAO,gBAAiBC,MAAO,W,6BAIzE,SAAgBI,EAAWE,EAAWC,GAClCG,YAAgBN,EAAW,SAAUO,GACjC,IAAIC,EAAOD,EAAQC,KAAKA,KACpBC,EAAWR,KAAKS,0BAA0BR,EAAWC,GACnDQ,EAAaH,EAAKI,QAAO,SAAAC,GAAG,OAAIC,IAAEC,SAAUN,EAAUI,EAAIG,SAChEf,KAAKI,SAAS,CAAEb,WAAYmB,KAC9Bb,KAAKG,S,uCAGX,SAA0BgB,EAAWC,GAEjC,IAAIC,EAAQ,GACZA,EAAMC,KAAKH,GAIX,IAFA,IAAII,EAAWC,IAAOL,GAAWM,QAAQ,OACrCC,EAAWF,IAAOJ,GAASK,QAAQ,OAChCF,EAASI,IAAI,EAAG,QAAQC,KAAKF,GAAY,GAC5CL,EAAMC,KAAKC,EAASM,OAAO,eAK/B,OAFAR,EAAMC,KAAKF,GAEJC,I,sBAIX,SAASS,EAAcC,GAEnBC,QAAQC,IAAIH,GACZ,IAAMI,EAAkBJ,EAAahB,QAAO,SAAAqB,GAAI,MAAmB,kBAAfA,EAAKtC,SACzDM,KAAKI,SAAS,CAAEX,cAAesC,IAC/B/B,KAAKX,MAAM4C,eAAeF,GAC1BF,QAAQC,IAAI9B,KAAKX,S,oBAYrB,WAGI,OAAe,GAFGW,KAAKX,MAAjB6C,QAGK,KAIP,6BAEI,kBAACC,EAAA,EAAKC,MAAN,CAAYC,UAAU,mBASlB,kBAAC,IAAD,CACIC,QAAStC,KAAKV,MAAMC,WACpBI,MAAOK,KAAKX,MAAMkD,SAAW,GAAKvC,KAAKV,MAAMG,cAC7C+C,SAAUxC,KAAKJ,SAEf2C,SAAUvC,KAAKX,MAAMkD,SACrBE,eAAgB,yBAChBC,UAAW1C,KAAKX,MAAMkD,SAAW,qBAAuB,qB,GA9FvDI,IAAMC,WCkFhBC,E,kDAjFX,WAAYxD,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTwD,SAAU,GACVrD,cAAe,CAAC,CAAEC,MAAO,cAAeC,MAAO,IAAKoD,SAAU,OAElE,EAAKnD,SAAW,EAAKA,SAASC,KAAd,gBAND,E,qDAQnB,c,uCAEA,SAA0BC,IACjBA,EAAUC,WAAaD,EAAUC,WAAaC,KAAKX,MAAMU,WAAeD,EAAUG,WAAaD,KAAKX,MAAMY,WAAeH,EAAUI,SAAWF,KAAKX,MAAMa,WAC1JF,KAAKgD,cAAclD,EAAUC,UAAWD,EAAUG,UAAWH,EAAUI,SACvEF,KAAKI,SAAS,CAAEX,cAAe,CAAC,CAAEC,MAAO,cAAeC,MAAO,IAAKoD,SAAU,W,2BAItF,SAAchD,EAAWE,EAAWC,GAChC+C,YAAclD,EAAWE,EAAWC,EAAS,SAAUI,GACnD,IAAIC,EAAOD,EAAQC,KAAKA,KACpBC,EAAWR,KAAKS,0BAA0BR,EAAWC,GACnDQ,EAAaH,EAAKI,QAAO,SAAAC,GAAG,OAAIC,IAAEC,SAAUN,EAAUI,EAAIG,SAChEf,KAAKI,SAAS,CAAE0C,SAAUpC,KAC5Bb,KAAKG,S,uCAIX,SAA0BgB,EAAWC,GAEjC,IAAIC,EAAQ,GACZA,EAAMC,KAAKH,GAIX,IAFA,IAAII,EAAWC,IAAOL,GAAWM,QAAQ,OACrCC,EAAWF,IAAOJ,GAASK,QAAQ,OAChCF,EAASI,IAAI,EAAG,QAAQC,KAAKF,GAAY,GAC5CL,EAAMC,KAAKC,EAASM,OAAO,eAK/B,OAFAR,EAAMC,KAAKF,GAEJC,I,sBAGX,SAASS,EAAcC,GAEnBC,QAAQC,IAAIH,GACZ,IAAMI,EAAkBJ,EAAahB,QAAO,SAAAqB,GAAI,MAAmB,gBAAfA,EAAKtC,SACzDM,KAAKI,SAAS,CAAEX,cAAesC,IAC/B/B,KAAKX,MAAM6D,aAAanB,GACxBF,QAAQC,IAAI9B,KAAKX,S,oBAGrB,WAEI,IAAM6C,EAAYlC,KAAKX,MAAjB6C,QAEN,OADAL,QAAQC,IAAI,sBAAuB9B,KAAKX,MAAMkD,UAC/B,GAAXL,EACO,KAIP,6BAEI,kBAACC,EAAA,EAAKC,MAAN,CAAYC,UAAU,iBAClB,kBAAC,IAAD,CACIC,QAAStC,KAAKV,MAAMwD,SACpBnD,MAAOK,KAAKX,MAAMkD,SAAW,GAAKvC,KAAKV,MAAMG,cAC7C+C,SAAUxC,KAAKJ,SAEf2C,SAAUvC,KAAKX,MAAMkD,SACrBE,eAAgB,uBAChBC,UAAW1C,KAAKX,MAAMkD,SAAW,mBAAqB,mB,GAxEvDI,IAAMC,W,QCwGdO,G,yDA3GX,WAAY9D,GAAQ,IAAD,8BACf,cAAMA,IAiBV+D,sBAAwB,SAACC,EAAGhE,GACpBgE,EAAEC,mBACF,EAAKjE,MAAMkE,YAAYF,EAAE3B,OAAO,eAChC,EAAKtB,SAAS,CAAEoD,UAAWH,EAAE3B,OAAO,cAAe+B,QAASJ,EAAE7B,IAAI,GAAI,QAAQE,OAAO,gBAAiB,iBArB3F,EA0BnBgC,oBAAsB,SAACL,EAAGhE,GAClBgE,EAAEC,mBACF,EAAKjE,MAAMsE,UAAUN,EAAE3B,OAAO,eAC9B,EAAKtB,SAAS,CAAEqD,QAASJ,EAAE3B,OAAO,gBAAiB,iBA7BxC,EAkCnBkC,WAAa,SAACC,GACV,OAAOA,EAAYC,SAASzC,QAnCb,EAsCnB0C,kBAAoB,SAACF,GAGjB,QAAKA,EAAYC,SAASzC,IAAO,EAAK/B,MAAMmE,YAIzCI,EAAYC,SAASzC,IAAO,EAAK/B,MAAMkE,aA3C1C,EAAKJ,sBAAwB,EAAKA,sBAAsBvD,KAA3B,gBAC7B,EAAK6D,oBAAsB,EAAKA,oBAAoB7D,KAAzB,gBAE3B,EAAKP,MAAQ,CACTkE,UAAWnC,MAAS2C,SAAS,GAAI,QAAQtC,OAAO,cAChD+B,QAASpC,MAASK,OAAO,eAPd,E,qDAWnB,c,uCAGA,SAA0B5B,M,kCAuC1B,WACI,MAAO,CACH0D,UAAWxD,KAAKV,MAAMkE,UACtBC,QAASzD,KAAKV,MAAMmE,W,oBAI5B,WAAU,IAAD,WAKL,OAAe,GAFGzD,KAAKX,MAAjB6C,QAGK,KAIP,oCACI,kBAAC+B,EAAA,EAAD,CAAKC,GAAI,GACL,kBAAC/B,EAAA,EAAKC,MAAN,CAAYC,UAAU,mBAClB,kBAACF,EAAA,EAAKgC,MAAN,oBACA,kBAAC,GAAD,GAAUxE,MAAO,IAAIyE,KACjBC,WAAW,cADf,sBAEWrE,KAAKV,MAAMkE,WAFtB,4BAGiBxD,KAAK4D,WAAW/D,KAAKG,OAHtC,0BAIc,SAAAqB,GAAM,OAAI,EAAK+B,sBAAsB/B,MAJnD,qBAKS,GALT,4BAMgB,GANhB,0BAOc,cAPd,MAYR,kBAAC4C,EAAA,EAAD,CAAKC,GAAI,GACL,kBAAC/B,EAAA,EAAKC,MAAN,CAAYC,UAAU,iBAClB,kBAACF,EAAA,EAAKgC,MAAN,kBACA,kBAAC,GAAD,GAAUxE,MAAO,IAAIyE,KACjBC,WAAW,cADf,sBAEWrE,KAAKV,MAAMmE,SAFtB,4BAGiBzD,KAAK+D,kBAAkBlE,KAAKG,OAH7C,0BAIc,SAAAqB,GAAM,OAAI,EAAKqC,oBAAoBrC,MAJjD,qBAKS,GALT,4BAMgB,GANhB,0BAOc,qBAPd,W,GA1FAsB,IAAMC,Y,SC8Xf0B,G,yDAnXX,WAAYjF,GAAQ,IAAD,8BACf,cAAMA,IAwQVkF,iBAAmB,SAACC,GAChB,EAAKpE,SAAS,CAAEqE,eAAgBD,KA1QjB,EA+QnBE,mBAAqB,SAACC,GAClB,EAAKvE,SAAS,CAAEwE,aAAcD,KAhRf,EAqRnBE,gBAAkB,SAACC,GACf,EAAK1E,SAAS,CAAEH,UAAW6E,KAtRZ,EAyRnBC,cAAgB,SAACC,GACb,EAAK5E,SAAS,CAAEF,QAAS8E,KAxRzB,EAAK1F,MAAQ,CACT2F,MAAO,GACPC,QAAS,GACTC,SAAU,GACVC,WAAY,EACZrF,UAAW,KACX0E,eAAgB,GAChBY,eAAgB,GAChBT,aAAc,GACd3E,UAAWoB,MAAS2C,SAAS,GAAI,QAAQtC,OAAO,cAChDxB,QAASmB,MAASK,OAAO,eAG7B,EAAK4D,iBAAmB,EAAKA,iBAAiBzF,KAAtB,gBAExB,EAAK0F,eAAiB,CAClBC,OACA,CACIC,KAAM,iBACNlF,KAAM,CAAC,CAAEmF,GAAI,EAAGC,QAAS,eAAiB,CAAED,GAAI,EAAGC,QAAS,iBAAmB,CAAED,GAAI,EAAGC,QAAS,gBAIzG,EAAKC,cAAgB,EAAKA,cAAc/F,KAAnB,gBACrB,EAAKgG,eAAiB,EAAKA,eAAehG,KAApB,gBACtB,EAAKiG,aAAenD,IAAMoD,YA3BX,E,qDA6BnB,WACI,IAAIC,EAA6B,GAApBC,cAAUC,OAAc,GAAKD,cAAUE,OAEpDC,YAAc,CACVX,KAAM,YACNY,UAAWL,EACXM,UAAW,aAAeN,EAC1BrG,MAAOK,KAAKX,MAAMM,MAClBL,OAAO,GACR,SAAUiH,GAET,IACIC,EADMC,KAAKC,UAAUH,GACXI,QAAQ,YAAa,SACnCH,EAAMA,EAAIG,QAAQ3G,KAAKX,MAAMM,MAAO,SAEpCK,KAAKI,SAAS,CAAE6E,MAAOwB,KAAKG,MAAMJ,MACpC3G,KAAKG,S,uCAEX,SAA0BF,GACtB+B,QAAQC,IAAI9B,KAAKX,MAAMyD,UACvBjB,QAAQC,IAAIhC,EAAUgD,Y,2BAI1B,WAGI9C,KAAKX,MAAMwH,oBAAoB,CAC3BC,oBAAqB9G,KAAKV,MAAM4F,UAEpClF,KAAK+G,gB,0BAET,SAAa1D,GACT2D,SAASC,eAAe,YAAYC,MAAMC,MAAQ,EAClDH,SAASC,eAAe,UAAUC,MAAMC,MAAQ,U,wBAGpD,SAAW9D,GAEP+D,YAAW,WACPJ,SAASC,eAAe,YAAYC,MAAMC,MAAQ,SAClDH,SAASC,eAAe,UAAUC,MAAMC,MAAQ,UACjD,O,2BAEP,SAAcE,GACV,IAAQnC,EAAYlF,KAAKV,MAAjB4F,QACJoC,EAAQpC,EAAQqC,QAAQF,GACxBC,GAAS,GACTpC,EAAQsC,OAAOF,EAAO,GAE1BtH,KAAKI,SAAS8E,K,8BAGlB,SAAiB7B,GACbrD,KAAKI,SAAS,CAAEgF,WAAY/B,EAAEoE,OAAO9H,U,2BAEzC,SAAc0D,EAAGhE,GACbwC,QAAQC,IAAI,YAAauB,EAAEoE,OAAO9H,OAClCK,KAAKX,MAAMqI,YAAYrE,EAAEoE,OAAO9H,OAChCK,KAAKI,SAAS,CACVL,UAAWsD,EAAEoE,OAAO9H,QACrB,iB,2BAMP,WAGI,GAAIK,KAAKV,MAAM4F,QAAQyC,OAAS,EAC5BvB,YAAc,CACVX,KAAM,yBACNY,UAAWrG,KAAKV,MAAM4F,QAAQ0C,QAC/B,SAAUrB,GAST,GARAvG,KAAKI,SAAS,CACV0G,oBAAqB9G,KAAKV,MAAM4F,QAChC2C,cAAetB,IAEnBvG,KAAKX,MAAMwH,oBAAoB,CAC3BC,oBAAqB9G,KAAKV,MAAM4F,QAChC2C,cAAetB,IAEU,GAAzBvG,KAAKV,MAAM8F,WAAiB,CAC5B,GAA2B,MAAxBpF,KAAKV,MAAMS,UAEd,YADA+H,YAAM,wBAAyB,CAAEC,KAAM,UAGvC,GAAiC,IAA7B/H,KAAKV,MAAMmF,eAEf,YADAqD,YAAM,qBAAsB,CAAEC,KAAM,UAGpC/H,KAAKX,MAAM2I,aAAahI,KAAKV,MAAMmF,gBAEvC,GAA6B,GAAzBzE,KAAKV,MAAM8F,WAAiB,CAC5B,GAA2B,MAAxBpF,KAAKV,MAAMS,UAEd,YADA+H,YAAM,wBAAyB,CAAEC,KAAM,UAGvC,GAA+B,IAA3B/H,KAAKV,MAAMsF,aAEf,YADAkD,YAAM,uBAAwB,CAAEC,KAAM,UAGtC/H,KAAKX,MAAM4I,eAAejI,KAAKV,MAAMsF,aAAc5E,KAAKV,MAAMW,UAAWD,KAAKV,MAAMY,SAExF,GAA6B,GAAzBF,KAAKV,MAAM8F,WAAiB,CAC5B,IAAI8C,EAAUlI,KAAK8F,aAAaqC,QAAQC,uBACxCpI,KAAKX,MAAMgJ,YAAYH,EAAQ1E,UAAW0E,EAAQzE,WAExD5D,KAAKG,WAEN,CASD,GARAA,KAAKI,SAAS,CACV0G,oBAAqB,GACrBe,cAAe,KAEnB7H,KAAKX,MAAMwH,oBAAoB,CAC3BC,oBAAqB,GACrBe,cAAe,KAEU,GAAzB7H,KAAKV,MAAM8F,WAAiB,CAC5B,GAA2B,MAAxBpF,KAAKV,MAAMS,UAEd,YADA+H,YAAM,wBAAyB,CAAEC,KAAM,UAGvC,GAAiC,IAA7B/H,KAAKV,MAAMmF,eAEf,YADAqD,YAAM,qBAAsB,CAAEC,KAAM,UAGpC/H,KAAKX,MAAM2I,aAAahI,KAAKV,MAAMmF,gBAEvC,GAA6B,GAAzBzE,KAAKV,MAAM8F,WAAiB,CAC5B,GAA2B,MAAxBpF,KAAKV,MAAMS,UAEd,YADA+H,YAAM,wBAAyB,CAAEC,KAAM,UAGvC,GAA+B,IAA3B/H,KAAKV,MAAMsF,aAEf,YADAkD,YAAM,uBAAwB,CAAEC,KAAM,UAGtC/H,KAAKX,MAAM4I,eAAejI,KAAKV,MAAMsF,aAAc5E,KAAKV,MAAMW,UAAWD,KAAKV,MAAMY,SAExF,GAA6B,GAAzBF,KAAKV,MAAM8F,WAAiB,CAC5B,IAAI8C,EAAUlI,KAAK8F,aAAaqC,QAAQC,uBACxCpI,KAAKX,MAAMgJ,YAAYH,EAAQ1E,UAAW0E,EAAQzE,a,4BAO9D,WAEI,GAAIzD,KAAKV,MAAM4F,QAAQyC,OAAS,EAC5BvB,YAAc,CACVX,KAAM,yBACNY,UAAWrG,KAAKV,MAAM4F,QAAQ0C,QAC/B,SAAUrB,GAST,GARAvG,KAAKI,SAAS,CACV0G,oBAAqB9G,KAAKV,MAAM4F,QAChC2C,cAAetB,IAEnBvG,KAAKX,MAAMwH,oBAAoB,CAC3BC,oBAAqB9G,KAAKV,MAAM4F,QAChC2C,cAAetB,IAEU,GAAzBvG,KAAKV,MAAM8F,WAAiB,CAC5B,GAA2B,MAAxBpF,KAAKV,MAAMS,UAEd,YADA+H,YAAM,wBAAyB,CAAEC,KAAM,UAGvC,GAAiC,IAA7B/H,KAAKV,MAAMmF,eAEf,YADAqD,YAAM,qBAAsB,CAAEC,KAAM,UAGpC/H,KAAKX,MAAMiJ,cAActI,KAAKV,MAAMmF,qBAEnC,GAA6B,GAAzBzE,KAAKV,MAAM8F,WAAiB,CACjC,GAA2B,MAAxBpF,KAAKV,MAAMS,UAEd,YADA+H,YAAM,wBAAyB,CAAEC,KAAM,UAGvC,GAA+B,IAA3B/H,KAAKV,MAAMsF,aAEf,YADAkD,YAAM,uBAAwB,CAAEC,KAAM,UAGtC/H,KAAKX,MAAMkJ,gBAAgBvI,KAAKV,MAAMsF,aAAc5E,KAAKV,MAAMW,UAAWD,KAAKV,MAAMY,cAEpF,GAA6B,GAAzBF,KAAKV,MAAM8F,WAAiB,CACjC,IAAI8C,EAAUlI,KAAK8F,aAAaqC,QAAQC,uBACxCpI,KAAKX,MAAMmJ,aAAaN,EAAQ1E,UAAW0E,EAAQzE,WAGzD5D,KAAKG,YAWP,GARAA,KAAKI,SAAS,CACV0G,oBAAqB,GACrBe,cAAe,KAEnB7H,KAAKX,MAAMwH,oBAAoB,CAC3BC,oBAAqB,GACrBe,cAAe,KAEU,GAAzB7H,KAAKV,MAAM8F,WAAiB,CAC5B,GAA2B,MAAxBpF,KAAKV,MAAMS,UAEd,YADA+H,YAAM,wBAAyB,CAAEC,KAAM,UAGvC,GAAiC,IAA7B/H,KAAKV,MAAMmF,eAEf,YADAqD,YAAM,qBAAsB,CAAEC,KAAM,UAGpC/H,KAAKX,MAAMiJ,cAActI,KAAKV,MAAMmF,qBAEnC,GAA6B,GAAzBzE,KAAKV,MAAM8F,WAAiB,CACjC,GAA2B,MAAxBpF,KAAKV,MAAMS,UAEd,YADA+H,YAAM,wBAAyB,CAAEC,KAAM,UAGvC,GAA+B,IAA3B/H,KAAKV,MAAMsF,aAEf,YADAkD,YAAM,uBAAwB,CAAEC,KAAM,UAGtC/H,KAAKX,MAAMkJ,gBAAgBvI,KAAKV,MAAMsF,aAAc5E,KAAKV,MAAMW,UAAWD,KAAKV,MAAMY,cAEpF,GAA6B,GAAzBF,KAAKV,MAAM8F,WAAiB,CACjC,IAAI8C,EAAUlI,KAAK8F,aAAaqC,QAAQC,uBACxCpI,KAAKX,MAAMmJ,aAAaN,EAAQ1E,UAAW0E,EAAQzE,Y,oBA6B/D,WAAU,IAAD,OACL,EAA2BzD,KAAKV,MAAxB2F,EAAR,EAAQA,MAAR,EAAeC,QAIf,OAEI,yBAAKuD,GAAG,WAAW/F,UAAU,WAAWgG,aAAc1I,KAAK2I,YAEvD,kBAACC,EAAA,EAAD,KACI,kBAAC3E,EAAA,EAAD,CAAKC,GAAG,KAAI,yBAAKuE,GAAG,SAAS/F,UAAU,SAASmG,QAAS7I,KAAK8I,cAAlD,WACZ,kBAAC7E,EAAA,EAAD,CAAKC,GAAG,KAAI,2BAAO6D,KAAK,SAASrF,UAAU,kBAAkBmG,QAAS7I,KAAK6F,eAAehG,KAAKG,MAAOL,MAAM,aAC5G,kBAACsE,EAAA,EAAD,CAAKC,GAAG,KAAI,2BAAO6D,KAAK,SAASrF,UAAU,kBAAkBmG,QAAS7I,KAAK+I,cAAclJ,KAAKG,MAAOL,MAAM,aAG/G,6BACA,kBAACiJ,EAAA,EAAD,KACI,kBAAC3E,EAAA,EAAD,CAAKC,GAAG,KACJ,kBAAC/B,EAAA,EAAKC,MAAN,CAAYC,UAAU,oBAClB,kBAACF,EAAA,EAAKgC,MAAN,mBACA,kBAAC6E,EAAA,EAAD,CAAapD,cAAe5F,KAAK4F,kBAIzC,kBAAC3B,EAAA,EAAD,CAAKC,GAAG,KACJ,kBAAC/B,EAAA,EAAKC,MAAN,CAAYC,UAAU,uBAClB,kBAACF,EAAA,EAAKgC,MAAN,sBACA,kBAAC8E,EAAA,EAAD,CAAUC,YAAY,qBAAqBvJ,MAAOK,KAAKV,MAAM8F,WAAY+D,MAAOnJ,KAAKuF,eAAeC,OAAOjF,KAAMiC,SAAUxC,KAAKsF,sBAK5I,kBAACsD,EAAA,EAAD,KAEI,kBAAC,EAAD,CAAWQ,IAAKpJ,KAAK8F,aAAcvC,YAAavD,KAAK6E,gBAAgBhF,KAAKG,MAAO2D,UAAW3D,KAAK+E,cAAclF,KAAKG,SAIxH,kBAAC4I,EAAA,EAAD,KACI,kBAAC3E,EAAA,EAAD,CAAKC,GAAG,KACJ,kBAAC/B,EAAA,EAAKC,MAAN,CAAYC,UAAU,mBAClB,kBAACF,EAAA,EAAKgC,MAAN,iBACA,kBAAC,EAAD,CAAYlC,eAAgBjC,KAAK0E,mBAAmB7E,KAAKG,MAAOuC,SAAmC,GAAzBvC,KAAKV,MAAM8F,WAAiBA,WAAYpF,KAAKV,MAAM8F,WAAYrF,UAAWC,KAAKV,MAAMS,UAAWE,UAAWD,KAAKV,MAAMW,UAAWC,QAASF,KAAKV,MAAMY,YAIvO,kBAAC+D,EAAA,EAAD,CAAKC,GAAG,KACJ,kBAAC/B,EAAA,EAAKC,MAAN,CAAYC,UAAU,iBAClB,kBAACF,EAAA,EAAKgC,MAAN,eACA,yBAAKsE,GAAG,mBACJ,kBAAC,EAAD,CAAUvF,aAAclD,KAAKuE,iBAAiB1E,KAAKG,MAAOuC,SAAmC,GAAzBvC,KAAKV,MAAM8F,WAAiBA,WAAYpF,KAAKV,MAAM8F,WAAYrF,UAAWC,KAAKV,MAAMS,UAAWE,UAAWD,KAAKV,MAAMW,UAAWC,QAASF,KAAKV,MAAMY,cAMzO,kBAAC0I,EAAA,EAAD,KACI,kBAAC3E,EAAA,EAAD,KACI,kBAAC9B,EAAA,EAAKC,MAAN,CAAYC,UAAU,YAClB,kBAACF,EAAA,EAAKgC,MAAN,mBACA,yBAAKzB,UAAU,YACX,kBAAC,IAAD,CACIuC,MAAOA,EACPC,QAASlF,KAAKV,MAAM4F,QACpBC,SAAUnF,KAAKV,MAAM6F,SACrBkE,WAAW,MACXC,KAAK,WACLC,cAAc,EACdC,QAAS,SAAAtE,GAAO,OAAI,EAAK9E,SAAS,CAAE8E,aACpCuE,SAAU,SAAAtE,GAAQ,OAAI,EAAK/E,SAAS,CAAE+E,cACtCuE,eAAe,a,GArWd/G,IAAMC,YCS5B+G,G,sEA5BX,WAAYtK,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTsK,KAAM,EAAKvK,MAAMuK,MAHN,E,sDAMnB,c,uCAGA,SAA0B9J,GACtBE,KAAKI,SAAS,CAAEwJ,KAAM9J,EAAU8J,S,oBAEpC,WACI,OAAI5J,KAAKV,MAAMsK,KAEP,yBAAKlH,UAAU,eACX,6CAOD,S,GAxBGC,IAAMC,Y,+DC0CtBiH,E,kDACF,WAAYxK,GAAQ,IAAD,gCACf,cAAMA,IA8KVkF,iBAAmB,SAACC,GAChB,EAAKpE,SAAS,CAAEqE,eAAgBD,KAhLjB,EAkLnBsF,gBAAkB,SAAC/J,GACf,EAAKK,SAAS,CAAEL,UAAWA,KAnLZ,EA2UnBgK,kBAAoB,SAACvF,GAEjB,EAAKpE,SAAS,CAAE4J,cAAexF,EAAWyF,aAAa,IAEvD,IADA,IAAIC,EAAM,GACDC,EAAI,EAAGA,EAAI3F,EAAUmD,OAAQwC,IAClCD,EAAI/I,KAAK,CACLuE,GAAIlB,EAAU2F,GAAGxK,MACjBgG,QAASnB,EAAU2F,GAAGzK,QAI9B0H,WAAW,WACH8C,GAAOA,EAAIvC,OAAS,IACpB3H,KAAKoK,aAAaF,EAAI,GAAGxE,IACzB1F,KAAKI,SAAS,CAAEqE,eAAgByF,EAAKG,oBAAqBH,EAAI,GAAGxE,OAEvE7F,KALS,gBAKG,MA3VC,EA8fnByK,oBAAsB,SAAC3F,EAAanB,EAAWC,GAE3C,EAAKrD,SAAS,CAAEmK,gBAAiB5F,EAAasF,aAAa,IAE3D,IADA,IAAIC,EAAM,GACDC,EAAI,EAAGA,EAAIxF,EAAYgD,OAAQwC,IACpCD,EAAI/I,KAAK,CACLuE,GAAIf,EAAYwF,GAAGxK,MACnBgG,QAAShB,EAAYwF,GAAGzK,QAIhC0H,WAAW,WACH8C,GAAOA,EAAIvC,OAAS,IACpB3H,KAAKwK,eAAeN,EAAI,GAAGxE,GAAIlC,EAAWC,GAC1CzD,KAAKI,SAAS,CAAEqK,iBAAkBP,EAAKQ,sBAAuBR,EAAI,GAAGxE,OAE3E7F,KALS,gBAKG,MA9gBC,EAooBnB8K,iBAAmB,SAACnH,EAAWC,GAE3B,IAAImH,EAAW,EAAKC,2BAA2BrH,EAAWC,GAC1D,EAAKrD,SAAS,CAAEwK,SAAUA,EAAUE,wBAAyBF,EAAS,GAAGlF,GAAIzF,UAAWuD,EAAWtD,QAASuD,EAASwG,aAAa,IAElI7C,WAAW,WACP,GAAIwD,GAAYA,EAASjD,OAAS,EAAG,CAEjC,IAAIoD,EAAMH,EAAS,GAAGlF,GAClB4B,EAAQsD,EAAS,GAAGlF,GAAG6B,QAAQ,KAC/B/D,EAAYuH,EAAIC,OAAO,EAAG1D,GAC1B7D,EAAUsH,EAAIC,OAAO1D,EAAQ,GACjCtH,KAAKI,SAAS,CAAE6K,kBAAmBzH,EAAW0H,gBAAiBzH,IAE/DzD,KAAKmL,YAAY3H,EAAWC,KAElC5D,KAXS,gBAWG,MAppBC,EAi0BnBuL,iBAAmB,SAAC5G,GAChB,IAAI6G,EAAc,EAAK/L,MAAM+L,YACzBC,EAAO9G,EACP+G,EAASD,EAAKE,KAAI,SAAU5K,GAM5B,OAJAyK,EAAYlK,KAAK,CACb,KAAQP,EAAIlB,MACZ,SAAYkB,EAAIjB,MAAM8L,aAEnB7K,EAAIjB,SAGf,EAAKS,SAAS,CAAE6J,aAAa,IAE7B,IAOIyB,EAAO,CACP,OAReH,EAAO3D,KAAK,KAS3B,SAPW0D,EAAKE,KAAI,SAAU5K,GAC9B,OAAOA,EAAImC,YAEe6E,KAAK,KAK/B,OAA6C,GAAnC,EAAKtI,MAAMuI,cAAcF,OAAc,KAAO,EAAKrI,MAAMuI,cAAcD,OACjF,UAAa,EAAKtI,MAAMS,UACxB,OAAU,UAEd4L,YAAcD,EAAM,SAAUpL,GAE1BN,KAAKI,SAAS,CAAEwL,eAAgBtL,EAAQC,KAAKA,KAAMyJ,cAAexF,EAAW6G,YAAaA,GACtF,WACIrL,KAAK6L,wBACPhM,KAAKG,QAEbH,KAPkB,kBA71BL,EAq7BnBiM,gBAAkB,SAACtI,EAAWC,GAE1B,IAAImH,EAAW,EAAKC,2BAA2BrH,EAAWC,GAC1D,EAAKrD,SAAS,CAAEwK,SAAUA,EAAUE,wBAAyBF,EAAS,GAAGlF,GAAIzF,UAAWuD,EAAWtD,QAASuD,EAASwG,aAAa,IAElI7C,WAAW,WACP,GAAIwD,GAAYA,EAASjD,OAAS,EAAG,CAEjC,IAAIoD,EAAMH,EAAS,GAAGlF,GAClB4B,EAAQsD,EAAS,GAAGlF,GAAG6B,QAAQ,KAC/B/D,EAAYuH,EAAIC,OAAO,EAAG1D,GAC1B7D,EAAUsH,EAAIC,OAAO1D,EAAQ,GACjCtH,KAAKI,SAAS,CAAE6K,kBAAmBzH,EAAW0H,gBAAiBzH,IAE/DzD,KAAK+L,kBAAkBvI,EAAWC,KAExC5D,KAXS,gBAWG,MAr8BC,EAojCnBmM,mBAAqB,SAACrH,EAAanB,EAAWC,GAE1C2D,WAAW,WACPpH,KAAKI,SAAS,CAAEmK,gBAAiB5F,EAAasF,aAAa,IAC3DjK,KAAKiM,qBAAqBtH,EAAanB,EAAWC,IAEjD5D,KAJM,gBAIM,MA1jCF,EA8jCnBoM,qBAAuB,SAACtH,EAAanB,EAAWC,GAG5C,IAGIiI,EAAO,CACP,SAJe/G,EAAY6G,KAAI,SAAU5K,GACzC,OAAOA,EAAIjB,SAGciI,KAAK,KAC9B,OAAU,EAAKtI,MAAMuI,cAAcD,OACnC,UAAa,EAAKtI,MAAMS,UACxB,UAAayD,EAAY,YACzB,QAAWC,EAAU,YACrB,OAAU,WAEdyI,YAAiBR,EAAM,SAAUpL,GAEzBA,GAAWA,EAAQC,MAAQD,EAAQC,KAAKA,MAA6C,GAArCD,EAAQC,KAAKA,KAAK,iBAClEuH,YAAM,kBAAmB,CAAEC,KAAM,UAGrC/H,KAAKmM,uBAAuB7L,EAAQC,KAAKA,KAAMoE,IAEjD9E,KARqB,kBA1kCvB,EAAKP,OAAL,GACImG,KAAM,mBACN2G,UAAW,aACXnC,aAAa,EACb2B,eAAgB,GAChBnH,eAAgB,GAChBuF,cAAe,IANnB,+BAOoB,IAPpB,gCAQqB,IARrB,gCASqB,IATrB,kCAUuB,IAVvB,gCAWqB,IAXrB,kCAYuB,IAZvB,+BAaoB,IAbpB,0BAce,IAdf,oCAeyB,MAfzB,uCAgB4B,MAhB5B,8BAiBmB,IAjBnB,+BAkBoB,IAlBpB,0BAmBe3I,MAASK,OAAO,eAnB/B,wBAoBaL,MAASK,OAAO,eApB7B,yBAqBc,IArBd,wCAsB6B,MAtB7B,kCAuBuBL,MAASK,OAAO,eAvBvC,gCAwBqBL,MAASK,OAAO,eAxBrC,+BAyBoB,IAzBpB,kCA0BuB,IA1BvB,4BA4BiB,CACT,CACI4H,KAAM,aACN+C,SAAU,aACVC,YAAY,GAGhB,CACIhD,KAAM,gBACN+C,SAAU,WACVC,YAAY,GAGhB,CACIhD,KAAM,UACN+C,SAAU,UACVC,YAAY,GAGhB,CACIhD,KAAM,aACN+C,SAAU,UACVC,YAAY,GAGhB,CACIhD,KAAM,eACN+C,SAAU,eACVC,YAAY,GAGhB,CACIhD,KAAM,YACN+C,SAAU,YACVC,YAAY,KA9DxB,mCAoEwB,CAChB,CACIhD,KAAM,eACN+C,SAAU,YACVC,YAAY,EACZC,UAAU,EACVC,MAAO,SAGX,CACIlD,KAAM,eACN+C,SAAU,eAEd,CACI/C,KAAM,gBACN+C,SAAU,cAEd,CACI/C,KAAM,OACN+C,SAAU,QAEd,CACI/C,KAAM,OACN+C,SAAU,QAEd,CACI/C,KAAM,uBACN+C,SAAU,WAEd,CACI/C,KAAM,4BACN+C,SAAU,0BAnGtB,qCAwG0B,CAClB,CACI/C,KAAM,eACN+C,SAAU,YACVC,YAAY,EACZC,UAAU,EACVC,MAAO,SAGX,CACIlD,KAAM,eACN+C,SAAU,eAEd,CACI/C,KAAM,WACN+C,SAAU,YAEd,CACI/C,KAAM,UACN+C,SAAU,aA3HtB,kCA+HuB,IA/HvB,yBAgIc,IAhId,oCAkIyB,IAlIzB,iCAmIsB,IAnItB,iCAoIsB,IApItB,8BAqImB,IArInB,GAwIA,EAAKI,kBAAoB,CACrB,CACInD,KAAM,eACN+C,SAAU,YACVG,MAAO,QACPF,YAAY,GAEhB,CACIhD,KAAM,eACN+C,SAAU,gBAGlB,EAAKzB,SAAW,CACZpF,OACA,CAEIjF,KAAM,CAAC,CAAEmF,GAAI,IAAKC,QAAS,mBAAqB,CAAED,GAAI,IAAKC,QAAS,wBA1J7D,E,sDAkKnB,WACIS,YAAc,CACVX,KAAM,YACNY,UAAW,GACXC,UAAW,eACXhH,OAAO,GACR,SAAUiH,GAETvG,KAAKI,SAAS,CAAEsM,eAAgBnG,KAClC1G,KAAKG,S,iCAWX,SAAoBqD,GACZA,GAAKA,EAAEyD,qBACP9G,KAAKI,SAAS,CACVuM,WAAY,IAAIvI,KAChB0C,oBAAqBzD,EAAEyD,oBACvBe,cAAehH,IAAE+L,MAAMvJ,EAAEwE,cAAe,kB,0BAMpD,SAAaxE,EAAGhE,GACZ,IAAIwN,EAAWxJ,EAAEoE,OAAO9H,MACxBK,KAAKI,SAAS,CAAEsK,sBAAuBmC,EAAU5C,aAAa,IAC7DjK,KAAKwK,eAAeqC,K,wBAGzB,SAAWxJ,EAAGhE,GACV,IAAIkM,EAASlI,EAAEoE,OAAO9H,MACtBK,KAAKI,SAAS,CAAEiK,oBAAqBkB,EAAQtB,aAAa,IAC1DjK,KAAKoK,aAAamB,K,sBAKtB,SAASrB,EAAKzB,GACV,IAAIlC,EAEJ,IAAK,IAAIuG,KAAK5C,EAAK,CACf,GAAIA,EAAI/D,SAAWsC,EACf,OAAOyB,EAEP,GAAsB,kBAAXA,EAAI4C,KACXvG,EANDvG,KAMe+M,SAAS7C,EAAI4C,GAAIrE,IAE3B,OAAOlC,EAKvB,OAAOA,I,sCAGX,WAuCI,MAtCc,CACV,CACI+C,KAAM,aACN+C,SAAU,aACVC,YAAY,GAGhB,CACIhD,KAAM,gBACN+C,SAAU,WACVC,YAAY,GAGhB,CACIhD,KAAM,UACN+C,SAAU,UACVC,YAAY,GAGhB,CACIhD,KAAM,aACN+C,SAAU,UACVC,YAAY,GAGhB,CACIhD,KAAM,eACN+C,SAAU,eACVC,YAAY,GAGhB,CACIhD,KAAM,YACN+C,SAAU,YACVC,YAAY,M,mCAMxB,SAAsBU,GAElB,IAAIxG,EAAM,GACNyG,EAAOjN,KACX,OAAIgN,GACAE,OAAOC,KAAKH,GAAYI,SAAQ,SAAUC,GACtC,IAGI,IAAIC,EAAY,GAQZC,GANAD,EADAE,MAAMC,QAAQT,EAAWK,IACbL,EAAWK,GAAK,GAGhBL,EAAWK,IAGDE,UAEtBG,GADOJ,EAAUK,KACRL,EAAUI,QAEnBE,EAASX,EAAKF,SAASE,EAAK3N,MAAMoN,eAAgBa,GACtD,GAAIK,GAAUA,EAAOvH,UAAW,CAC5B,IACIwH,EAAQC,EADRC,EAAOH,EAAOvH,UAIlB,IADAwH,EAASZ,EAAKF,SAASE,EAAK3N,MAAMoN,eAAgBqB,KACpCF,EAAOxH,UAAW,CAC5B,IAAI2H,EAAQH,EAAOxH,UACnByH,EAAUb,EAAKF,SAASE,EAAK3N,MAAMoN,eAAgBsB,GAGvD,IAAI9D,EAAM,CACN+D,WAAYZ,EAAIa,cAChBC,SAAUb,EAAUc,SACpBC,QAASX,EACTY,aAAmBC,GAAVV,EAAsB,GAAKA,EAAOM,SAC3CK,kBAAyBD,GAAXT,EAAuB,GAAKA,EAAQK,SAClDM,UAAWnB,EAAUoB,eAIzBlI,EAAIrF,KAAK+I,QAGTrI,QAAQC,IAAI,gBAAiBkL,EAAWK,IACxCxL,QAAQC,IAAI,SAAU8L,GAG9B,MAAOvK,GACHxB,QAAQ8M,MAAMtL,OAIfmD,GAIA,O,0BA2Bf,SAAa+E,GACT,IAEIsB,EAFgB7M,KAAKV,MAAM0K,cACNrJ,QAAO,SAAAiO,GAAI,OAAIA,EAAKjP,OAAS4L,KAClC,GAAGxI,SAEnB2I,EAAO,CACP,OAAUH,EACV,SAAYsB,EACZ,OAAU7M,KAAKV,MAAMuI,cAAcD,OACnC,OAAU,UACViH,UAAW7O,KAAKV,MAAMS,WAE1B+O,YAAepD,EAAM,SAAUpL,GAEvBA,GAAWA,EAAQC,MAAQD,EAAQC,KAAKA,MAA6C,GAArCD,EAAQC,KAAKA,KAAK,iBAClEuH,YAAM,kBAAmB,CAAEC,KAAM,UAErC/H,KAAKI,SAAS,CAAE2O,gBAAiBzO,EAAQC,KAAKA,OAC9CP,KAAKgP,uBAEPnP,KAAKG,S,iCAGX,WACI,IAAIwG,EAAM,GAENuI,EAAkB/O,KAAKV,MAAMyP,gBAAgBxO,KAEjD,IAAIwO,EAyHA,OAAO,KAxHP7B,OAAOC,KAAK4B,GAAiB3B,SAAQ,SAAUC,GAI3C,IADA,IAAI4B,EAAkBF,EAAgB1B,GAC7BlD,EAAI,EAAGA,EAAI8E,EAAgBtH,OAAQwC,IACxC,IAEe8E,EAAgB9E,GAAGoD,UAE9B/G,EAAIrF,KAAK,CACL+N,MAAO7B,EACP8B,KAAMF,EAAgB9E,GAAGwD,KACzByB,WAAYH,EAAgB9E,GAAGuD,OAC/B2B,KAAwC,oBAA3BJ,EAAgB9E,GAAGkF,KAAsB,aAAeJ,EAAgB9E,GAAGkF,KACxFC,WAAoD,oBAAjCL,EAAgB9E,GAAGmF,WAA4B,EAAIL,EAAgB9E,GAAGmF,aAKjG,MAAOjM,GACHxB,QAAQ8M,MAAMtL,OAO1BxB,QAAQC,IAAI,MAAO0E,GACnB,IAAI+I,EAAO,GACPC,EAAiB,GACjBC,EAAS5O,IAAE6O,QAAQlJ,EAAK,QAE5B0G,OAAOC,KAAKsC,GAAQrC,SAAQ,SAAUC,GAClC,IAAK,IAAD,MAEIgC,EAAOxO,IAAE8O,QAAQF,EAAOpC,IAAM,SAAUuB,GACxC,MAAoB,OAAbA,EAAKS,QAEZO,EAAO/O,IAAE8O,QAAQF,EAAOpC,IAAM,SAAUuB,GACxC,MAAoB,MAAbA,EAAKS,QAEZQ,EAAahP,IAAE8O,QAAQF,EAAOpC,IAAM,SAAUuB,GAC9C,MAAoB,cAAbA,EAAKS,QAEZS,EAASD,EAAWE,KAAON,EAAOpC,GAAK1F,OAASkI,EAAWE,KAAON,EAAOpC,GAAK1F,OAE9EqI,EAAMnP,IAAEoP,OAAOR,EAAOpC,IAAM,SAAU6C,EAAGC,GACzC,OAAOD,EAAIC,EAAEb,aACd,GAMCpF,EAAM,CACNkG,UAAW/C,EAAIa,cAAgB,MAAQuB,EAAOpC,GAAK,GAAG+B,WACtDiB,KAAI,UAAEhB,EAAKU,YAAP,QAAe,EACnBO,KAAI,UAAEV,EAAKG,YAAP,QAAe,EACnBF,WAAU,UAAEA,EAAWE,YAAb,QAAqB,EAC/BQ,YAAad,EAAOpC,GAAK1F,OACzB6I,SAAUR,EAAMP,EAAOpC,GAAK1F,QAAQ8I,QAAQ,GAC5CC,qBAAsBZ,GAAUE,EAAMF,GAAQW,QAAQ,IAAM,GAAGA,QAAQ,GACvEE,wBAAyBX,GAI7BT,EAAKpO,KAAK+I,GAEd,MAAO7G,GACHxB,QAAQ8M,MAAMtL,OAKtB,IAAIkN,EAAc1P,IAAEoP,OAAOV,GACvB,SAAUqB,EAAUjR,GAChB,OAAOiR,EAAWjR,EAAM4Q,cACzB,GACHV,EAAahP,IAAEoP,OAAOV,GAClB,SAAUqB,EAAUjR,GAChB,OAAOiR,EAAWjR,EAAMkQ,aACzB,GAEP3F,EAAM,CACNmG,KAAMxP,IAAEoP,OAAOV,GACX,SAAUqB,EAAUjR,GAChB,OAAOiR,EAAWjR,EAAM0Q,OACzB,GACPC,KAAMzP,IAAEoP,OAAOV,GACX,SAAUqB,EAAUjR,GAChB,OAAOiR,EAAWjR,EAAM2Q,OACzB,GAEPT,WAAYA,EACZU,YAAaA,EACbC,SAAW3P,IAAEoP,OAAOV,GAChB,SAAUqB,EAAUjR,GAChB,OAAOiR,EAAWC,WAAWlR,EAAMgR,2BACpC,GAAOJ,GAAcE,QAAQ,GACpCK,kBAAoBjQ,IAAEoP,OAAOV,GACzB,SAAUqB,EAAUjR,GAChB,OAAOiR,EAAWC,WAAWlR,EAAMgR,2BACpC,IAAOJ,EAAYV,IAAaY,QAAQ,IAGnDjB,EAAerO,KAAK+I,GAEpBlK,KAAKI,SAAS,CACV2Q,gBAAiBxB,EACjByB,eAAgBxB,EAChByB,kBAAmB,GACnBnO,SAAU,GACVoO,eAAgB,GAChBC,iBAAkB,GAClBC,cAAe,GAAInH,aAAa,M,4BAoC5C,SAAe4C,EAAUrJ,EAAWC,GAEhC,IAAIiI,EAAO,CACP,SAAYmB,EACZ,OAAU7M,KAAKV,MAAMuI,cAAcD,OACnC,UAAa5H,KAAKV,MAAMS,UACxB,UAAayD,EAAY,YACzB,QAAWC,EAAU,YACrB,OAAU,WAEbyI,YAAiBR,EAAM,SAAUpL,GAG1BA,GAAWA,EAAQC,MAAQD,EAAQC,KAAKA,MAA6C,GAArCD,EAAQC,KAAKA,KAAK,iBAClEuH,YAAM,kBAAmB,CAAEC,KAAM,UAGrC/H,KAAKI,SAAS,CAAEiR,kBAAmB/Q,EAAQC,KAAKA,KAAM0J,aAAa,IACnEjK,KAAKsR,2BAEPzR,KAAKG,S,qCAIX,WAGI,IAAIwG,EAAM,GAEN6K,EAAoBrR,KAAKV,MAAM+R,kBAAkB9Q,KAGrD,IAAI8Q,EA0EA,OAAO,KAzEPnE,OAAOC,KAAKkE,GAAmBjE,SAAQ,SAAUC,GAG7C,IADA,IAAIkE,EAAoBF,EAAkBhE,GACjClD,EAAI,EAAGA,EAAIoH,EAAkB5J,OAAQwC,IAC1C,IACI3D,EAAIrF,KAAK,CACL+N,MAAO7B,EACP8B,KAAMoC,EAAkBpH,GAAGwD,KAC3ByB,WAAYmC,EAAkBpH,GAAGuD,OACjC8D,WAAsD,oBAAnCD,EAAkBpH,GAAGqH,WAA4B,KAAOD,EAAkBpH,GAAGqH,aAGxG,MAAOnO,GACHxB,QAAQ8M,MAAMtL,OAI1B,IAAIkM,EAAO,GACPC,EAAiB,GAEjB5B,EAAS/M,IAAE6O,QAAQlJ,EAAK,QAE5B0G,OAAOC,KAAKS,GAAQR,SAAQ,SAAUC,GAClC,IAAK,IAAD,IACIoE,EAAW5Q,IAAE8O,QAAQ/B,EAAOP,IAAM,SAAUuB,GAC5C,MAA0B,OAAnBA,EAAK4C,cAGZtH,EAAM,CACNkG,UAAW/C,EAAIa,cAAgB,MAAQN,EAAOP,GAAK,GAAG+B,WACtDqC,SAAQ,UAAEA,EAAS1B,YAAX,QAAmB,EAC3B2B,QAAO,UAAED,EAASE,aAAX,QAAoB,EAC3BpB,YAAa3C,EAAOP,GAAK1F,QAG7B4H,EAAKpO,KAAK+I,GAEd,MAAO7G,GACHxB,QAAQ8M,MAAMtL,OAItB,IAAI6G,EAAM,CACNuH,SAAU5Q,IAAEoP,OAAOV,GACf,SAAUqB,EAAUjR,GAChB,OAAOiR,EAAWjR,EAAM8R,WACzB,GACPC,QAAS7Q,IAAEoP,OAAOV,GACd,SAAUqB,EAAUjR,GAChB,OAAOiR,EAAWjR,EAAM+R,UACzB,GACPnB,YAAa1P,IAAEoP,OAAOV,GAClB,SAAUqB,EAAUjR,GAChB,OAAOiR,EAAWjR,EAAM4Q,cACzB,IAGXf,EAAerO,KAAK+I,GAIpBlK,KAAKI,SAAS,CACV6Q,kBAAmB1B,EACnByB,eAAgBxB,EAChBuB,gBAAiB,GACjBjO,SAAU,GACVoO,eAAgB,GAChBC,iBAAkB,GAClBC,cAAe,GAAInH,aAAa,M,kCAmC5C,WACI,IAAIzD,EAAM,GAENoL,EAAiB5R,KAAKV,MAAMsS,eAGhC,IAAIA,EAqFA,OAAO,KApFP,IAAIpR,EAAWR,KAAKS,0BAA0BT,KAAKV,MAAM2L,kBAAmBjL,KAAKV,MAAM4L,iBAEvFgC,OAAOC,KAAKyE,GAAgBxE,SAAQ,SAAUC,GAC1C,IAEI,IAAIwE,EAAiBD,EAAevE,GACpC,GAAIwE,GAAkBA,EAAetE,UAAW,CACjCsE,EAAetE,UAE1B/G,EAAIrF,KAAK,CACL+N,MAAO7B,EACP8B,KAAM0C,EAAelE,KACrByB,WAAYyC,EAAenE,OAC3BxM,MAAsC,oBAAxB2Q,EAAe3Q,MAAuB,IAAM2Q,EAAe3Q,SAInF,MAAOmC,GACLxB,QAAQ8M,MAAMtL,OAGtB,IAAIkM,EAAO,GACPC,EAAiB,GAGjBC,EAAS5O,IAAE6O,QAAQlJ,EAAK,QACxBiG,EAAoBS,OAAO4E,OAAO,GAAI9R,KAAKyM,mBAE/CjM,EAAS4M,SAAQ,SAAA2E,GACbtF,EAAkBtL,KAAK,CACnB,KAAQ4Q,EACR,SAAYA,EAAQpL,QAAQ,IAAK,IAAIA,QAAQ,IAAK,SAI1DuG,OAAOC,KAAKsC,GAAQrC,SAAQ,SAAUC,GAElC,IAAI2E,EAAOvC,EAAOpC,GAEdnD,GADQrJ,IAAE+L,MAAMoF,EAAM,SAChB,CACN5B,UAAW/C,EAAIa,cAAgB,MAAQuB,EAAOpC,GAAK,GAAG+B,WACtDmB,YAAad,EAAOpC,GAAK1F,SAG7BnH,EAAS4M,SAAQ,SAAA2E,GAAY,IAAD,EACpBxL,EAAS1F,IAAE8O,QAAQqC,GAAM,SAAUpD,GACnC,OAAOA,EAAK1N,MAAMqG,QAAQwK,IAAY,KAG1C7H,EAAI6H,EAAQpL,QAAQ,IAAK,IAAIA,QAAQ,IAAK,KAA1C,UAAiDJ,EAAOwJ,YAAxD,QAAgE,KAEpER,EAAKpO,KAAK+I,MAGd,IAAIA,EAAM,CACNqG,YAAa1P,IAAEoP,OAAOV,GAClB,SAAUqB,EAAUjR,GAChB,OAAOiR,EAAWjR,EAAM4Q,cACzB,IAEP/P,EAAS4M,SAAQ,SAAA2E,GACb,IAAIE,EAAMF,EAAQpL,QAAQ,IAAK,IAAIA,QAAQ,IAAK,IAChDuD,EAAI+H,GAAOpR,IAAEoP,OAAOV,GACpB,SAAUqB,EAAUjR,GAChB,OAAOiR,EAAWjR,EAAMsS,KACzB,MAGPzC,EAAerO,KAAK+I,GAExBlK,KAAKI,SAAS,CACVqM,kBAAmBA,EACnByE,eAAgB3B,EAChByB,eAAgBxB,EAChB0C,kBAAmBzF,EACnBwE,kBAAmB,GACnBF,gBAAiB,GACjBjO,SAAU,GACVqO,iBAAkB,GAClBC,cAAe,GAAInH,aAAa,M,uCAS5C,SAA0BjJ,EAAWC,GAEjC,IAAIC,EAAQ,GACZA,EAAMC,KAAKH,GAKX,IAFA,IAAII,EAAWC,IAAOL,GAAWM,QAAQ,OACrCC,EAAWF,IAAOJ,GAASK,QAAQ,OAChCF,EAASI,IAAI,EAAG,QAAQC,KAAKF,GAAY,GAC5CL,EAAMC,KAAKC,EAASM,OAAO,eAK/B,OAFAR,EAAMC,KAAKF,GAEJC,I,wCAGX,SAA2BF,EAAWC,GAMlC,IAJA,IAAIC,EAAQ,GACRE,EAAWC,IAAOL,GAAWM,QAAQ,OACrCC,EAAWF,IAAOJ,GAASK,QAAQ,OAEhCF,EAASI,IAAI,EAAG,QAAQC,KAAKF,GAAY,GAAG,CAC/CL,EAAMC,KAAK,CACPuE,GAAI1E,EAAY,IAAMI,EAASM,OAAO,cACtCiE,QAAS3E,EAAY,OAASI,EAASM,OAAO,gBAE9CV,EAAYI,EAASI,IAAI,EAAG,QAAQE,OAAO,cAMnD,OAJAR,EAAMC,KAAK,CACPuE,GAAI1E,EAAY,IAAMC,EACtB0E,QAAS3E,EAAY,OAASC,IAE3BC,I,4BAGX,SAAemC,EAAGhE,GACd,IAAI0L,EAAM1H,EAAEoE,OAAO9H,MACf2H,EAAQyD,EAAIxD,QAAQ,KACpB/D,EAAYuH,EAAIC,OAAO,EAAG1D,GAC1B7D,EAAUsH,EAAIC,OAAO1D,EAAQ,GACjCtH,KAAKI,SAAS,CAAE0K,wBAAyBC,EAAKG,gBAAiBzH,EAASwH,kBAAmBzH,EAAW0N,eAAgB,GAAIjH,aAAa,IAEvI7C,WAAW,WACPpH,KAAKmL,YAAY3H,EAAWC,IAC9B5D,KAAKG,MAAO,O,yBAGlB,SAAYwD,EAAWC,GAEnB,IAAIiI,EAAO,CACP,UAAalI,EAAY,YACzB,OAAUxD,KAAKV,MAAMuI,cAAcD,OACnC,QAAWnE,EAAU,aAEzB0O,YAAczG,EAAM,SAAUpL,GAM1BN,KAAKI,SAAS,CAAEwR,eAAgBtR,EAAQC,KAAKA,OAC7CP,KAAKoS,wBAEPvS,KAAKG,S,kCA8CX,WAGI,IAAIwG,EAAM,GACNoF,EAAiB5L,KAAKV,MAAMsM,eAC5B5B,EAAgBhK,KAAKV,MAAM0K,cAC3BiD,EAAOjN,KAEX,IAAI4L,EA8DA,OAAO,KA7DPsB,OAAOC,KAAKvB,GAAgBwB,SAAQ,SAAUC,GAE1C,IACI,IAAIgF,EAAOzG,EAAeyB,GAAK,GAAGE,UAC9BK,EAASX,EAAKF,SAASE,EAAK3N,MAAMoN,eAAgB2F,GACtD,GAAIzE,GAAUA,EAAOvH,UAAW,CAC5B,IACIwH,EAAQC,EADRC,EAAOH,EAAOvH,UAIlB,IADAwH,EAASZ,EAAKF,SAASE,EAAK3N,MAAMoN,eAAgBqB,KACpCF,EAAOxH,UAAW,CAC5B,IAAI2H,EAAQH,EAAOxH,UACnByH,EAAUb,EAAKF,SAASE,EAAK3N,MAAMoN,eAAgBsB,GAEvD,IAAI9D,EAAM,CACN+D,WAAYZ,EAAIa,cAChBC,SAAUvC,EAAeyB,GAAK,GAAGe,SACjCC,aAAmBE,GAAVX,EAAsB,GAAKA,EAAOO,SAC3CG,aAAmBC,GAAVV,EAAsB,GAAKA,EAAOM,SAC3CK,kBAAyBD,GAAXT,EAAuB,GAAKA,EAAQK,SAClDM,UAAW7C,EAAeyB,GAAK,GAAGqB,cAClC4D,KAAM,IAIVtI,EAAcwB,KAAI,SAAU5K,GACxBsJ,EAAItJ,EAAIjB,MAAM8L,YAAc,OAIhC,IADA,IAAI8G,EAAW3G,EAAeyB,GACrBlD,EAAI,EAAGA,EAAIoI,EAAS5K,OAAQwC,IAC7BoI,EAASpI,GAAGqI,SAEZtI,EAAIqI,EAASpI,GAAGqI,QAAUD,EAASpI,GAAGmF,YAK9C9I,EAAIrF,KAAK+I,QAGTrI,QAAQC,IAAI,oBAAqB8J,EAAeyB,GAAK,IACrDxL,QAAQC,IAAI,SAAU8L,GAG9B,MAAOvK,GACHxB,QAAQ8M,MAAMtL,OAItBrD,KAAKI,SAAS,CACV0C,SAAU0D,EACVyK,kBAAmB,GACnBF,gBAAiB,GACjBG,eAAgB,GAChBC,iBAAkB,GAClBC,cAAe,GAAInH,aAAa,M,iCAgC5C,SAAoB2H,GAEhB,IACIrC,EAAO,GAIX,IAAIqC,EAwDA,OAAO,KAtDP,IAAIpL,EAJGxG,KAIQyS,sBAAsBb,GAGjCpR,EAAWR,KAAKS,0BAA0BT,KAAKV,MAAM2L,kBAAmBjL,KAAKV,MAAM4L,iBAEvF1E,EAAI4G,SAAQ,SAAA2E,GAER,IAAIC,EAAOJ,EAAeG,EAAQ9D,iBACtBM,GAARyD,IACAA,EAAOJ,EAAeG,EAAQ9D,WAAWyE,gBAE7C,IAAIxR,EAAQ8Q,EAAK9Q,MACbgJ,EAAM6H,EAEVvR,EAAS4M,SAAQ,SAAA2E,GAEb,IAAIxL,EAAS1F,IAAE8O,QAAQzO,GAAO,SAAU0N,GACpC,OAAOA,EAAKrH,QAAQwK,IAAY,KAGpC7H,EAAI6H,EAAQpL,QAAQ,IAAK,IAAIA,QAAQ,IAAK,KAAOJ,EAAOwJ,KAAO,EAAI,MAAQ,QAE/ER,EAAKpO,KAAK+I,MAOd,IAAIyI,EAAmB3S,KAAK4S,2BAE5BpS,EAAS4M,SAAQ,SAAA2E,GACbY,EAAiBxR,KAAK,CAClB,KAAQ4Q,EACR,SAAYA,EAAQpL,QAAQ,IAAK,IAAIA,QAAQ,IAAK,SAM1D3G,KAAKI,SAAS,CACVuS,iBAAkBA,EAClBvB,cAAe7B,EACf0B,kBAAmB,GACnBF,gBAAiB,GACjBG,eAAgB,GAChBpO,SAAU,GACVqO,iBAAkB,GAClBlH,aAAa,M,qCAYzB,SAAwB5G,EAAGhE,GACvB,IAAI0L,EAAM1H,EAAEoE,OAAO9H,MACf2H,EAAQyD,EAAIxD,QAAQ,KACpB/D,EAAYuH,EAAIC,OAAO,EAAG1D,GAC1B7D,EAAUsH,EAAIC,OAAO1D,EAAQ,GACjCtH,KAAKI,SAAS,CAAE0K,wBAAyBC,EAAKG,gBAAiBzH,EAASwH,kBAAmBzH,EAAW0N,eAAgB,KAEtH9J,WAAW,WACPpH,KAAK+L,kBAAkBvI,EAAWC,IACpC5D,KAAKG,MAAO,O,+BAGlB,SAAkBwD,EAAWC,GAEzB,IAAIiI,EAAO,CACP,UAAalI,EAAY,YACzB,OAAUxD,KAAKV,MAAMuI,cAAcD,OACnC,QAAWnE,EAAU,aAEzB0O,YAAczG,EAAM,SAAUpL,GAO1BN,KAAK6S,oBAAoBvS,EAAQC,KAAKA,OAExCV,KAAKG,S,oCA8CX,SAAuBqR,EAAmB1M,GAGtC,IACI4K,EAAO,GAGX,IAAI8B,EA+DA,OAAO,KA9DP,IAAI7K,EAHGxG,KAGQyS,sBAAsBpB,EAAkB9Q,MACnDuS,EAAYnO,EAEhB6B,EAAI4G,SAAQ,SAAA2E,GAER,IACI,IAAIC,EAAOX,EAAkB9Q,KAAKwR,EAAQ9D,iBAC9BM,GAARyD,IACAA,EAAOX,EAAkB9Q,KAAKwR,EAAQ9D,WAAWyE,gBAGrD,IAAIxI,EAAM6H,EACVe,EAAU1F,SAAQ,SAAAwB,GAEd,IAAImE,EAASnE,EAAKjP,MAClB,GAAIoT,EAAQ,CACR,IAAItB,EAAW5Q,IAAE8O,QAAQqC,GAAM,SAAUgB,GACrC,OAAOA,EAAEjQ,UAAYgQ,KAEzB7I,EAAI0E,EAAKjP,MAAM8L,YAAcgG,EAAS1B,KAAO,EAAI,MAAQ,UAGzD7F,EAAI0E,EAAKjP,MAAM8L,YAAc,QAIrC8D,EAAKpO,KAAK+I,GAMd,MAAO7G,QAIX,IAAI4P,EAAsBjT,KAAK4S,2BAE/BE,EAAU1F,SAAQ,SAAA2E,GACdkB,EAAoB9R,KAAK,CACrB,KAAQ4Q,EAAQrS,MAChB,SAAYqS,EAAQpS,MAAM8L,WAC1Ba,YAAY,OAMpBtM,KAAKI,SAAS,CACV6S,oBAAqBA,EACrB9B,iBAAkB5B,EAClB0B,kBAAmB,GACnBC,eAAgB,GAChBH,gBAAiB,GACjBjO,SAAU,GACVsO,cAAe,GACfnH,aAAa,M,+BAezB,WAEI,OAAIjK,KAAKV,MAAMyR,iBAAmB/Q,KAAKV,MAAMyR,gBAAgBpJ,OAAS,EAC3D,kBAAC,IAAD,KACH,kBAAC,IAAD,CAAKzD,GAAG,MACJ,kBAACgP,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKjP,GAAI,GACL,kBAACkP,EAAA,EAAD,CAAWC,IAAI,MAAf,iBAEJ,kBAAC,IAAD,CAAKnP,GAAI,GACL,kBAAC/B,EAAA,EAAKC,MAAN,CAAYC,UAAU,iBAClB,kBAAC4G,EAAA,EAAD,CAAUC,YAAY,cAClBC,MAAOnJ,KAAKV,MAAMmF,eAClB9E,MAAOK,KAAKV,MAAM+K,oBAClB7H,SAAUxC,KAAKsT,WAAWzT,KAAKG,YAOnD,kBAACuT,EAAA,EAAD,KACKvT,KAAKwT,2BACN,kBAAC,IAAD,CAAWC,QAASzT,KAAKV,MAAMoU,mBAAoBnT,KAAMP,KAAKV,MAAMyR,sBAQjF,O,8BAIX,WAEI,OAAI/Q,KAAKV,MAAMwD,UAAY9C,KAAKV,MAAMwD,SAAS6E,OAAS,EAC7C,kBAAC,IAAD,KACH,kBAAC,IAAD,CAAKzD,GAAG,MACJ,kBAACgP,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KAEI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKjP,GAAI,IACL,kBAACkP,EAAA,EAAD,CAAWC,IAAI,MAAf,gBAIZ,kBAACE,EAAA,EAAD,KACI,kBAAC,IAAD,CAAWE,QAASzT,KAAKV,MAAM+L,YAAa9K,KAAMP,KAAKV,MAAMwD,eAO1E,O,8BAIX,WAEI,OAAI9C,KAAKV,MAAM4R,gBAAkBlR,KAAKV,MAAM4R,eAAevJ,OAAS,EACzD,kBAAC,IAAD,KACH,kBAAC,IAAD,CAAKzD,GAAG,MACJ,kBAACgP,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKjP,GAAI,GACL,kBAACkP,EAAA,EAAD,CAAWC,IAAI,MAAf,gBAEJ,kBAAC,IAAD,CAAKnP,GAAI,GACL,kBAAC/B,EAAA,EAAKC,MAAN,CAAYC,UAAU,iBAClB,kBAAC4G,EAAA,EAAD,CAAUC,YAAY,cAClBC,MAAOnJ,KAAKV,MAAMsL,SAClBjL,MAAOK,KAAKV,MAAMwL,wBAClBtI,SAAUxC,KAAK2T,eAAe9T,KAAKG,YAOvD,kBAACuT,EAAA,EAAD,KACKvT,KAAK4T,0BACN,kBAAC,IAAD,CAAWH,QAASzT,KAAKV,MAAMmN,kBAAmBlM,KAAMP,KAAKV,MAAM4R,qBAOhF,O,iCAIX,WAEI,OAAIlR,KAAKV,MAAM2R,mBAAqBjR,KAAKV,MAAM2R,kBAAkBtJ,OAAS,EAC/D,kBAAC,IAAD,KACH,kBAAC,IAAD,CAAKzD,GAAG,MACJ,kBAACgP,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKjP,GAAI,GACL,kBAACkP,EAAA,EAAD,CAAWC,IAAI,MAAf,mBAEJ,kBAAC,IAAD,CAAKnP,GAAI,GACL,kBAAC/B,EAAA,EAAKC,MAAN,CAAYC,UAAU,mBAClB,kBAAC4G,EAAA,EAAD,CAAUC,YAAY,gBAClBC,MAAOnJ,KAAKV,MAAMmL,iBAClB9K,MAAOK,KAAKV,MAAMoL,sBAClBlI,SAAUxC,KAAK6T,aAAahU,KAAKG,YAMrD,kBAACuT,EAAA,EAAD,KACKvT,KAAK8T,6BACN,kBAAC,IAAD,CAAWL,QAASzT,KAAKV,MAAMyU,qBAAsBxT,KAAMP,KAAKV,MAAM2R,wBAOnF,O,gCAIX,WAEI,OAAIjR,KAAKV,MAAM6R,kBAAoBnR,KAAKV,MAAM6R,iBAAiBxJ,OAAS,EAC7D,kBAAC,IAAD,KACH,kBAAC,IAAD,CAAKzD,GAAG,MACJ,kBAACgP,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKjP,GAAI,IACL,kBAACkP,EAAA,EAAD,CAAWC,IAAI,MAAf,oBAIZ,kBAACE,EAAA,EAAD,KACI,kBAAC,IAAD,CAAWE,QAASzT,KAAKV,MAAM2T,oBAAqB1S,KAAMP,KAAKV,MAAM6R,uBAOlF,O,6BAIX,WAEI,OAAInR,KAAKV,MAAM8R,eAAiBpR,KAAKV,MAAM8R,cAAczJ,OAAS,EACvD,kBAAC,IAAD,KACH,kBAAC,IAAD,CAAKzD,GAAG,MACJ,kBAACgP,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKjP,GAAI,GACL,kBAACkP,EAAA,EAAD,CAAWC,IAAI,MAAf,oBAEJ,kBAAC,IAAD,CAAKnP,GAAI,GACL,kBAAC/B,EAAA,EAAKC,MAAN,CAAYC,UAAU,iBAClB,kBAAC4G,EAAA,EAAD,CAAUC,YAAY,cAClBC,MAAOnJ,KAAKV,MAAMsL,SAClBjL,MAAOK,KAAKV,MAAMwL,wBAClBtI,SAAUxC,KAAKgU,wBAAwBnU,KAAKG,YAOhE,kBAACuT,EAAA,EAAD,KACI,kBAAC,IAAD,CAAWE,QAASzT,KAAKV,MAAMqT,iBAAkBpS,KAAMP,KAAKV,MAAM8R,oBAO/E,O,wCAIX,WACI,IAAI6C,EAAK,GAELjD,EAAiBhR,KAAKV,MAAM0R,eAChC,OAAIA,GAAkBA,EAAerJ,OAAS,GAC1CqJ,EAAe5D,SAAQ,SAAA2E,GACnBkC,EAAG9S,KAAK,4BACJ,2CACA,4BAAK4Q,EAAQxB,aACb,4BAAKwB,EAAQN,UACb,4BAAKM,EAAQL,cAId,kBAACwC,EAAA,EAAD,CAAOC,YAAU,GACpB,2BAAOzR,UAAU,gBACb,4BACI,2CACA,4CACA,wCACA,yCAGR,+BACKuR,KAKF,O,sCAIf,WAEI,IAAIA,EAAK,GAELjD,EAAiBhR,KAAKV,MAAM0R,eAChC,OAAIA,GAAkBA,EAAerJ,OAAS,GAC1CqJ,EAAe5D,SAAQ,SAAA2E,GACnBkC,EAAG9S,KAAK,4BACJ,2CACA,4BAAK4Q,EAAQxB,aACb,4BAAKwB,EAAQlC,YACb,4BAAKkC,EAAQ1B,MACb,4BAAK0B,EAAQzB,MACb,4BAAKyB,EAAQvB,SACb,4BAAKuB,EAAQjB,uBAKd,kBAACoD,EAAA,EAAD,CAAOC,YAAU,GACpB,2BAAOzR,UAAU,gBACb,4BACI,2CACA,4CACA,6CACA,oCACA,oCACA,oDACA,2DAGR,+BACKuR,KAKF,O,qCAIf,WACI,IAEIjD,EAAiBhR,KAAKV,MAAM0R,eAC5BkB,EAAoBlS,KAAKV,MAAM4S,kBAAkBvR,QAAO,SAAAqB,GAAI,MAAsB,cAAlBA,EAAKqK,YAEzE,GAAI2E,GAAkBA,EAAerJ,OAAS,EAAG,CAE7C,IAAIyM,EAAKlC,EAAkB1G,KAAI,SAACoD,GAAD,OACzB,4BAAKA,EAAKtF,SAGZ2K,EAAK/B,EAAkB1G,KAAI,SAACoD,GAAD,OAC3B,4BAAKoC,EAAe,GAAGpC,EAAKvC,cAG3B,OAAO,kBAAC6H,EAAA,EAAD,CAAOC,YAAU,GACzB,2BAAOzR,UAAU,gBACb,4BACI,0CACC0R,IAGT,+BACI,4BACI,0CACCH,KAMb,OAAO,O,oBAIf,WAG4BjU,KAAKqU,aAA7B,IACA,EAAqHrU,KAAKV,MAArB2K,GAArG,EAAQd,MAAR,EAAeiD,UAAf,EAA0BvC,aAA1B,EAAwCyK,UAAxC,EAAmDC,SAAnD,EAA6DC,aAA7D,EAA2E7H,WAA3E,EAAuF8H,aAAvF,EAAqGxK,aACrGpI,QAAQC,IAAI,aAAc9B,KAAKV,MAAMC,YAKrC,OACI,oCACI,yBAAKmD,UAAU,WACX,kBAAC,EAAD,CAASkH,KAAMK,IACf,kBAAC,IAAD,MACA,kBAAC,EAAD,CACIjC,aAAchI,KAAKoL,iBAAiBvL,KAAKG,MACzCqI,YAAarI,KAAK8L,gBAAgBjM,KAAKG,MACvCiI,eAAgBjI,KAAKgM,mBAAmBnM,KAAKG,MAE7C6G,oBAAqB7G,KAAK6G,oBAAoBhH,KAAKG,MAAOL,MAAO,UACjE2I,cAAetI,KAAK+J,kBAAkBlK,KAAKG,MAC3CuI,gBAAiBvI,KAAKsK,oBAAoBzK,KAAKG,MAC/CwI,aAAcxI,KAAK2K,iBAAiB9K,KAAKG,MACzC0H,YAAa1H,KAAK8J,gBAAgBjK,KAAKG,QAG1CA,KAAK0U,oBACL1U,KAAK2U,sBACL3U,KAAK4U,mBACL5U,KAAK6U,mBACL7U,KAAK8U,kBACL9U,KAAK+U,2B,GAx/CCpS,IAAMC,WAygDlBoS,uBANf,SAAyB1V,GACrB,MAAO,CACH2V,WAAY3V,EAAM2V,cAMtB,CACIC,kBACAC,oBACAC,iBACAhP,mBANO4O,CASbnL,I,8FC5jDIwL,E,kDACF,WAAYhW,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTsK,KAAM,EAAKvK,MAAMuK,MAHN,E,sDAMnB,c,uCAGA,SAA0B9J,GACtBE,KAAKI,SAAS,CAAEwJ,KAAM9J,EAAU8J,OAC5B9J,EAAU8J,MACVxC,WAAW,WACPpH,KAAKI,SAAS,CAAEwJ,MAAM,KACxB/J,KAAKG,MAAO,O,oBAGtB,WACI,OAAIA,KAAKV,MAAMsK,KAEP,kBAAC,IAAD,CAAO0L,QAAStV,KAAKX,MAAMiW,SACtBtV,KAAKX,MAAMkW,MAKb,S,GA3BI5S,IAAMC,WAgCdyS,O,iCCrCf,0KAIMG,EAAwB,SAAAC,GAM5B,OAJIA,EAAMC,WAAWpW,OAASmW,EAAMC,WAAWpP,WAC7CqP,aAAaC,QAAQH,EAAMC,WAAWpP,UAAWG,KAAKC,UAAU+O,EAAMlV,OAGjE,CACLwH,KAAM8N,IAAUC,mBAChBC,QAASN,EAAMlV,KACfkF,KAAMgQ,EAAMC,WAAWjQ,OAIrBuQ,EAA4B,SAAArH,GAChC,MAAO,CACL5G,KAAM8N,IAAUI,gBAChBF,QAASpH,IAIAyG,EAAe,SAACM,EAAWQ,GAEtC,GAAuB,MAAnBR,EAAWnV,WAAmCgO,GAAnBmH,EAAWnV,KACxC,OAAO,SAAU4V,EAAUC,GACzBD,EAASX,EAAsB,CAAEjV,KAAMmV,EAAWnV,KAAMmV,WAAYA,MAGxE,IACE,GAAKA,EAAWpW,OAASqW,aAAaU,QAAQX,EAAWpP,YAAeqP,aAAaU,QAAQX,EAAWpP,WAEtG,OAAO,SAAU6P,EAAUC,GACzB,IAAI7V,EAAOkG,KAAKG,MAAM+O,aAAaU,QAAQX,EAAWpP,YACtD6P,EAASX,EAAsB,CAAEjV,KAAMA,EAAMmV,WAAYA,MAI/D,MAAOrS,IAKP,OAAO,SAAU8S,EAAUC,GACzBE,IACGC,IAAI/Q,IAAOgR,IAAIC,SAAW,cAAe,CACxCC,OAAQhB,IAETiB,MAAK,SAAApW,GACAmV,EAAWpW,OAASoW,EAAWpP,WACjCqP,aAAaC,QAAQF,EAAWpP,UAAWG,KAAKC,UAAUnG,EAAKA,KAAKA,OAElE2V,GACFA,EAAG3V,GAEL4V,EAASX,EAAsB,CAAEjV,KAAMA,EAAKA,KAAKA,KAAK,GAAImV,WAAYA,QAEvEkB,OAAM,SAAAjI,GACLwH,EAASH,EAA0BrH,SAuB9BkI,EAAa,SAACnB,EAAYQ,GACrC,OAAO,SAAUC,EAAUC,GACzBE,IACGQ,KAAKtR,IAAOgR,IAAIC,SAAW,gBAAiB,CAC3ClW,KAAMmV,IAEPiB,MAAK,SAAApW,GArBe,IAAAkV,EAsBfS,GACFA,EAAG3V,GAEL4V,GAzBmBV,EAyBS,CAAElV,KAAMA,EAAKA,MAvBxC,CACLwH,KAAM8N,IAAUkB,sBAChBhB,QAASN,EAAMlV,WAuBZqW,OAAM,SAAAjI,GACLwH,EApBuB,SAAAxH,GAC7B,MAAO,CACL5G,KAAM8N,IAAUmB,mBAChBjB,QAASpH,GAiBIsI,CAAuBtI,SAqB3BuI,EAAa,SAACxB,EAAYQ,GAErC,OAAO,SAAUC,EAAUC,GACzBE,IACGQ,KAAKtR,IAAOgR,IAAIC,SAAW,gBAAiB,CAC3ClW,KAAMmV,IAEPiB,MAAK,SAAApW,GAtBe,IAAAkV,EAuBfS,GACFA,EAAG3V,GAEL4V,GA1BmBV,EA0BS,CAAElV,KAAMA,EAAKA,MAxBxC,CACLwH,KAAM8N,IAAUsB,sBAChBpB,QAASN,EAAMlV,WAwBZqW,OAAM,SAAAjI,GACLwH,EArBuB,SAAAxH,GAC7B,MAAO,CACL5G,KAAM8N,IAAUuB,mBAChBrB,QAASpH,GAkBI0I,CAAuB1I,SAQ3BvI,EAAgB,SAACsP,EAAYQ,GAExC,IACE,GAAKR,EAAWpW,OAASqW,aAAaU,QAAQX,EAAWpP,YAAeqP,aAAaU,QAAQX,EAAWpP,WAAY,CAElH,IAAI/F,EAAOkG,KAAKG,MAAM+O,aAAaU,QAAQX,EAAWpP,YAEtD,YADA4P,EAAG3V,IAIP,MAAO8C,IAIPiT,IACGC,IAAI/Q,IAAOgR,IAAIC,SAAW,cAAe,CACxCC,OAAQhB,IAETiB,MAAK,SAAApW,GACAmV,EAAWpW,OAASoW,EAAWpP,WACjCqP,aAAaC,QAAQF,EAAWpP,UAAWG,KAAKC,UAAUnG,EAAKA,KAAKA,OAEtE2V,EAAG3V,EAAKA,KAAKA,SAIdqW,OAAM,SAAAjI,S,+GC5JL2I,E,kDACF,WAAYjY,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACT6J,MAAO,IAHI,E,qDAMnB,WACQnJ,KAAKV,MAAM6J,OAAqC,IAA5BnJ,KAAKV,MAAM6J,MAAMxB,QACrC3H,KAAKuX,Y,uCAGb,SAA0BzX,GAMtB,IAAKA,EAAUmV,WAAWuC,SAElB1X,EAAUmV,WAAWjV,KAAKX,MAAM4S,IAAIzM,OAAOC,MAAO,CAClD,IACIe,EADMC,KAAKC,UAAU5G,EAAUmV,WAAWjV,KAAKX,MAAM4S,IAAIzM,OAAOC,OACtDkB,QAAQ3G,KAAKX,MAAM4S,IAAIzM,OAAOiS,QAAS,MACrDjR,EAAMA,EAAIG,QAAQ3G,KAAKX,MAAM4S,IAAIzM,OAAOkS,aAAc,WAEtD1X,KAAKI,SAAS,CAAE+I,MAAO1C,KAAKG,MAAMJ,Q,iCAK9C,c,qBAIA,WAEIxG,KAAKX,MAAM+V,aAAa,CACpBuC,MAAO,GACPC,KAAM,EACNnS,KAAMzF,KAAKX,MAAM4S,IAAIzM,OAAOC,KAC5BoS,KAAM7X,KAAKX,MAAM4S,IAAIzM,OAAOqS,KAC5BC,IAAK9X,KAAKX,MAAM4S,IAAIzM,OAAOsS,IAC3BvX,KAAMP,KAAKX,MAAM4S,IAAIzM,OAAOjF,KAC5B+F,UAAWtG,KAAKX,MAAM4S,IAAIzM,OAAOc,UACjChH,MAAOU,KAAKX,MAAM4S,IAAIzM,OAAOlG,U,oBAKrC,WAEI,IAAM6J,EAAUnJ,KAAKV,MAAf6J,MACN,EAAqCnJ,KAAKX,MAAlCM,EAAR,EAAQA,MAAO6C,EAAf,EAAeA,SAKf,OAHK2G,IACDA,EAAQ,IAEG,GALf,EAAyBjH,QAMd,KAIP,6BAEI,kBAAC,IAAK6V,QAAN,CAAcC,GAAG,SAASzV,SAAUvC,KAAKX,MAAMkD,SAAU5C,MAAOA,EAAO2J,KAAMtJ,KAAKX,MAAM4S,IAAI3I,KAAM9G,SAAUA,GACxG,4BAAQ6K,IAAK,EAAG1N,MAAO,GAAIK,KAAKX,MAAM6J,YAAclJ,KAAKX,MAAM6J,YAAc,UAC5EC,EAAMqC,KAAI,SAAAoD,GAAI,OACX,4BAAQvB,IAAKuB,EAAKlJ,GAAI/F,MAAOiP,EAAKlJ,IAAKkJ,EAAKjJ,kB,GAnEpChD,IAAMC,WAkFvBoS,iBANf,SAAyB1V,GACrB,MAAO,CACH2V,WAAY3V,EAAM2V,cAMtB,CACIG,kBAHOJ,CAKbsC,I,8FCvFIrO,G,8DACF,WAAY5J,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACT6J,MAAO,IAHI,E,qDAMnB,c,uCAEA,SAA0BrJ,GACtBE,KAAKI,SAAS,CAAE+I,MAAOrJ,EAAUqJ,U,2BAIrC,SAAcyF,GACV,OAAO,4BAAQvB,IAAKuB,EAAKlJ,GAAI/F,MAAOiP,EAAKlJ,IAAKkJ,EAAKjJ,W,oBAGvD,WAAU,IAAD,OAGL,EAAgD3F,KAAKX,MAA/CiK,EAAN,EAAMA,KAAM3J,EAAZ,EAAYA,MAAO6C,EAAnB,EAAmBA,SAAUN,EAA7B,EAA6BA,QAASiH,EAAtC,EAAsCA,MAItC,OAHKA,IACDA,EAAQ,IAEG,GAAXjH,EACO,KAIP,6BAEI,kBAAC,IAAK6V,QAAN,CAAcC,GAAG,SAASzV,SAAUvC,KAAKX,MAAMkD,SAAU5C,MAAOA,EAAO2J,KAAMA,EAAM9G,SAAUA,IAC5D,IAA3BxC,KAAKX,MAAM6J,aACT,4BAAQmE,IAAK,EAAG1N,MAAO,GAAIK,KAAKX,MAAM6J,YAAclJ,KAAKX,MAAM6J,YAAc,UAEhFC,EAAMqC,KAAI,SAAAoD,GAAI,OACX,EAAKqJ,cAAcrJ,Y,GArCpBjM,IAAMC,YAgDdqG,O,+GC9CTD,E,kDACF,WAAY3J,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,GAIb,EAAK0J,YAAc,CACfxD,OACA,CACIC,KAAM,WACNoS,KAAM,CAAC,WAAY,0BACnBC,IAAK,CAAC,CAAE,SAAY,MAXb,E,qDAgBnB,c,uCAEA,SAA0BhY,M,2BAK1B,SAAcuD,M,oBAMd,WAKI,OAAe,GAFGrD,KAAKX,MAAjB6C,QAGK,KAIP,6BACI,kBAAC,IAAKE,MAAN,CAAYC,UAAU,oBAClB,kBAAC,IAAD,CAAc6G,YAAY,iBACtB+I,IAAKjS,KAAKgJ,YACVxG,SAAUxC,KAAKX,MAAMuG,sB,GA5CnBjD,IAAMC,WAsDjBoG","file":"static/js/40.df126d96.chunk.js","sourcesContent":["\r\nimport React from \"react\";\r\nimport { Form } from 'react-bootstrap';\r\nimport { connect } from \"react-redux\";\r\nimport MultiSelect from \"react-multi-select-component\";\r\nimport moment from 'moment';\r\nimport _, { bind } from 'underscore';\r\n\r\n\r\n// reactstrap components\r\n\r\nimport {\r\n    GetMoodleCourse\r\n} from \"../../store/actions/CommonAction\";\r\n\r\nimport { Row, Col } from 'react-bootstrap';\r\n\r\nimport DropDown from '../Common/DropDown';\r\n\r\nclass CourseList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            CourseData: [],\r\n            selecteddata: \"\",\r\n            selectedValue: [{ label: \"Select Course\", value: \"0\" }],\r\n\r\n        }\r\n        //this.coursechange = this.coursechange.bind(this);\r\n        this.onSelect = this.onSelect.bind(this);\r\n\r\n\r\n    }\r\n    componentDidMount() {\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        \r\n        if ((nextProps.ProductId && nextProps.ProductId != this.props.ProductId) || (nextProps.StartDate != this.props.StartDate) || (nextProps.EndDate != this.props.EndDate)) {\r\n            this.fetchCourseData(nextProps.ProductId, nextProps.StartDate, nextProps.EndDate);\r\n            this.setState({ selectedValue: [{ label: \"Select Course\", value: \"0\" }] });\r\n        }\r\n\r\n    }\r\n    fetchCourseData(ProductId, StartDate, EndDate) {\r\n        GetMoodleCourse(ProductId, function (results) {\r\n            var data = results.data.data;\r\n            let AllDates = this.enumerateDaysBetweenDates(StartDate, EndDate);\r\n            const resultdata = data.filter(val => _.contains( AllDates, val.date));\r\n            this.setState({ CourseData: resultdata });\r\n        }.bind(this));\r\n    }\r\n\r\n    enumerateDaysBetweenDates(startDate, endDate) {\r\n\r\n        var dates = [];\r\n        dates.push(startDate);\r\n\r\n        var currDate = moment(startDate).startOf('day');\r\n        var lastDate = moment(endDate).startOf('day');\r\n        while (currDate.add(1, 'days').diff(lastDate) < 0) {\r\n            dates.push(currDate.format('YYYY-MM-DD'));\r\n        }\r\n\r\n        dates.push(endDate);\r\n\r\n        return dates;\r\n    }\r\n\r\n    \r\n    onSelect(selectedList, selectedItem) {\r\n\r\n        console.log(selectedList);\r\n        const newselectedList = selectedList.filter(task => task.label !== 'Select Course');\r\n        this.setState({ selectedValue: newselectedList });\r\n        this.props.onSelectCourse(newselectedList);\r\n        console.log(this.props);\r\n    }\r\n\r\n    // coursechange(e, props) {\r\n        \r\n    //     this.setState({ selecteddata: e.target.value });\r\n    //     var SelectedCourseId = e.target.value;\r\n    //     this.props.onSelectCourse(SelectedCourseId);\r\n\r\n    // }\r\n\r\n\r\n    render() {\r\n        let { visible } = this.props;\r\n\r\n        if (visible == false) {\r\n            return null;\r\n        }\r\n        return (\r\n\r\n            <div>\r\n\r\n                <Form.Group controlId=\"course_dropdown\">\r\n                    {/* <DropDown\r\n                        firstoption=\"Select Course\"\r\n                        disabled={this.props.disabled}\r\n                        value={this.props.disabled ? \"\" : this.state.selecteddata}\r\n                        items={this.state.CourseData}\r\n                        onChange={this.coursechange}>\r\n                    </DropDown> */}\r\n\r\n                    <MultiSelect\r\n                        options={this.state.CourseData} // Options to display in the dropdown\r\n                        value={this.props.disabled ? [] : this.state.selectedValue} // Preselected value to persist in dropdown\r\n                        onChange={this.onSelect} // Function will trigger on select event                                                \r\n                        // labelledBy={\"Select Course\"}\r\n                        disabled={this.props.disabled}\r\n                        selectAllLabel={\"Select ALL Course List\"}\r\n                        className={this.props.disabled ? \"courselist disable\" : \"courselist\"}\r\n                    />\r\n                </Form.Group>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default CourseList;\r\n\r\n","\nimport React from \"react\";\nimport { Form } from 'react-bootstrap';\nimport { connect } from \"react-redux\";\nimport MultiSelect from \"react-multi-select-component\";\nimport moment from 'moment';\nimport _, { bind } from 'underscore';\n\n\n// reactstrap components\n\nimport {\n    GetMoodleQuiz\n} from \"../../store/actions/CommonAction\";\n\nimport { Row, Col } from 'react-bootstrap';\n\nimport DropDown from '../Common/DropDown';\n\nclass QuizList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            QuizData: [],\n            selectedValue: [{ label: \"Select Quiz\", value: \"0\", courseId: \"0\" }],\n        };\n        this.onSelect = this.onSelect.bind(this);\n    }\n    componentDidMount() {\n    }\n    componentWillReceiveProps(nextProps) {//debugger;\n        if ((nextProps.ProductId && nextProps.ProductId != this.props.ProductId) || (nextProps.StartDate != this.props.StartDate) || (nextProps.EndDate != this.props.EndDate)) {\n            this.fetchQuizData(nextProps.ProductId, nextProps.StartDate, nextProps.EndDate);\n            this.setState({ selectedValue: [{ label: \"Select Quiz\", value: \"0\", courseId: \"0\" }] });\n        }\n       \n    }\n    fetchQuizData(ProductId, StartDate, EndDate) {//debugger;\n        GetMoodleQuiz(ProductId, StartDate, EndDate, function (results) {\n            var data = results.data.data;\n            let AllDates = this.enumerateDaysBetweenDates(StartDate, EndDate);\n            const resultdata = data.filter(val => _.contains( AllDates, val.date));\n            this.setState({ QuizData: resultdata });\n        }.bind(this));\n\n    }\n\n    enumerateDaysBetweenDates(startDate, endDate) {\n\n        var dates = [];\n        dates.push(startDate);\n\n        var currDate = moment(startDate).startOf('day');\n        var lastDate = moment(endDate).startOf('day');\n        while (currDate.add(1, 'days').diff(lastDate) < 0) {\n            dates.push(currDate.format('YYYY-MM-DD'));\n        }\n\n        dates.push(endDate);\n\n        return dates;\n    }\n\n    onSelect(selectedList, selectedItem) {\n\n        console.log(selectedList);\n        const newselectedList = selectedList.filter(task => task.label !== 'Select Quiz');\n        this.setState({ selectedValue: newselectedList });\n        this.props.onSelectQuiz(newselectedList);\n        console.log(this.props);\n    }\n\n    render() {\n\n        let { visible } = this.props;\n        console.log(\"this.props.disabled\", this.props.disabled);\n        if (visible == false) {\n            return null;\n        }\n        return (\n\n            <div>\n\n                <Form.Group controlId=\"quiz_dropdown\">\n                    <MultiSelect\n                        options={this.state.QuizData} // Options to display in the dropdown\n                        value={this.props.disabled ? [] : this.state.selectedValue} // Preselected value to persist in dropdown\n                        onChange={this.onSelect} // Function will trigger on select event                                                \n                        // labelledBy={\"Select Course\"}\n                        disabled={this.props.disabled}\n                        selectAllLabel={\"Select ALL Quiz List\"}\n                        className={this.props.disabled ? \"quizlist disable\" : \"quizlist\"}\n                    />\n                </Form.Group>\n            </div>\n\n        );\n    }\n}\n\n\nexport default QuizList;\n\n","\r\nimport React from \"react\";\r\nimport { Form } from 'react-bootstrap';\r\n\r\n// reactstrap components\r\nimport moment from 'moment';\r\n\r\nimport * as Datetime from 'react-datetime';\r\nimport 'react-datetime/css/react-datetime.css'\r\n\r\n\r\nimport { Row, Col } from 'react-bootstrap';\r\n\r\n\r\n\r\nclass DateRange extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleStartDateChange = this.handleStartDateChange.bind(this);\r\n        this.handleEndDateChange = this.handleEndDateChange.bind(this);\r\n\r\n        this.state = {\r\n            startdate: moment().subtract(30, 'days').format(\"YYYY-MM-DD\"),\r\n            enddate: moment().format(\"YYYY-MM-DD\"),\r\n            \r\n        }\r\n    }\r\n    componentDidMount() {\r\n\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n\r\n    }\r\n\r\n    handleStartDateChange = (e, props) => {\r\n        if (e._isAMomentObject) {\r\n            this.props.onStartDate(e.format(\"YYYY-MM-DD\"));\r\n            this.setState({ startdate: e.format(\"YYYY-MM-DD\"), enddate: e.add(30, 'days').format(\"YYYY-MM-DD\") }, function () {\r\n            });\r\n        }\r\n    }\r\n\r\n    handleEndDateChange = (e, props) => {\r\n        if (e._isAMomentObject) {\r\n            this.props.onEndDate(e.format(\"YYYY-MM-DD\"));\r\n            this.setState({ enddate: e.format(\"YYYY-MM-DD\") }, function () {\r\n                //this.fetchCallBackData();\r\n            });\r\n        }\r\n    }\r\n    validation = (currentDate) => {\r\n        return currentDate.isBefore(moment());\r\n    };\r\n\r\n    validationEndDate = (currentDate) => {\r\n        \r\n\r\n        if (!currentDate.isBefore(moment(this.state.enddate))) {\r\n            return false;\r\n        }\r\n\r\n        if(currentDate.isBefore(moment(this.state.startdate))) {\r\n            return false;\r\n        }\r\n        \r\n        return true;\r\n        \r\n    };\r\n\r\n    getSelectedDateRange() {\r\n        return {\r\n            startdate: this.state.startdate,\r\n            enddate: this.state.enddate\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        let { visible } = this.props;\r\n\r\n        if (visible == false) {\r\n            return null;\r\n        }\r\n        return (\r\n\r\n            <>\r\n                <Col md={6}>\r\n                    <Form.Group controlId=\"startdate_field\">\r\n                        <Form.Label>From Date :</Form.Label>\r\n                        <Datetime value={new Date()}\r\n                            dateFormat=\"YYYY-MM-DD\"\r\n                            value={this.state.startdate}\r\n                            isValidDate={this.validation.bind(this)}\r\n                            onChange={moment => this.handleStartDateChange(moment)}\r\n                            utc={true}\r\n                            timeFormat={false}\r\n                            className=\"form-group\"\r\n\r\n                        />\r\n                    </Form.Group>\r\n                </Col>\r\n                <Col md={6}>\r\n                    <Form.Group controlId=\"enddate_field\">\r\n                        <Form.Label>To Date :</Form.Label>\r\n                        <Datetime value={new Date()}\r\n                            dateFormat=\"YYYY-MM-DD\"\r\n                            value={this.state.enddate}\r\n                            isValidDate={this.validationEndDate.bind(this)}\r\n                            onChange={moment => this.handleEndDateChange(moment)}\r\n                            utc={true}\r\n                            timeFormat={false}\r\n                            className=\"form-group right0\"\r\n                        />\r\n                    </Form.Group>\r\n                </Col>\r\n            </>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default DateRange;\r\n\r\n","\r\nimport React from \"react\";\r\nimport { Form } from 'react-bootstrap';\r\n\r\nimport {\r\n    GetCommonData, GetCommonspData, GetDataDirect, GetExportQuiz\r\n} from \"../../store/actions/CommonAction\";\r\nimport { getUrlParameter, getuser } from '../../utility/utility.jsx';\r\n\r\n\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport 'react-checkbox-tree/lib/react-checkbox-tree.css';\r\nimport CheckboxTree from 'react-checkbox-tree';\r\n\r\nimport ProductList from \"../SelectList/ProductList\"\r\nimport CourseList from \"../SelectList/CourseList\"\r\nimport QuizList from \"../SelectList/QuizList\"\r\nimport DropDown from \"../Common/DropDown\"\r\nimport DateRange from \"../Common/DateRange\"\r\nimport moment from 'moment';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n\r\n\r\nclass MoodleManagerHierarchy extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: [],\r\n            checked: [],\r\n            expanded: [],\r\n            ReportType: 1,\r\n            ProductId: null,\r\n            QuizSelectList: [],\r\n            ExportQuizData: [],\r\n            CourseSelect: '',\r\n            StartDate: moment().subtract(30, 'days').format(\"YYYY-MM-DD\"),\r\n            EndDate: moment().format(\"YYYY-MM-DD\"),\r\n\r\n        };\r\n        this.reporttypechange = this.reporttypechange.bind(this);\r\n\r\n        this.ReportTypeList = {\r\n            config:\r\n            {\r\n                root: \"ReportTypeList\",\r\n                data: [{ Id: 1, Display: \"Quiz Report\" }, { Id: 2, Display: \"Course Report\" }, { Id: 3, Display: \"LMS Visit\" }],\r\n            }\r\n        };\r\n\r\n        this.productchange = this.productchange.bind(this);\r\n        this.onSummaryClick = this.onSummaryClick.bind(this);\r\n        this.dateRangeRef = React.createRef();\r\n    }\r\n    componentDidMount() {\r\n        let UserId = getuser().RoleId == 2 ? 75 : getuser().UserID;\r\n\r\n        GetDataDirect({\r\n            root: \"Hierarchy\",\r\n            ManagerId: UserId,\r\n            statename: \"Hierarchy-\" + UserId,\r\n            value: this.props.value,\r\n            state: true\r\n        }, function (result) {\r\n\r\n            let str = JSON.stringify(result);\r\n            var res = str.replace(/UserName/g, \"label\");\r\n            res = res.replace(this.props.value, \"value\");\r\n\r\n            this.setState({ nodes: JSON.parse(res) });\r\n        }.bind(this));\r\n    }\r\n    componentWillReceiveProps(nextProps) {//debugger;\r\n        console.log(this.props.QuizData);\r\n        console.log(nextProps.QuizData);\r\n    }\r\n\r\n\r\n    onButtonClick() {\r\n\r\n\r\n        this.props.handleSelectManager({\r\n            SelectedSupervisors: this.state.checked\r\n        });\r\n        this.forceUpdate();\r\n    }\r\n    onMouseEnter(e) {\r\n        document.getElementById(\"floating\").style.right = 0\r\n        document.getElementById(\"handle\").style.right = \"395px\"\r\n        //e.target.style.right = 0;\r\n    }\r\n    onMouseOut(e) {\r\n\r\n        setTimeout(function () {\r\n            document.getElementById(\"floating\").style.right = \"-400px\"\r\n            document.getElementById(\"handle\").style.right = \"-15px\"\r\n        }, 700);\r\n    }\r\n    RemoveChecked(checkeditem) {\r\n        const { checked } = this.state;\r\n        let index = checked.indexOf(checkeditem);\r\n        if (index > -1) {\r\n            checked.splice(index, 1);\r\n        }\r\n        this.setState(checked);\r\n    }\r\n\r\n    reporttypechange(e) {\r\n        this.setState({ ReportType: e.target.value });\r\n    }\r\n    productchange(e, props) {\r\n        console.log(\"ProductId\", e.target.value);\r\n        this.props.onProductId(e.target.value);\r\n        this.setState({\r\n            ProductId: e.target.value\r\n        }, function () {\r\n            //this.fetchCourseData();\r\n        });\r\n    }\r\n\r\n\r\n    onExportClick() {\r\n        debugger;\r\n\r\n        if (this.state.checked.length > 0) {\r\n            GetDataDirect({\r\n                root: \"GetAgentsUnderManagers\",\r\n                ManagerId: this.state.checked.join(),\r\n            }, function (result) {\r\n                this.setState({\r\n                    SelectedSupervisors: this.state.checked,\r\n                    SelectedUsers: result\r\n                });\r\n                this.props.handleSelectManager({\r\n                    SelectedSupervisors: this.state.checked,\r\n                    SelectedUsers: result\r\n                });\r\n                if (this.state.ReportType == 1) {\r\n                    if(this.state.ProductId == null){\r\n                    toast(\"Please select Product\", { type: 'error' });\r\n                    return;  \r\n                    }\r\n                    if (this.state.QuizSelectList == '') {\r\n                    toast(\"Please select Quiz\", { type: 'error' });\r\n                    return;\r\n                    }\r\n                    this.props.onExportQuiz(this.state.QuizSelectList);\r\n                }\r\n                if (this.state.ReportType == 2) {\r\n                    if(this.state.ProductId == null){\r\n                    toast(\"Please select Product\", { type: 'error' });\r\n                    return;  \r\n                    }\r\n                    if (this.state.CourseSelect == '') {\r\n                    toast(\"Please select Course\", { type: 'error' });\r\n                    return;\r\n                    }\r\n                    this.props.onExportCourse(this.state.CourseSelect, this.state.StartDate, this.state.EndDate);\r\n                }\r\n                if (this.state.ReportType == 3) {\r\n                    let dtrange = this.dateRangeRef.current.getSelectedDateRange()\r\n                    this.props.onExportLMS(dtrange.startdate, dtrange.enddate);\r\n                }\r\n            }.bind(this));\r\n        }\r\n        else {\r\n            this.setState({\r\n                SelectedSupervisors: [],\r\n                SelectedUsers: []\r\n            });\r\n            this.props.handleSelectManager({\r\n                SelectedSupervisors: [],\r\n                SelectedUsers: []\r\n            });\r\n            if (this.state.ReportType == 1) {\r\n                if(this.state.ProductId == null){\r\n                toast(\"Please select Product\", { type: 'error' });\r\n                return;  \r\n                }\r\n                if (this.state.QuizSelectList == '') {\r\n                toast(\"Please select Quiz\", { type: 'error' });\r\n                return;\r\n                }\r\n                this.props.onExportQuiz(this.state.QuizSelectList);\r\n            }\r\n            if (this.state.ReportType == 2) {\r\n                if(this.state.ProductId == null){\r\n                toast(\"Please select Product\", { type: 'error' });\r\n                return;  \r\n                }\r\n                if (this.state.CourseSelect == '') {\r\n                toast(\"Please select Course\", { type: 'error' });\r\n                return;\r\n                }\r\n                this.props.onExportCourse(this.state.CourseSelect, this.state.StartDate, this.state.EndDate);\r\n            }\r\n            if (this.state.ReportType == 3) {\r\n                let dtrange = this.dateRangeRef.current.getSelectedDateRange()\r\n                this.props.onExportLMS(dtrange.startdate, dtrange.enddate);\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    onSummaryClick() {\r\n\r\n        if (this.state.checked.length > 0) {\r\n            GetDataDirect({\r\n                root: \"GetAgentsUnderManagers\",\r\n                ManagerId: this.state.checked.join(),\r\n            }, function (result) {\r\n                this.setState({\r\n                    SelectedSupervisors: this.state.checked,\r\n                    SelectedUsers: result\r\n                });\r\n                this.props.handleSelectManager({\r\n                    SelectedSupervisors: this.state.checked,\r\n                    SelectedUsers: result\r\n                });\r\n                if (this.state.ReportType == 1) {\r\n                    if(this.state.ProductId == null){\r\n                    toast(\"Please select Product\", { type: 'error' });\r\n                    return;  \r\n                    }\r\n                    if (this.state.QuizSelectList == '') {\r\n                    toast(\"Please select Quiz\", { type: 'error' });\r\n                    return;\r\n                    }\r\n                    this.props.onSummaryQuiz(this.state.QuizSelectList);\r\n                }\r\n                else if (this.state.ReportType == 2) {\r\n                    if(this.state.ProductId == null){\r\n                    toast(\"Please select Product\", { type: 'error' });\r\n                    return;  \r\n                    }\r\n                    if (this.state.CourseSelect == '') {\r\n                    toast(\"Please select Course\", { type: 'error' });\r\n                    return;\r\n                    }\r\n                    this.props.onSummaryCourse(this.state.CourseSelect, this.state.StartDate, this.state.EndDate);\r\n                }\r\n                else if (this.state.ReportType == 3) {\r\n                    let dtrange = this.dateRangeRef.current.getSelectedDateRange()\r\n                    this.props.onSummaryLMS(dtrange.startdate, dtrange.enddate);\r\n                }\r\n\r\n            }.bind(this));\r\n        }\r\n        else {\r\n            this.setState({\r\n                SelectedSupervisors: [],\r\n                SelectedUsers: []\r\n            });\r\n            this.props.handleSelectManager({\r\n                SelectedSupervisors: [],\r\n                SelectedUsers: []\r\n            });\r\n            if (this.state.ReportType == 1) {\r\n                if(this.state.ProductId == null){\r\n                toast(\"Please select Product\", { type: 'error' });\r\n                return;  \r\n                }\r\n                if (this.state.QuizSelectList == '') {\r\n                toast(\"Please select Quiz\", { type: 'error' });\r\n                return;\r\n                }\r\n                this.props.onSummaryQuiz(this.state.QuizSelectList);\r\n            }\r\n            else if (this.state.ReportType == 2) {\r\n                if(this.state.ProductId == null){\r\n                toast(\"Please select Product\", { type: 'error' });\r\n                return;  \r\n                }\r\n                if (this.state.CourseSelect == '') {\r\n                toast(\"Please select Course\", { type: 'error' });\r\n                return;\r\n                }\r\n                this.props.onSummaryCourse(this.state.CourseSelect, this.state.StartDate, this.state.EndDate);\r\n            }\r\n            else if (this.state.ReportType == 3) {\r\n                let dtrange = this.dateRangeRef.current.getSelectedDateRange()\r\n                this.props.onSummaryLMS(dtrange.startdate, dtrange.enddate);\r\n            }\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    handleQuizSelect = (QuizValue) => {//debugger;\r\n        this.setState({ QuizSelectList: QuizValue });\r\n\r\n        //this.props.onQuizValue(QuizValue);\r\n    }\r\n\r\n    handleCourseSelect = (CourseValue) => {//debugger;\r\n        this.setState({ CourseSelect: CourseValue });\r\n\r\n    }\r\n\r\n\r\n    handleStartDate = (StartDateValue) => {\r\n        this.setState({ StartDate: StartDateValue });\r\n    }\r\n\r\n    handleEndDate = (EndDateValue) => {\r\n        this.setState({ EndDate: EndDateValue });\r\n    }\r\n\r\n\r\n    render() {\r\n        const { nodes, checked } = this.state;\r\n        // if (nodes.length == 0) {\r\n        //     return null;\r\n        // }\r\n        return (\r\n\r\n            <div id=\"floating\" className=\"floating\" onMouseLeave={this.onMouseOut}>\r\n\r\n                <Row>\r\n                    <Col md=\"4\"><div id=\"handle\" className=\"handle\" onClick={this.onMouseEnter}>Filter</div></Col>\r\n                    <Col md=\"4\"><input type=\"button\" className=\"btn btn-primary\" onClick={this.onSummaryClick.bind(this)} value=\"Summary\" /></Col>\r\n                    <Col md=\"4\"><input type=\"button\" className=\"btn btn-primary\" onClick={this.onExportClick.bind(this)} value=\"Export\" /></Col>\r\n\r\n                </Row>\r\n                <br />\r\n                <Row>\r\n                    <Col md=\"6\">\r\n                        <Form.Group controlId=\"protype_dropdown\">\r\n                            <Form.Label>Products :</Form.Label>\r\n                            <ProductList productchange={this.productchange} >\r\n                            </ProductList>\r\n                        </Form.Group>\r\n                    </Col>\r\n                    <Col md=\"6\">\r\n                        <Form.Group controlId=\"reporttype_dropdown\">\r\n                            <Form.Label>Report Type :</Form.Label>\r\n                            <DropDown firstoption=\"Select Report Type\" value={this.state.ReportType} items={this.ReportTypeList.config.data} onChange={this.reporttypechange}>\r\n                            </DropDown>\r\n                        </Form.Group>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n\r\n                    <DateRange ref={this.dateRangeRef} onStartDate={this.handleStartDate.bind(this)} onEndDate={this.handleEndDate.bind(this)}>\r\n                    </DateRange>\r\n\r\n                </Row>\r\n                <Row>\r\n                    <Col md=\"6\">\r\n                        <Form.Group controlId=\"course_dropdown\">\r\n                            <Form.Label>Course :</Form.Label>\r\n                            <CourseList onSelectCourse={this.handleCourseSelect.bind(this)} disabled={this.state.ReportType != 2} ReportType={this.state.ReportType} ProductId={this.state.ProductId} StartDate={this.state.StartDate} EndDate={this.state.EndDate}>\r\n                            </CourseList>\r\n                        </Form.Group>\r\n                    </Col>\r\n                    <Col md=\"6\">\r\n                        <Form.Group controlId=\"quiz_dropdown\">\r\n                            <Form.Label>Quiz :</Form.Label>\r\n                            <div id=\"quizmultiselect\">\r\n                                <QuizList onSelectQuiz={this.handleQuizSelect.bind(this)} disabled={this.state.ReportType != 1} ReportType={this.state.ReportType} ProductId={this.state.ProductId} StartDate={this.state.StartDate} EndDate={this.state.EndDate}>\r\n                                </QuizList>\r\n                            </div>\r\n                        </Form.Group>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Form.Group controlId=\"namagers\">\r\n                            <Form.Label>Managers :</Form.Label>\r\n                            <div className=\"managers\">\r\n                                <CheckboxTree\r\n                                    nodes={nodes}\r\n                                    checked={this.state.checked}\r\n                                    expanded={this.state.expanded}\r\n                                    checkModel=\"all\"\r\n                                    name=\"UserName\"\r\n                                    showNodeIcon={false}\r\n                                    onCheck={checked => this.setState({ checked })}\r\n                                    onExpand={expanded => this.setState({ expanded })}\r\n                                    showExpandAll={true}\r\n                                />\r\n                            </div>\r\n                        </Form.Group>\r\n                    </Col>\r\n                </Row>\r\n\r\n\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default MoodleManagerHierarchy;\r\n","\r\nimport React from \"react\";\r\nimport { Alert } from 'react-bootstrap';\r\n\r\n\r\nclass Loading extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            show: this.props.show\r\n        }\r\n    }\r\n    componentDidUpdate() {\r\n\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        this.setState({ show: nextProps.show });        \r\n    }\r\n    render() {\r\n        if (this.state.show) {\r\n            return (\r\n                <div className=\"PageLoading\">\r\n                    <span>\r\n                        Loading...\r\n                    </span>\r\n                </div>\r\n            );\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Loading;\r\n","import React from \"react\";\r\nimport {\r\n    GetCommonData, GetCommonspData, GetDataDirect, GetMoodleCourse, GetExportQuiz, GetSummaryQuiz, GetSummaryCourse, GetSummaryLMS\r\n} from \"../store/actions/CommonAction\";\r\nimport {\r\n    GetMySqlData\r\n} from \"../store/actions/CommonMysqlAction\";\r\nimport { connect } from \"react-redux\";\r\nimport { OpenSalesView, getUrlParameter, getuser, fnDatatableCol, hhmmss, joinObject } from '../utility/utility.jsx';\r\n//import { Multiselect } from 'multiselect-react-dropdown';\r\n//import { MDBSelect } from \"mdbreact\";\r\n//import Select from 'react-select'; \r\n//import makeAnimated from 'react-select/animated'; \r\nimport DropDownListMysql from './Common/DropDownListMysql';\r\nimport MultiSelect from \"react-multi-select-component\";\r\nimport DataTable from './Common/DataTableWithFilter';\r\nimport DropDown from './Common/DropDown';\r\nimport DropDownList from './Common/DropDownList';\r\nimport ManagerHierarchy from './MoodleComponent/MoodleManagerHierarchy';\r\nimport Moment from 'react-moment';\r\nimport moment from 'moment';\r\nimport { If, Then, Else } from 'react-if';\r\nimport AlertBox from './Common/AlertBox';\r\nimport Loading from './Common/Loading';\r\n\r\n\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport * as Datetime from 'react-datetime';\r\nimport 'react-datetime/css/react-datetime.css'\r\n\r\nimport _, { bind } from 'underscore';\r\n\r\n// reactstrap components\r\nimport {\r\n    Card,\r\n    CardHeader,\r\n    CardBody,\r\n    CardTitle,\r\n    Table,\r\n    Row,\r\n    Col\r\n} from \"reactstrap\";\r\nimport { ButtonGroup, Button, Modal, Form } from 'react-bootstrap';\r\nimport { func, string } from \"prop-types\";\r\n\r\nclass MoodleReport extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            root: \"MoodleReportData\",\r\n            PageTitle: \"LMS Report\",\r\n            showLoading: false,\r\n            ExportQuizList: [],\r\n            QuizSelectList: [],\r\n            QuizMultiList: [],\r\n            QuizSelectList: [],\r\n            CourseMultiList: [],\r\n            SummaryQuizData: [],\r\n            SummaryCourseData: [],\r\n            QuizSummaryData: [],\r\n            CourseSummaryData: [],\r\n            AllManagerData: [],\r\n            ProductId: '',\r\n            DefaultSelectedQuiz: null,\r\n            DefaultSelectedSummary: null,\r\n            SelectedUsers: [],\r\n            LMSSummaryData: [],\r\n            StartDate: moment().format(\"YYYY-MM-DD\"),\r\n            EndDate: moment().format(\"YYYY-MM-DD\"),\r\n            DaysList: [],\r\n            DefaultSelectedDaysList: null,\r\n            DropDownStartDate: moment().format(\"YYYY-MM-DD\"),\r\n            DropDownEndDate: moment().format(\"YYYY-MM-DD\"),\r\n            GrandTotalData: [],\r\n            GrandTotalColumns: [],\r\n\r\n            QuizColumns: [\r\n                {\r\n                    name: \"EmployeeId\",\r\n                    selector: \"EmployeeId\",\r\n                    searchable: true,\r\n\r\n                },\r\n                {\r\n                    name: \"Employee Name\",\r\n                    selector: \"UserName\",\r\n                    searchable: true,\r\n\r\n                },\r\n                {\r\n                    name: \"TL Name\",\r\n                    selector: \"TL_Name\",\r\n                    searchable: true,\r\n\r\n                },\r\n                {\r\n                    name: \"AM/DM Name\",\r\n                    selector: \"AM_Name\",\r\n                    searchable: true,\r\n\r\n                },\r\n                {\r\n                    name: \"Manager Name\",\r\n                    selector: \"Manager_Name\",\r\n                    searchable: true,\r\n\r\n                },\r\n                {\r\n                    name: \"Team Name\",\r\n                    selector: \"Team_Name\",\r\n                    searchable: true,\r\n\r\n                },\r\n\r\n            ],\r\n\r\n            QuizSummaryColumns: [\r\n                {\r\n                    name: \"Team Coaches\",\r\n                    selector: \"Reportees\",\r\n                    searchable: true,\r\n                    sortable: true,\r\n                    width: \"350px\"\r\n\r\n                },\r\n                {\r\n                    name: \"Total Agents\",\r\n                    selector: \"TotalAgents\"\r\n                },\r\n                {\r\n                    name: \"Didn't Appear\",\r\n                    selector: \"DontAppear\"\r\n                },\r\n                {\r\n                    name: \"Pass\",\r\n                    selector: \"Pass\"\r\n                },\r\n                {\r\n                    name: \"Fail\",\r\n                    selector: \"Fail\"\r\n                },\r\n                {\r\n                    name: \"Team Average % Score\",\r\n                    selector: \"Average\"\r\n                },\r\n                {\r\n                    name: \"Attendees Average % Score\",\r\n                    selector: \"AverageScoreAttendes\"\r\n                },\r\n                \r\n            ],\r\n\r\n            CourseSummaryColumns: [\r\n                {\r\n                    name: \"Team Coaches\",\r\n                    selector: \"Reportees\",\r\n                    searchable: true,\r\n                    sortable: true,\r\n                    width: \"350px\"\r\n\r\n                },\r\n                {\r\n                    name: \"Total Agents\",\r\n                    selector: \"TotalAgents\"\r\n                },\r\n                {\r\n                    name: \"Complete\",\r\n                    selector: \"Complete\"\r\n                },\r\n                {\r\n                    name: \"Pending\",\r\n                    selector: \"Pending\"\r\n                }\r\n            ],\r\n\r\n            LMSSummaryColumns: [],\r\n            QuizData: [],\r\n\r\n            ExportCourseColumns: [],\r\n            ExportCourseData: [],\r\n            ExportLMSColumns: [],\r\n            ExportLMSData: [],\r\n        };\r\n\r\n        this.LMSSummaryColumns = [\r\n            {\r\n                name: \"Team Coaches\",\r\n                selector: \"Reportees\",\r\n                width: \"350px\",\r\n                searchable: true\r\n            },\r\n            {\r\n                name: \"Total Agents\",\r\n                selector: \"TotalAgents\"\r\n            }\r\n        ]\r\n        this.DaysList = {\r\n            config:\r\n            {\r\n\r\n                data: [{ Id: \"1\", Display: \"2july to 8 july\" }, { Id: \"2\", Display: \"9 july to 15 july\" }],\r\n            }\r\n        };\r\n\r\n\r\n    }\r\n\r\n\r\n    componentWillMount() {\r\n        GetDataDirect({\r\n            root: \"Hierarchy\",\r\n            ManagerId: 75,\r\n            statename: \"Hierarchy-\" + 75,\r\n            state: true\r\n        }, function (result) {\r\n\r\n            this.setState({ AllManagerData: result });\r\n        }.bind(this));\r\n    }\r\n\r\n    //Filter Selections Start\r\n    handleQuizSelect = (QuizValue) => {\r\n        this.setState({ QuizSelectList: QuizValue });\r\n    }\r\n    handleProductId = (ProductId) => {\r\n        this.setState({ ProductId: ProductId });\r\n    }\r\n\r\n    handleSelectManager(e) {\r\n        if (e && e.SelectedSupervisors) {\r\n            this.setState({\r\n                ReportTime: new Date(),\r\n                SelectedSupervisors: e.SelectedSupervisors,\r\n                SelectedUsers: _.pluck(e.SelectedUsers, 'EmployeeId')\r\n\r\n            });\r\n        }\r\n    }\r\n\r\n    coursechange(e, props) {\r\n        var courseid = e.target.value;\r\n        this.setState({ DefaultSelectedCourse: courseid, showLoading: true });\r\n         this.LoadCourseData(courseid);\r\n    }\r\n\r\n    quizchange(e, props) {\r\n        var quizid = e.target.value;\r\n        this.setState({ DefaultSelectedQuiz: quizid, showLoading: true });\r\n        this.LoadQuizData(quizid);\r\n    }\r\n    //Filter Selections End\r\n\r\n    //Common Function\r\n    findById(obj, id) {\r\n        var result;\r\n        let that = this;\r\n        for (var p in obj) {\r\n            if (obj.UserID === id) {\r\n                return obj;\r\n            } else {\r\n                if (typeof obj[p] === 'object') {\r\n                    result = that.findById(obj[p], id);\r\n                    if (result) {\r\n                        return result;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    BindDefaultExportColumns() {\r\n        let Columns = [\r\n            {\r\n                name: \"EmployeeId\",\r\n                selector: \"EmployeeId\",\r\n                searchable: true,\r\n\r\n            },\r\n            {\r\n                name: \"Employee Name\",\r\n                selector: \"UserName\",\r\n                searchable: true,\r\n\r\n            },\r\n            {\r\n                name: \"TL Name\",\r\n                selector: \"TL_Name\",\r\n                searchable: true,\r\n\r\n            },\r\n            {\r\n                name: \"AM/DM Name\",\r\n                selector: \"AM_Name\",\r\n                searchable: true,\r\n\r\n            },\r\n            {\r\n                name: \"Manager Name\",\r\n                selector: \"Manager_Name\",\r\n                searchable: true,\r\n\r\n            },\r\n            {\r\n                name: \"Team Name\",\r\n                selector: \"Team_Name\",\r\n                searchable: true,\r\n            },\r\n\r\n        ]\r\n        return Columns;\r\n    }\r\n    BindDefaultExportData(ExportData) {\r\n\r\n        let res = [];\r\n        let that = this;\r\n        if (ExportData) {\r\n            Object.keys(ExportData).forEach(function (key) {\r\n                try {\r\n\r\n\r\n                    let AgentData = {};\r\n                    if (Array.isArray(ExportData[key])) {\r\n                        AgentData = ExportData[key][0];\r\n                    }\r\n                    else {\r\n                        AgentData = ExportData[key];\r\n                    }\r\n\r\n                    var managerId = AgentData.managerId;\r\n                    var tlId = AgentData.tlId;\r\n                    var tlName = AgentData.tlName;\r\n\r\n                    var TLdata = that.findById(that.state.AllManagerData, managerId);\r\n                    if (TLdata && TLdata.ManagerId) {\r\n                        var AMid = TLdata.ManagerId;\r\n                        var AMdata, MGRdata;\r\n\r\n                        AMdata = that.findById(that.state.AllManagerData, AMid);\r\n                        if (AMdata && AMdata.ManagerId) {\r\n                            var MGRid = AMdata.ManagerId;\r\n                            MGRdata = that.findById(that.state.AllManagerData, MGRid);\r\n                        }\r\n\r\n                        var obj = {\r\n                            EmployeeId: key.toUpperCase(),\r\n                            UserName: AgentData.userName,\r\n                            TL_Name: tlName,\r\n                            AM_Name: AMdata == undefined ? \"\" : AMdata.UserName,\r\n                            Manager_Name: MGRdata == undefined ? \"\" : MGRdata.UserName,\r\n                            Team_Name: AgentData.userGroupName,\r\n\r\n                        };\r\n\r\n                        res.push(obj);\r\n                    }\r\n                    else {\r\n                        console.log(\"ExportData[i]\", ExportData[key]);\r\n                        console.log(\"TLdata\", TLdata);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    console.error(e);\r\n                }\r\n\r\n            });\r\n            return res;\r\n\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    //Common Function\r\n\r\n\r\n    //Quiz Summary Start\r\n    handleSummaryQuiz = (QuizValue) => {\r\n\r\n        this.setState({ QuizMultiList: QuizValue, showLoading: true });\r\n        var obj = [];\r\n        for (var i = 0; i < QuizValue.length; i++) {\r\n            obj.push({\r\n                Id: QuizValue[i].value,\r\n                Display: QuizValue[i].label,\r\n            });\r\n        }\r\n\r\n        setTimeout(function () {\r\n            if (obj && obj.length > 0) {\r\n                this.LoadQuizData(obj[0].Id);\r\n                this.setState({ QuizSelectList: obj, DefaultSelectedQuiz: obj[0].Id })\r\n            }\r\n        }.bind(this), 500);\r\n\r\n    }\r\n\r\n    LoadQuizData(quizid) {\r\n        let QuizMultiList = this.state.QuizMultiList;\r\n        var data = QuizMultiList.filter(item => item.value == quizid);\r\n        var courseid = data[0].courseId;\r\n\r\n        var json = {\r\n            \"quizId\": quizid,\r\n            \"courseId\": courseid,\r\n            \"userId\": this.state.SelectedUsers.join(),\r\n            \"format\": \"summary\",\r\n            productId: this.state.ProductId\r\n        };\r\n        GetSummaryQuiz(json, function (results) {\r\n\r\n            if (results && results.data && results.data.data && results.data.data[\"total agents\"] == 0) {\r\n                toast(\"No Record Found\", { type: 'error' });\r\n            }\r\n            this.setState({ SummaryQuizData: results.data.data });\r\n            this.CalcSummaryQuizData();\r\n\r\n        }.bind(this));\r\n    }\r\n\r\n    CalcSummaryQuizData() {\r\n        let res = [];\r\n\r\n        let SummaryQuizData = this.state.SummaryQuizData.data;\r\n        let that = this;\r\n        if (SummaryQuizData) {\r\n            Object.keys(SummaryQuizData).forEach(function (key) {\r\n\r\n\r\n                let userQuizSummary = SummaryQuizData[key];\r\n                for (var i = 0; i < userQuizSummary.length; i++) {\r\n                    try {\r\n\r\n                        var TLid = userQuizSummary[i].managerId;\r\n                        let obj = [];\r\n                        res.push({\r\n                            empid: key,\r\n                            TLId: userQuizSummary[i].tlId,\r\n                            TLUserName: userQuizSummary[i].tlName,\r\n                            pass: typeof userQuizSummary[i].pass == 'undefined' ? \"DontAppear\" : userQuizSummary[i].pass,\r\n                            percentage: typeof userQuizSummary[i].percentage == 'undefined' ? 0 : userQuizSummary[i].percentage,\r\n                            //score: typeof userQuizSummary[i].score == 'undefined' ? 0 : userQuizSummary[i].score,\r\n                        });\r\n\r\n                    }\r\n                    catch (e) {\r\n                        console.error(e);\r\n                    }\r\n\r\n                }\r\n\r\n\r\n            });\r\n            console.log(\"res\", res);\r\n            let resp = [];\r\n            let respGrandTotal = [];\r\n            var TLData = _.groupBy(res, 'TLId');\r\n\r\n            Object.keys(TLData).forEach(function (key) {\r\n                try {\r\n\r\n                    let pass = _.countBy(TLData[key], function (item) {\r\n                        return item.pass == \"Yes\";\r\n                    });\r\n                    let fail = _.countBy(TLData[key], function (item) {\r\n                        return item.pass == \"No\";\r\n                    });\r\n                    let DontAppear = _.countBy(TLData[key], function (item) {\r\n                        return item.pass == \"DontAppear\";\r\n                    });\r\n                    let Appear = DontAppear.true ? TLData[key].length - DontAppear.true : TLData[key].length;\r\n\r\n                    let sum = _.reduce(TLData[key], function (s, f) {\r\n                        return s + f.percentage;\r\n                    }, 0);\r\n\r\n                    // let SumOfScore = _.reduce(TLData[key], function (s, f) {\r\n                    //     return s + f.score;\r\n                    // }, 0);\r\n\r\n                    var obj = {\r\n                        Reportees: key.toUpperCase() + \" - \" + TLData[key][0].TLUserName,\r\n                        Pass: pass.true ?? 0,\r\n                        Fail: fail.true ?? 0,\r\n                        DontAppear: DontAppear.true ?? 0,\r\n                        TotalAgents: TLData[key].length,\r\n                        Average: (sum / TLData[key].length).toFixed(1),\r\n                        AverageScoreAttendes: Appear ? (sum / Appear).toFixed(1) : (0).toFixed(1),\r\n                        GrandTotalSumPercentage: sum,\r\n\r\n                    };\r\n\r\n                    resp.push(obj);\r\n                }\r\n                catch (e) {\r\n                    console.error(e);\r\n                }\r\n            });\r\n\r\n            //debugger;\r\n            var TotalAgents = _.reduce(resp,\r\n                function (memoizer, value) {\r\n                    return memoizer + value.TotalAgents;\r\n                }, 0);\r\n            var DontAppear = _.reduce(resp,\r\n                    function (memoizer, value) {\r\n                        return memoizer + value.DontAppear;\r\n                    }, 0);  \r\n \r\n            var obj = {\r\n                Pass: _.reduce(resp,\r\n                    function (memoizer, value) {\r\n                        return memoizer + value.Pass;\r\n                    }, 0),\r\n                Fail: _.reduce(resp,\r\n                    function (memoizer, value) {\r\n                        return memoizer + value.Fail;\r\n                    }, 0),\r\n                  \r\n                DontAppear: DontAppear,\r\n                TotalAgents: TotalAgents,\r\n                Average: ((_.reduce(resp,\r\n                    function (memoizer, value) {\r\n                        return memoizer + parseFloat(value.GrandTotalSumPercentage);\r\n                    }, 0)) / (TotalAgents)).toFixed(1),\r\n                AvgScoreAttended: ((_.reduce(resp,\r\n                    function (memoizer, value) {\r\n                        return memoizer + parseFloat(value.GrandTotalSumPercentage);\r\n                    }, 0) )/ (TotalAgents-DontAppear)).toFixed(1),\r\n            }\r\n\r\n            respGrandTotal.push(obj);\r\n\r\n            this.setState({\r\n                QuizSummaryData: resp,\r\n                GrandTotalData: respGrandTotal,\r\n                CourseSummaryData: [],\r\n                QuizData: [],\r\n                LMSSummaryData: [],\r\n                ExportCourseData: [],\r\n                ExportLMSData: [], showLoading: false\r\n            });\r\n\r\n\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n\r\n    }\r\n    //Quiz Summary End\r\n\r\n\r\n\r\n    //Course Summary Start\r\n\r\n    handleSummaryCourse = (CourseValue, startdate, enddate) => {debugger;\r\n\r\n        this.setState({ CourseMultiList: CourseValue, showLoading: true });\r\n        var obj = [];\r\n        for (var i = 0; i < CourseValue.length; i++) {\r\n            obj.push({\r\n                Id: CourseValue[i].value,\r\n                Display: CourseValue[i].label,\r\n            });\r\n        }\r\n\r\n        setTimeout(function () {\r\n            if (obj && obj.length > 0) {\r\n                this.LoadCourseData(obj[0].Id, startdate, enddate);\r\n                this.setState({ CourseSelectList: obj, DefaultSelectedCourse: obj[0].Id })\r\n            }\r\n        }.bind(this), 500);\r\n\r\n    }\r\n\r\n    LoadCourseData(courseid, startdate, enddate) {\t\t\t\t\t\t\t\t\t\r\n\r\n        var json = {\r\n            \"courseId\": courseid,//coursestring.join(\",\"),\r\n            \"userId\": this.state.SelectedUsers.join(),\r\n            \"productId\": this.state.ProductId,\r\n            \"startDate\": startdate + \" 00:00:00\",\r\n            \"endDate\": enddate + \" 23:59:59\",\r\n            \"format\": \"summary\"\r\n        };\r\n         GetSummaryCourse(json, function (results) {\r\n            //debugger;\r\n            ;\r\n            if (results && results.data && results.data.data && results.data.data[\"total agents\"] == 0) {\r\n                toast(\"No Record Found\", { type: 'error' });\r\n\r\n            }\r\n            this.setState({ SummaryCourseData: results.data.data, showLoading: true });\r\n            this.renderSummaryCourseData();\r\n\r\n        }.bind(this));\r\n    }\r\n\r\n\r\n    renderSummaryCourseData() {\r\n        //debugger;\r\n\r\n        let res = [];\r\n\r\n        let SummaryCourseData = this.state.SummaryCourseData.data;\r\n        let that = this;\r\n\r\n        if (SummaryCourseData) {\r\n            Object.keys(SummaryCourseData).forEach(function (key) {\r\n\r\n                let userCourseSummary = SummaryCourseData[key];\r\n                for (var i = 0; i < userCourseSummary.length; i++) {\r\n                    try {\r\n                        res.push({\r\n                            empid: key,\r\n                            TLId: userCourseSummary[i].tlId,\r\n                            TLUserName: userCourseSummary[i].tlName,\r\n                            attendance: typeof userCourseSummary[i].attendance == 'undefined' ? \"No\" : userCourseSummary[i].attendance,\r\n                        });\r\n                    }\r\n                    catch (e) {\r\n                        console.error(e);\r\n                    }\r\n                }\r\n            });\r\n            let resp = [];\r\n            let respGrandTotal = [];\r\n\r\n            var TLdata = _.groupBy(res, 'TLId');\r\n\r\n            Object.keys(TLdata).forEach(function (key) {\r\n                try {\r\n                    let Complete = _.countBy(TLdata[key], function (item) {\r\n                        return item.attendance == \"Yes\";\r\n                    });\r\n\r\n                    var obj = {\r\n                        Reportees: key.toUpperCase() + \" - \" + TLdata[key][0].TLUserName,\r\n                        Complete: Complete.true ?? 0,\r\n                        Pending: Complete.false ?? 0,\r\n                        TotalAgents: TLdata[key].length,\r\n                    };\r\n\r\n                    resp.push(obj);\r\n                }\r\n                catch (e) {\r\n                    console.error(e);\r\n                }\r\n            });\r\n\r\n            var obj = {\r\n                Complete: _.reduce(resp,\r\n                    function (memoizer, value) {\r\n                        return memoizer + value.Complete;\r\n                    }, 0),\r\n                Pending: _.reduce(resp,\r\n                    function (memoizer, value) {\r\n                        return memoizer + value.Pending;\r\n                    }, 0),\r\n                TotalAgents: _.reduce(resp,\r\n                    function (memoizer, value) {\r\n                        return memoizer + value.TotalAgents;\r\n                    }, 0),\r\n            }\r\n\r\n            respGrandTotal.push(obj);\r\n\r\n\r\n\r\n            this.setState({\r\n                CourseSummaryData: resp,\r\n                GrandTotalData: respGrandTotal,\r\n                QuizSummaryData: [],\r\n                QuizData: [],\r\n                LMSSummaryData: [],\r\n                ExportCourseData: [],\r\n                ExportLMSData: [], showLoading: false\r\n            });\r\n\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n\r\n    }\r\n\r\n    //Course Summary End\r\n\r\n    //LMS Summary Start\r\n    handleSummaryLMS = (startdate, enddate) => {\r\n\r\n        let DaysList = this.enumerateWeeksBetweenDates(startdate, enddate);\r\n        this.setState({ DaysList: DaysList, DefaultSelectedDaysList: DaysList[0].Id, StartDate: startdate, EndDate: enddate, showLoading: true });\r\n\r\n        setTimeout(function () {\r\n            if (DaysList && DaysList.length > 0) {\r\n\r\n                var str = DaysList[0].Id;\r\n                var index = DaysList[0].Id.indexOf(\"_\");\r\n                var startdate = str.substr(0, index);\r\n                var enddate = str.substr(index + 1);\r\n                this.setState({ DropDownStartDate: startdate, DropDownEndDate: enddate });\r\n\r\n                this.LoadLMSData(startdate, enddate);\r\n            }\r\n        }.bind(this), 500);\r\n\r\n    }\r\n\r\n\r\n\r\n    renderSummaryLMSData() {\r\n        let res = [];\r\n\r\n        let SummaryLMSData = this.state.SummaryLMSData;\r\n        let that = this;\r\n\r\n        if (SummaryLMSData) {\r\n            let AllDates = this.enumerateDaysBetweenDates(this.state.DropDownStartDate, this.state.DropDownEndDate);\r\n\r\n            Object.keys(SummaryLMSData).forEach(function (key) {\r\n                try {\r\n\r\n                    let userLMSSummary = SummaryLMSData[key];\r\n                    if (userLMSSummary && userLMSSummary.managerId) {\r\n                        var TLid = userLMSSummary.managerId;\r\n\r\n                        res.push({\r\n                            empid: key,\r\n                            TLId: userLMSSummary.tlId,\r\n                            TLUserName: userLMSSummary.tlName,\r\n                            dates: typeof userLMSSummary.dates == 'undefined' ? \"-\" : userLMSSummary.dates,\r\n                        });\r\n\r\n                    }\r\n                } catch (e) {\r\n                    console.error(e);\r\n                }\r\n            });\r\n            let resp = [];\r\n            let respGrandTotal = [];\r\n\r\n\r\n            var TLData = _.groupBy(res, 'TLId');\r\n            let LMSSummaryColumns = Object.assign([], this.LMSSummaryColumns);\r\n\r\n            AllDates.forEach(element => {\r\n                LMSSummaryColumns.push({\r\n                    \"name\": element,\r\n                    \"selector\": element.replace(\"-\", \"\").replace(\"-\", \"\")\r\n                });\r\n            });\r\n\r\n            Object.keys(TLData).forEach(function (key) {\r\n\r\n                var list = TLData[key];\r\n                let dates = _.pluck(list, 'dates');\r\n                var obj = {\r\n                    Reportees: key.toUpperCase() + \" - \" + TLData[key][0].TLUserName,\r\n                    TotalAgents: TLData[key].length,\r\n                };\r\n\r\n                AllDates.forEach(element => {\r\n                    var result = _.countBy(list, function (item) {\r\n                        return item.dates.indexOf(element) > -1;\r\n                    });\r\n\r\n                    obj[element.replace(\"-\", \"\").replace(\"-\", \"\")] = result.true ?? 0\r\n                });\r\n                resp.push(obj);\r\n            });\r\n\r\n            var obj = {\r\n                TotalAgents: _.reduce(resp,\r\n                    function (memoizer, value) {\r\n                        return memoizer + value.TotalAgents;\r\n                    }, 0)\r\n                }\r\n                AllDates.forEach(element => {\r\n                    var col = element.replace(\"-\", \"\").replace(\"-\", \"\");\r\n                    obj[col] = _.reduce(resp,\r\n                    function (memoizer, value) {\r\n                        return memoizer + value[col];\r\n                    }, 0);         \r\n                });\r\n\r\n                respGrandTotal.push(obj);\r\n\r\n            this.setState({\r\n                LMSSummaryColumns: LMSSummaryColumns,\r\n                LMSSummaryData: resp,\r\n                GrandTotalData: respGrandTotal,\r\n                GrandTotalColumns: LMSSummaryColumns,\r\n                CourseSummaryData: [],\r\n                QuizSummaryData: [],\r\n                QuizData: [],\r\n                ExportCourseData: [],\r\n                ExportLMSData: [], showLoading: false\r\n            });\r\n\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    enumerateDaysBetweenDates(startDate, endDate) {\r\n\r\n        var dates = [];\r\n        dates.push(startDate);\r\n\r\n\r\n        var currDate = moment(startDate).startOf('day');\r\n        var lastDate = moment(endDate).startOf('day');\r\n        while (currDate.add(1, 'days').diff(lastDate) < 0) {\r\n            dates.push(currDate.format('YYYY-MM-DD'));\r\n        }\r\n\r\n        dates.push(endDate);\r\n\r\n        return dates;\r\n    }\r\n\r\n    enumerateWeeksBetweenDates(startDate, endDate) {\r\n\r\n        var dates = [];\r\n        var currDate = moment(startDate).startOf('day');\r\n        var lastDate = moment(endDate).startOf('day');\r\n\r\n        while (currDate.add(6, 'days').diff(lastDate) < 0) {\r\n            dates.push({\r\n                Id: startDate + '_' + currDate.format('YYYY-MM-DD'),\r\n                Display: startDate + ' to ' + currDate.format('YYYY-MM-DD'),\r\n            });\r\n            var startDate = currDate.add(1, 'days').format('YYYY-MM-DD');\r\n        }\r\n        dates.push({\r\n            Id: startDate + '_' + endDate,\r\n            Display: startDate + ' to ' + endDate,\r\n        });\r\n        return dates;\r\n    }\r\n\r\n    dayslistchange(e, props) {\r\n        var str = e.target.value;\r\n        var index = str.indexOf(\"_\");\r\n        var startdate = str.substr(0, index);\r\n        var enddate = str.substr(index + 1);\r\n        this.setState({ DefaultSelectedDaysList: str, DropDownEndDate: enddate, DropDownStartDate: startdate, LMSSummaryData: [], showLoading: true  });\r\n\r\n        setTimeout(function () {\r\n            this.LoadLMSData(startdate, enddate);\r\n        }.bind(this), 500);\r\n    }\r\n\r\n    LoadLMSData(startdate, enddate) {\r\n\r\n        var json = {\r\n            \"startDate\": startdate + \" 00:00:00\",\r\n            \"userId\": this.state.SelectedUsers.join(),\r\n            \"endDate\": enddate + \" 23:59:59\",\r\n        };\r\n        GetSummaryLMS(json, function (results) {////debugger;\r\n            // if (results && results.data && results.data.data && results.data.data[\"total agents\"] == 0) {\r\n            //     toast(\"No Record Found\", { type: 'error' });\r\n\r\n            // }\r\n\r\n            this.setState({ SummaryLMSData: results.data.data });\r\n            this.renderSummaryLMSData();\r\n\r\n        }.bind(this));\r\n\r\n    }\r\n    //LMS Summary End\r\n\r\n    //Quiz Export Start\r\n\r\n    handleExportQuiz = (QuizValue) => {\r\n        let QuizColumns = this.state.QuizColumns;\r\n        var quiz = QuizValue;\r\n        var quizid = quiz.map(function (val) {\r\n\r\n            QuizColumns.push({\r\n                \"name\": val.label,\r\n                \"selector\": val.value.toString(),\r\n            })\r\n            return val.value;\r\n        });\r\n\r\n        this.setState({ showLoading: true });\r\n\r\n        var selectedquiz = quizid.join(\",\");\r\n\r\n        var courseid = quiz.map(function (val) {\r\n            return val.courseId;\r\n        });\r\n        var selectedcourse = courseid.join(\",\");\r\n\r\n        var json = {\r\n            \"quizId\": selectedquiz,\r\n            \"courseId\": selectedcourse,\r\n            \"userId\": this.state.SelectedUsers.length == 0 ? null : this.state.SelectedUsers.join(),\r\n            \"productId\": this.state.ProductId,\r\n            \"format\": \"export\"\r\n        };\r\n        GetExportQuiz(json, function (results) {\r\n\r\n            this.setState({ ExportQuizList: results.data.data, QuizMultiList: QuizValue, QuizColumns: QuizColumns },\r\n                function () {\r\n                    this.renderExportQuizData();\r\n                }.bind(this));\r\n\r\n        }.bind(this));\r\n\r\n    }\r\n\r\n    renderExportQuizData() {\r\n\r\n\r\n        let res = [];\r\n        let ExportQuizList = this.state.ExportQuizList;\r\n        let QuizMultiList = this.state.QuizMultiList;\r\n        let that = this;\r\n\r\n        if (ExportQuizList) {\r\n            Object.keys(ExportQuizList).forEach(function (key) {\r\n\r\n                try {\r\n                    var TLid = ExportQuizList[key][0].managerId;\r\n                    var TLdata = that.findById(that.state.AllManagerData, TLid);\r\n                    if (TLdata && TLdata.ManagerId) {\r\n                        var AMid = TLdata.ManagerId;\r\n                        var AMdata, MGRdata;\r\n\r\n                        AMdata = that.findById(that.state.AllManagerData, AMid);\r\n                        if (AMdata && AMdata.ManagerId) {\r\n                            var MGRid = AMdata.ManagerId;\r\n                            MGRdata = that.findById(that.state.AllManagerData, MGRid);\r\n                        }\r\n                        var obj = {\r\n                            EmployeeId: key.toUpperCase(),\r\n                            UserName: ExportQuizList[key][0].userName,\r\n                            TL_Name: TLdata == undefined ? \"\" : TLdata.UserName,\r\n                            AM_Name: AMdata == undefined ? \"\" : AMdata.UserName,\r\n                            Manager_Name: MGRdata == undefined ? \"\" : MGRdata.UserName,\r\n                            Team_Name: ExportQuizList[key][0].userGroupName,\r\n                            Quiz: []\r\n                        };\r\n\r\n\r\n                        QuizMultiList.map(function (val) {\r\n                            obj[val.value.toString()] = '-';\r\n                        });\r\n\r\n                        let userQuiz = ExportQuizList[key];\r\n                        for (var i = 0; i < userQuiz.length; i++) {\r\n                            if (userQuiz[i].quizId) {\r\n                                //obj[userQuiz[i].quizId] = userQuiz[i].score\r\n                                obj[userQuiz[i].quizId] = userQuiz[i].percentage\r\n\r\n                            }\r\n                        }\r\n\r\n                        res.push(obj);\r\n                    }\r\n                    else {\r\n                        console.log(\"ExportQuizList[i]\", ExportQuizList[key][0]);\r\n                        console.log(\"TLdata\", TLdata);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    console.error(e);\r\n                }\r\n\r\n            });\r\n            this.setState({\r\n                QuizData: res,\r\n                CourseSummaryData: [],\r\n                QuizSummaryData: [],\r\n                LMSSummaryData: [],\r\n                ExportCourseData: [],\r\n                ExportLMSData: [], showLoading: false\r\n            });\r\n\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    //Quiz Export End\r\n\r\n    //LMS Export Start\r\n    handleExportLMS = (startdate, enddate) => {\r\n\r\n        let DaysList = this.enumerateWeeksBetweenDates(startdate, enddate);\r\n        this.setState({ DaysList: DaysList, DefaultSelectedDaysList: DaysList[0].Id, StartDate: startdate, EndDate: enddate, showLoading: true });\r\n\r\n        setTimeout(function () {\r\n            if (DaysList && DaysList.length > 0) {\r\n\r\n                var str = DaysList[0].Id;\r\n                var index = DaysList[0].Id.indexOf(\"_\");\r\n                var startdate = str.substr(0, index);\r\n                var enddate = str.substr(index + 1);\r\n                this.setState({ DropDownStartDate: startdate, DropDownEndDate: enddate });\r\n\r\n                this.LoadLMSExportData(startdate, enddate);\r\n            }\r\n        }.bind(this), 500);\r\n\r\n    }\r\n\r\n    renderExportLMSData(SummaryLMSData) {\r\n\r\n        let res = [];\r\n        let resp = [];\r\n\r\n        let that = this;\r\n\r\n        if (SummaryLMSData) {\r\n\r\n            let res = that.BindDefaultExportData(SummaryLMSData);\r\n\r\n\r\n            let AllDates = this.enumerateDaysBetweenDates(this.state.DropDownStartDate, this.state.DropDownEndDate);\r\n\r\n            res.forEach(element => {\r\n                ////debugger;\r\n                var list = SummaryLMSData[element.EmployeeId];\r\n                if (list == undefined) {\r\n                    list = SummaryLMSData[element.EmployeeId.toLowerCase()];\r\n                }\r\n                let dates = list.dates;\r\n                var obj = element;\r\n\r\n                AllDates.forEach(element => {\r\n                    ////debugger;\r\n                    var result = _.countBy(dates, function (item) {\r\n                        return item.indexOf(element) > -1;\r\n                    });\r\n\r\n                    obj[element.replace(\"-\", \"\").replace(\"-\", \"\")] = result.true > 0 ? \"Yes\" : \"No\";\r\n                });\r\n                resp.push(obj);\r\n\r\n\r\n            });\r\n\r\n\r\n\r\n            let ExportLMSColumns = this.BindDefaultExportColumns()\r\n\r\n            AllDates.forEach(element => {\r\n                ExportLMSColumns.push({\r\n                    \"name\": element,\r\n                    \"selector\": element.replace(\"-\", \"\").replace(\"-\", \"\")\r\n                });\r\n            });\r\n\r\n\r\n\r\n            this.setState({\r\n                ExportLMSColumns: ExportLMSColumns,\r\n                ExportLMSData: resp,\r\n                CourseSummaryData: [],\r\n                QuizSummaryData: [],\r\n                LMSSummaryData: [],\r\n                QuizData: [],\r\n                ExportCourseData: [],\r\n                showLoading: false\r\n\r\n            });\r\n\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    ExportLMSdayslistchange(e, props) {\r\n        var str = e.target.value;\r\n        var index = str.indexOf(\"_\");\r\n        var startdate = str.substr(0, index);\r\n        var enddate = str.substr(index + 1);\r\n        this.setState({ DefaultSelectedDaysList: str, DropDownEndDate: enddate, DropDownStartDate: startdate, LMSSummaryData: [] });\r\n\r\n        setTimeout(function () {\r\n            this.LoadLMSExportData(startdate, enddate);\r\n        }.bind(this), 500);\r\n    }\r\n\r\n    LoadLMSExportData(startdate, enddate) {\r\n        //debugger\r\n        var json = {\r\n            \"startDate\": startdate + \" 00:00:00\",\r\n            \"userId\": this.state.SelectedUsers.join(),\r\n            \"endDate\": enddate + \" 23:59:59\",\r\n        };\r\n        GetSummaryLMS(json, function (results) {//////debugger;\r\n            // if (results && results.data && results.data.data && results.data.data[\"total agents\"] == 0) {\r\n            //     toast(\"No Record Found\", { type: 'error' });\r\n\r\n            // }\r\n\r\n\r\n            this.renderExportLMSData(results.data.data);\r\n\r\n        }.bind(this));\r\n\r\n    }\r\n\r\n\r\n    //LMS Export End\r\n\r\n\r\n    // Course Export Start\r\n\r\n    handleExportCourse = (CourseValue, startdate, enddate) => {\r\n        //debugger;\r\n        setTimeout(function () {\r\n            this.setState({ CourseMultiList: CourseValue, showLoading: true });\r\n            this.LoadCourseExportData(CourseValue, startdate, enddate);\r\n        }\r\n            .bind(this), 500);\r\n\r\n    }\r\n\r\n    LoadCourseExportData = (CourseValue, startdate, enddate) => {\r\n        //debugger;\r\n        // var courseid = CourseValue;\r\n        var coursestring = CourseValue.map(function (val) {\r\n            return val.value;\r\n        });\r\n        var json = {\r\n            \"courseId\": coursestring.join(\",\"),//courseid,\r\n            \"userId\": this.state.SelectedUsers.join(),\r\n            \"productId\": this.state.ProductId,\r\n            \"startDate\": startdate + \" 00:00:00\",\r\n            \"endDate\": enddate + \" 23:59:59\",\r\n            \"format\": \"summary\"\r\n        };\r\n        GetSummaryCourse(json, function (results) {\r\n            ;\r\n            if (results && results.data && results.data.data && results.data.data[\"total agents\"] == 0) {\r\n                toast(\"No Record Found\", { type: 'error' });\r\n\r\n            }\r\n            this.renderExportCourseData(results.data.data, CourseValue);\r\n\r\n        }.bind(this));\r\n\r\n    }\r\n\r\n    renderExportCourseData(SummaryCourseData, CourseValue) {\r\n        //debugger;\r\n\r\n        let res = [];\r\n        let resp = [];\r\n        let that = this;\r\n\r\n        if (SummaryCourseData) {\r\n            let res = that.BindDefaultExportData(SummaryCourseData.data);\r\n            let AllCourse = CourseValue;\r\n\r\n            res.forEach(element => {\r\n\r\n                try {\r\n                    var list = SummaryCourseData.data[element.EmployeeId];\r\n                    if (list == undefined) {\r\n                        list = SummaryCourseData.data[element.EmployeeId.toLowerCase()];\r\n                    }\r\n\r\n                    var obj = element;\r\n                    AllCourse.forEach(item => {\r\n\r\n                        let Course = item.value;\r\n                        if (Course) {\r\n                            let Complete = _.countBy(list, function (j) {\r\n                                return j.courseId == Course;\r\n                            });\r\n                            obj[item.value.toString()] = Complete.true > 0 ? \"Yes\" : \"No\";\r\n                        }\r\n                        else {\r\n                            obj[item.value.toString()] = \"No\";\r\n                        }\r\n\r\n                    });\r\n                    resp.push(obj);\r\n\r\n\r\n\r\n\r\n                }\r\n                catch (e) { }\r\n\r\n            });\r\n\r\n            let ExportCourseColumns = this.BindDefaultExportColumns()\r\n            //debugger;\r\n            AllCourse.forEach(element => {\r\n                ExportCourseColumns.push({\r\n                    \"name\": element.label,\r\n                    \"selector\": element.value.toString(),\r\n                    searchable: true\r\n                });\r\n            });\r\n\r\n\r\n\r\n            this.setState({\r\n                ExportCourseColumns: ExportCourseColumns,\r\n                ExportCourseData: resp,\r\n                CourseSummaryData: [],\r\n                LMSSummaryData: [],\r\n                QuizSummaryData: [],\r\n                QuizData: [],\r\n                ExportLMSData: [],\r\n                showLoading: false\r\n\r\n            });\r\n\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    // Course Exprt End\r\n\r\n\r\n\r\n    renderQuizSummary() {\r\n\r\n        if (this.state.QuizSummaryData && this.state.QuizSummaryData.length > 0) {\r\n            return <Row>\r\n                <Col md=\"12\">\r\n                    <Card>\r\n                        <CardHeader>\r\n                            <Row>\r\n                                <Col md={9}>\r\n                                    <CardTitle tag=\"h5\">Quiz Summary</CardTitle>\r\n                                </Col>\r\n                                <Col md={3}>\r\n                                    <Form.Group controlId=\"quiz_dropdown\">\r\n                                        <DropDown firstoption=\"Select Quiz\"\r\n                                            items={this.state.QuizSelectList}\r\n                                            value={this.state.DefaultSelectedQuiz}\r\n                                            onChange={this.quizchange.bind(this)}>\r\n                                        </DropDown>\r\n                                    </Form.Group>\r\n                                </Col>\r\n\r\n                            </Row>\r\n                        </CardHeader>\r\n                        <CardBody>\r\n                            {this.renderQuizGrandTotalData()}\r\n                            <DataTable columns={this.state.QuizSummaryColumns} data={this.state.QuizSummaryData} />\r\n\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        }\r\n\r\n        return null;\r\n\r\n    }\r\n\r\n    renderQuizExport() {\r\n\r\n        if (this.state.QuizData && this.state.QuizData.length > 0) {\r\n            return <Row>\r\n                <Col md=\"12\">\r\n                    <Card>\r\n                        <CardHeader>\r\n\r\n                            <Row>\r\n                                <Col md={12}>\r\n                                    <CardTitle tag=\"h6\">Quiz Data</CardTitle>\r\n                                </Col>\r\n                            </Row>\r\n                        </CardHeader>\r\n                        <CardBody>\r\n                            <DataTable columns={this.state.QuizColumns} data={this.state.QuizData} />\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        }\r\n\r\n        return null;\r\n\r\n    }\r\n\r\n    renderLMSSummary() {\r\n\r\n        if (this.state.LMSSummaryData && this.state.LMSSummaryData.length > 0) {\r\n            return <Row>\r\n                <Col md=\"12\">\r\n                    <Card>\r\n                        <CardHeader>\r\n                            <Row>\r\n                                <Col md={9}>\r\n                                    <CardTitle tag=\"h5\">LMS Summary</CardTitle>\r\n                                </Col>\r\n                                <Col md={3}>\r\n                                    <Form.Group controlId=\"days_dropdown\">\r\n                                        <DropDown firstoption=\"Select Days\"\r\n                                            items={this.state.DaysList}\r\n                                            value={this.state.DefaultSelectedDaysList}\r\n                                            onChange={this.dayslistchange.bind(this)}\r\n                                        >\r\n                                        </DropDown>\r\n                                    </Form.Group>\r\n                                </Col>\r\n                            </Row>\r\n                        </CardHeader>\r\n                        <CardBody>\r\n                            {this.renderLMSGrandTotalData()}\r\n                            <DataTable columns={this.state.LMSSummaryColumns} data={this.state.LMSSummaryData} />\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        }\r\n\r\n        return null;\r\n\r\n    }\r\n\r\n    renderCourseSummary() {\r\n\r\n        if (this.state.CourseSummaryData && this.state.CourseSummaryData.length > 0) {\r\n            return <Row>\r\n                <Col md=\"12\">\r\n                    <Card>\r\n                        <CardHeader>\r\n                            <Row>\r\n                                <Col md={9}>\r\n                                    <CardTitle tag=\"h6\">Course Summary</CardTitle>\r\n                                </Col>\r\n                                <Col md={3}>\r\n                                    <Form.Group controlId=\"course_dropdown\">\r\n                                        <DropDown firstoption=\"Select Course\"\r\n                                            items={this.state.CourseSelectList}\r\n                                            value={this.state.DefaultSelectedCourse}\r\n                                            onChange={this.coursechange.bind(this)}>\r\n                                        </DropDown>\r\n                                    </Form.Group>\r\n                                </Col>\r\n                            </Row>\r\n                        </CardHeader>\r\n                        <CardBody>\r\n                            {this.renderCourseGrandTotalData()}\r\n                            <DataTable columns={this.state.CourseSummaryColumns} data={this.state.CourseSummaryData} />\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        }\r\n\r\n        return null;\r\n\r\n    }\r\n\r\n    renderCourseExport() {\r\n\r\n        if (this.state.ExportCourseData && this.state.ExportCourseData.length > 0) {\r\n            return <Row>\r\n                <Col md=\"12\">\r\n                    <Card>\r\n                        <CardHeader>\r\n                            <Row>\r\n                                <Col md={12}>\r\n                                    <CardTitle tag=\"h6\">Course Export</CardTitle>\r\n                                </Col>\r\n                            </Row>\r\n                        </CardHeader>\r\n                        <CardBody>\r\n                            <DataTable columns={this.state.ExportCourseColumns} data={this.state.ExportCourseData} />\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        }\r\n\r\n        return null;\r\n\r\n    }\r\n\r\n    renderLMSExport() {\r\n\r\n        if (this.state.ExportLMSData && this.state.ExportLMSData.length > 0) {\r\n            return <Row>\r\n                <Col md=\"12\">\r\n                    <Card>\r\n                        <CardHeader>\r\n                            <Row>\r\n                                <Col md={9}>\r\n                                    <CardTitle tag=\"h5\">LMS Export Data</CardTitle>\r\n                                </Col>\r\n                                <Col md={3}>\r\n                                    <Form.Group controlId=\"days_dropdown\">\r\n                                        <DropDown firstoption=\"Select Days\"\r\n                                            items={this.state.DaysList}\r\n                                            value={this.state.DefaultSelectedDaysList}\r\n                                            onChange={this.ExportLMSdayslistchange.bind(this)}\r\n                                        >\r\n                                        </DropDown>\r\n                                    </Form.Group>\r\n                                </Col>\r\n                            </Row>\r\n                        </CardHeader>\r\n                        <CardBody>\r\n                            <DataTable columns={this.state.ExportLMSColumns} data={this.state.ExportLMSData} />\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        }\r\n\r\n        return null;\r\n\r\n    }\r\n\r\n    renderCourseGrandTotalData() {\r\n        let tr = [];\r\n        let th = [];\r\n        let GrandTotalData = this.state.GrandTotalData;\r\n        if (GrandTotalData && GrandTotalData.length > 0) {\r\n            GrandTotalData.forEach(element => {\r\n                tr.push(<tr>\r\n                    <td>Grand Total</td>\r\n                    <td>{element.TotalAgents}</td>\r\n                    <td>{element.Complete}</td>\r\n                    <td>{element.Pending}</td>\r\n                </tr>)\r\n            });\r\n\r\n            return <Table responsive>\r\n                <thead className=\"text-primary\">\r\n                    <tr>\r\n                        <th>Grand Total</th>\r\n                        <th>Total Agents</th>\r\n                        <th>Complete</th>\r\n                        <th>Pending</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {tr}\r\n                </tbody>\r\n            </Table>\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    renderQuizGrandTotalData() {\r\n        debugger;\r\n        let tr = [];\r\n        let th = [];\r\n        let GrandTotalData = this.state.GrandTotalData;\r\n        if (GrandTotalData && GrandTotalData.length > 0) {\r\n            GrandTotalData.forEach(element => {\r\n                tr.push(<tr>\r\n                    <td>Grand Total</td>\r\n                    <td>{element.TotalAgents}</td>\r\n                    <td>{element.DontAppear}</td>\r\n                    <td>{element.Pass}</td>\r\n                    <td>{element.Fail}</td>\r\n                    <td>{element.Average}</td>\r\n                    <td>{element.AvgScoreAttended}</td>\r\n                    \r\n                </tr>)\r\n            });\r\n\r\n            return <Table responsive>\r\n                <thead className=\"text-primary\">\r\n                    <tr>\r\n                        <th>Grand Total</th>\r\n                        <th>Total Agents</th>\r\n                        <th>Didn't Appear</th>\r\n                        <th>Pass</th>\r\n                        <th>Fail</th>\r\n                        <th>Team Average % Score</th>\r\n                        <th>Attendees Average % Score</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {tr}\r\n                </tbody>\r\n            </Table>\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    renderLMSGrandTotalData() {debugger;\r\n        let tr = [];\r\n        let th = [];\r\n        let GrandTotalData = this.state.GrandTotalData;\r\n        let GrandTotalColumns = this.state.GrandTotalColumns.filter(task => task.selector !== 'Reportees');\r\n\r\n        if (GrandTotalData && GrandTotalData.length > 0) {\r\n\r\n            let th = GrandTotalColumns.map((item) => (\r\n                  <th>{item.name}</th>\r\n            ));\r\n\r\n            let tr = GrandTotalColumns.map((item) => (\r\n                <td>{GrandTotalData[0][item.selector]}</td>\r\n            ));\r\n               \r\n                 return <Table responsive>\r\n                <thead className=\"text-primary\">                    \r\n                    <tr>\r\n                        <th>GrandTotal</th>\r\n                        {th}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td>GrandTotal</td>\r\n                        {tr}\r\n                    </tr>                    \r\n                </tbody>\r\n            </Table>\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        //const columns = this.columnlist;\r\n        //const columns = this.fnDatatableCol();\r\n        const moreinfocolumns = this.moreinfolist;\r\n        const { items, PageTitle, MoodleReport, showAlert, AlertMsg, AlertVarient, ReportTime, MoreInfoData, showLoading } = this.state;\r\n        console.log(\"CourseData\", this.state.CourseData);\r\n        //console.log(\"columns\", columns);\r\n        let selectedLeads = [];\r\n\r\n\r\n        return (\r\n            <>\r\n                <div className=\"content\">\r\n                    <Loading show={showLoading} />\r\n                    <ToastContainer />\r\n                    <ManagerHierarchy\r\n                        onExportQuiz={this.handleExportQuiz.bind(this)}\r\n                        onExportLMS={this.handleExportLMS.bind(this)}\r\n                        onExportCourse={this.handleExportCourse.bind(this)}\r\n                        //onQuizValue={this.handleQuizSelect.bind(this)}\r\n                        handleSelectManager={this.handleSelectManager.bind(this)} value={/UserID/g}\r\n                        onSummaryQuiz={this.handleSummaryQuiz.bind(this)}\r\n                        onSummaryCourse={this.handleSummaryCourse.bind(this)}\r\n                        onSummaryLMS={this.handleSummaryLMS.bind(this)}\r\n                        onProductId={this.handleProductId.bind(this)}\r\n                    >\r\n                    </ManagerHierarchy>\r\n                    {this.renderQuizSummary()}\r\n                    {this.renderCourseSummary()}\r\n                    {this.renderLMSSummary()}\r\n                    {this.renderQuizExport()}\r\n                    {this.renderLMSExport()}\r\n                    {this.renderCourseExport()}\r\n\r\n\r\n\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        CommonData: state.CommonData\r\n    };\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    {\r\n        GetCommonData,\r\n        GetCommonspData,\r\n        GetMySqlData,\r\n        GetDataDirect,\r\n\r\n    }\r\n)(MoodleReport);","\r\nimport React from \"react\";\r\nimport { Alert } from 'react-bootstrap';\r\n\r\n\r\nclass AlertBox extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            show: this.props.show\r\n        }\r\n    }\r\n    componentDidUpdate() {\r\n\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        this.setState({ show: nextProps.show });\r\n        if (nextProps.show) {\r\n            setTimeout(function () {\r\n                this.setState({ show: false });\r\n            }.bind(this), 5000);\r\n        }\r\n    }\r\n    render() {\r\n        if (this.state.show) {\r\n            return (\r\n                <Alert variant={this.props.variant}>\r\n                    {this.props.body}\r\n                </Alert>\r\n            );\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nexport default AlertBox;\r\n","import axios from \"axios\";\nimport config from \"../../config.jsx\";\nimport constants from \"../../Constants/Constants.jsx\";\n\nconst GetCommonData_fetched = Todos => {\n\n  if (Todos.dataToSend.state && Todos.dataToSend.statename) {\n    localStorage.setItem(Todos.dataToSend.statename, JSON.stringify(Todos.data));\n  }\n\n  return {\n    type: constants.GET_COMMON_SUCCESS,\n    payload: Todos.data,\n    root: Todos.dataToSend.root\n  };\n};\n\nconst GetCommonData_fetch_error = error => {\n  return {\n    type: constants.GET_COMMON_FAIL,\n    payload: error\n  };\n};\n\nexport const GetMySqlData = (dataToSend,cb) => {\n\n  if (dataToSend.data != null || dataToSend.data != undefined) {\n    return function (dispatch, getState) {\n      dispatch(GetCommonData_fetched({ data: dataToSend.data, dataToSend: dataToSend }));\n    };\n  }\n  try {\n    if ((dataToSend.state && localStorage.getItem(dataToSend.statename)) || localStorage.getItem(dataToSend.statename)) {\n\n      return function (dispatch, getState) {\n        let data = JSON.parse(localStorage.getItem(dataToSend.statename))\n        dispatch(GetCommonData_fetched({ data: data, dataToSend: dataToSend }));\n      }\n    }\n  }\n  catch (e) {\n\n  }\n\n\n  return function (dispatch, getState) {\n    axios\n      .get(config.api.base_url + \"/mydb/list/\", {\n        params: dataToSend\n      })\n      .then(data => {\n        if (dataToSend.state && dataToSend.statename) {\n          localStorage.setItem(dataToSend.statename, JSON.stringify(data.data.data));\n        }\n        if (cb) {\n          cb(data);\n        }\n        dispatch(GetCommonData_fetched({ data: data.data.data[0], dataToSend: dataToSend }));\n      })\n      .catch(error => {\n        dispatch(GetCommonData_fetch_error(error, dataToSend));\n      });\n  };\n};\n\n\n\n\nconst InsertData_fetched = Todos => {\n\n  return {\n    type: constants.INSERT_COMMON_SUCCESS,\n    payload: Todos.data\n  };\n};\n\nconst InsertData_fetch_error = error => {\n  return {\n    type: constants.INSERT_COMMON_FAIL,\n    payload: error\n  };\n};\n\nexport const InsertData = (dataToSend, cb) => {\n  return function (dispatch, getState) {\n    axios\n      .post(config.api.base_url + \"/mydb/insert/\", {\n        data: dataToSend\n      })\n      .then(data => {\n        if (cb) {\n          cb(data);\n        }\n        dispatch(InsertData_fetched({ data: data.data }));\n      })\n      .catch(error => {\n        dispatch(InsertData_fetch_error(error));\n      });\n  };\n};\n\n\nconst UpdateData_fetched = Todos => {\n\n  return {\n    type: constants.UPDATE_COMMON_SUCCESS,\n    payload: Todos.data\n  };\n};\n\nconst UpdateData_fetch_error = error => {\n  return {\n    type: constants.UPDATE_COMMON_FAIL,\n    payload: error\n  };\n};\n\nexport const UpdateData = (dataToSend, cb) => {\n\n  return function (dispatch, getState) {\n    axios\n      .post(config.api.base_url + \"/mydb/update/\", {\n        data: dataToSend\n      })\n      .then(data => {\n        if (cb) {\n          cb(data);\n        }\n        dispatch(UpdateData_fetched({ data: data.data }));\n      })\n      .catch(error => {\n        dispatch(UpdateData_fetch_error(error));\n      });\n  };\n};\n\n\n\n\nexport const GetDataDirect = (dataToSend, cb) => {\n\n  try {\n    if ((dataToSend.state && localStorage.getItem(dataToSend.statename)) || localStorage.getItem(dataToSend.statename)) {\n\n      let data = JSON.parse(localStorage.getItem(dataToSend.statename));\n      cb(data);\n      return;\n    }\n  }\n  catch (e) {\n\n  }\n  //return function (dispatch, getState) {\n  axios\n    .get(config.api.base_url + \"/mydb/list/\", {\n      params: dataToSend\n    })\n    .then(data => {\n      if (dataToSend.state && dataToSend.statename) {\n        localStorage.setItem(dataToSend.statename, JSON.stringify(data.data.data));\n      }\n      cb(data.data.data);\n\n      //dispatch(GetCommonData_fetched({ data: data.data.data[0], dataToSend: dataToSend }));\n    })\n    .catch(error => {\n      //dispatch(GetCommonData_fetch_error(error, dataToSend));\n    });\n  //};\n\n};\n\nexport const GetRealTimeAgentData = (manager, context, cb) => {\n\n  let url = config.api.realtimeurl + \"RealTimeAgentStatus?managercode=\" + (context == \"\" ? manager : \"\") + \"&context=\" + context;\n\n  axios\n    .get(url)\n    .then(data => {\n\n      cb(data);\n      //dispatch(GetCommonData_fetched({ data: data.data.data[0], dataToSend: dataToSend }));\n    })\n    .catch(error => {\n      //dispatch(GetCommonData_fetch_error(error, dataToSend));\n    });\n  //};\n\n};\n\nexport const GetRealTimeTotalData = (context, cb) => {\n\n  let url = config.api.realtimeurl + \"RealTimeData?context=\" + context;\n\n  axios\n    .get(url)\n    .then(data => {\n\n      cb(data);\n      //dispatch(GetCommonData_fetched({ data: data.data.data[0], dataToSend: dataToSend }));\n    })\n    .catch(error => {\n      //dispatch(GetCommonData_fetch_error(error, dataToSend));\n    });\n  //};\n\n};\n\n\nexport const SendOTP = (dataToSend, cb) => {\n  let url = config.api.SendOTP;\n  const headers = {\n    'Content-Type': 'application/json',\n    'Authorization': 'cG9saWN5 YmF6YWFy'\n  }\n  axios\n    .post(url,\n      dataToSend\n      , {\n        headers: headers\n      })\n    .then(data => {\n\n      cb(data);\n    })\n    .catch(error => {\n    });\n};\n\nexport const ValidateOTP = (dataToSend, cb) => {\n  let url = config.api.ValidateOTP;\n  const headers = {\n    'Content-Type': 'application/json',\n    'Authorization': 'cG9saWN5 YmF6YWFy'\n  }\n  axios\n    .post(url,\n      dataToSend\n      , {\n        headers: headers\n      })\n    .then(data => {\n\n      cb(data);\n    })\n    .catch(error => {\n    });\n};\n\nexport const GetComunicationData = (dataToSend, cb) => {\n\n  return function (dispatch, getState) {\n    axios\n      .get(config.api.ServiceAPI + dataToSend.root, {\n        params: dataToSend.data\n      })\n      .then(data => {\n        cb(data);\n        //dispatch(GetCommonData_fetched({ data: data, dataToSend: dataToSend }));\n      })\n      .catch(error => {\n        dispatch(GetCommonData_fetch_error(error, dataToSend));\n      });\n  };\n};","\r\nimport React from \"react\";\r\nimport { Form } from 'react-bootstrap';\r\nimport { connect } from \"react-redux\";\r\n// reactstrap components\r\n\r\nimport {\r\n    GetMySqlData\r\n} from \"../../store/actions/CommonMysqlAction\";\r\nclass DropDownListMysql extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            items: [],\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        if (this.state.items && this.state.items.length === 0) {\r\n            this.CallApi();\r\n        }\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        \r\n        // if (nextProps.col.config.rebind) {\r\n            \r\n        // }\r\n\r\n        if (!nextProps.CommonData.isError) {\r\n            //debugger;\r\n            if (nextProps.CommonData[this.props.col.config.root]) {\r\n                let str = JSON.stringify(nextProps.CommonData[this.props.col.config.root]);\r\n                var res = str.replace(this.props.col.config.Idfield, \"Id\");\r\n                res = res.replace(this.props.col.config.Displayfield, \"Display\");\r\n\r\n                this.setState({ items: JSON.parse(res) });\r\n            }\r\n        }\r\n    }\r\n\r\n    componentWillUpdate(){\r\n        //this.CallApi();\r\n    }\r\n\r\n    CallApi() {\r\n\r\n        this.props.GetMySqlData({\r\n            limit: 10,\r\n            skip: 0,\r\n            root: this.props.col.config.root,\r\n            cols: this.props.col.config.cols,\r\n            con: this.props.col.config.con,\r\n            data: this.props.col.config.data,\r\n            statename: this.props.col.config.statename,\r\n            state: this.props.col.config.state\r\n        });\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        let { items } = this.state;\r\n        const { value, onChange, visible } = this.props;\r\n\r\n        if (!items) {\r\n            items = [];\r\n        }\r\n        if (visible == false) {\r\n            return null;\r\n        }\r\n        return (\r\n\r\n            <div>\r\n\r\n                <Form.Control as=\"select\" disabled={this.props.disabled} value={value} name={this.props.col.name} onChange={onChange}>\r\n                    <option key={0} value={0}>{this.props.firstoption ? this.props.firstoption : \"Select\"}</option>\r\n                    {items.map(item => (\r\n                        <option key={item.Id} value={item.Id}>{item.Display}</option>\r\n                    ))}\r\n\r\n                </Form.Control>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        CommonData: state.CommonData\r\n    };\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    {\r\n        GetMySqlData\r\n    }\r\n)(DropDownListMysql);\r\n\r\n","\nimport React from \"react\";\nimport { Form } from 'react-bootstrap';\nimport { connect } from \"react-redux\";\n// reactstrap components\n\nimport {\n    GetCommonData\n} from \"../../store/actions/CommonAction\";\nclass DropDown extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: [],\n        }\n    }\n    componentDidMount() {\n    }\n    componentWillReceiveProps(nextProps) {\n        this.setState({ items: nextProps.items });\n\n    }\n\n    displayoption(item) {\n        return <option key={item.Id} value={item.Id}>{item.Display}</option>\n    }\n\n    render() {\n\n\n        let { name, value, onChange, visible, items } = this.props;\n        if (!items) {\n            items = [];\n        }\n        if (visible == false) {\n            return null;\n        }\n        return (\n\n            <div>\n\n                <Form.Control as=\"select\" disabled={this.props.disabled} value={value} name={name} onChange={onChange}>\n                    {(this.props.firstoption !== false) && (\n                        <option key={0} value={0}>{this.props.firstoption ? this.props.firstoption : \"Select\"}</option>\n                    )}\n                    {items.map(item => (\n                        this.displayoption(item)\n                    ))}\n\n                </Form.Control>\n            </div>\n\n        );\n    }\n}\n\n\nexport default DropDown;\n\n","\r\nimport React from \"react\";\r\nimport { Form } from 'react-bootstrap';\r\nimport { connect } from \"react-redux\";\r\n// reactstrap components\r\nimport DropDownList from '../Common/DropDownList';\r\n\r\n\r\nimport { Row, Col } from 'react-bootstrap';\r\n\r\n\r\nclass ProductList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n\r\n        this.ProductList = {\r\n            config:\r\n            {\r\n                root: \"Products\",\r\n                cols: [\"ID AS Id\", \"ProductName AS Display\"],\r\n                con: [{ \"Isactive\": 1 }],\r\n                //state: false\r\n            }\r\n        };\r\n    }\r\n    componentDidMount() {\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n\r\n    }\r\n\r\n\r\n    productchange(e) {\r\n        //return <option key={item.Id} value={item.Id}>{item.Display}</option>\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n\r\n        let { visible } = this.props;\r\n\r\n        if (visible == false) {\r\n            return null;\r\n        }\r\n        return (\r\n\r\n            <div>\r\n                <Form.Group controlId=\"product_dropdown\">\r\n                    <DropDownList firstoption=\"Select Product\"\r\n                        col={this.ProductList}\r\n                        onChange={this.props.productchange}>\r\n                    </DropDownList>\r\n                </Form.Group>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default ProductList;\r\n\r\n"],"sourceRoot":""}