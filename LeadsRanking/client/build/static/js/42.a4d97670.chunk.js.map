{"version":3,"sources":["views/Common/AlertDialog.jsx","Configs/message.jsx","views/BlockAgent.jsx","views/Common/AlertBox.jsx","views/Common/Loader.jsx","views/Common/ConfirmDialog.jsx"],"names":["AlertDialog","props","state","show","title","message","buttonLabel","isLoading","this","onCancel","setState","onConfirm","Modal","onHide","handleClose","Header","Title","Body","Footer","Button","variant","onClick","handleConfirm","React","Component","status","BlockAgent","isLoaded","items","AgentData","activePage","root","PageTitle","winactive","AgentCode","TransferLoader","MergeLoader","UnholdLoader","CallAgentLoader","grade","IsBlocked","DIDNo","SalesAgentIp","IsConCall","IsConferenceSuccussful","ConfirmationOpen","selectedRow","highlightTransferBtn","highlightMergeBtn","InitialWarningPopup","schdular","StopAgentListSchedular","columnlist","label","name","sortable","cell","row","className","Status","toUpperCase","id","e","showConfirmationModal","getUrlParameter","href","callAgent","CheckLoader","clearInterval","map","col","fnBindRootData","savePageLogs","getRealTimeData","setInterval","bind","window","addEventListener","event","data","type","addRecord","body","module","url","location","request","search","response","on","Date","by","getuser","UserID","element","indexOf","toast","remove","context","transfer_type","salesagent","assignedagent","GetRealTimeAgentData","results","gradelist","split","Number","forEach","parseInt","Grade","x","push","_","sortBy","item","GetRealTimeSingleAgentData","AgentIP","campaign","agenttoagent","document","getElementById","classList","add","leadid","serviceagent","sericeagentphn","salesagentphn","uid","serviceserverip","salesserverip","AgentToAgentCall","ReAssignedPODLead","SendReassignNotification","notificationResp","localStorage","setItem","parent","postMessage","stopPropagation","preventDefault","blockAgent","blockagent","merge","managerid","bookingid","SetAgentStatusBlocked","transfer","getItem","agent","thirdpartynumber","dtmf_no","insurer","application_number","transfer_agents","claimid","claim_callid","productid","isenc","countrycode","dialercode","blockedAgentid","TransferCallThirdParty","ResponseMessage","where","length","TransferData","MergeCallThirdParty","MergeData","unhold","UnHoldCallThirdParty","UnHoldData","action","Loader","transferheading","colSize","enableCallback","Row","Col","md","Card","CardHeader","CardTitle","tag","CardBody","clickTransfer","clickMerge","clickUnHold","scheduleCallback","fnDatatableCol","columns","showAlert","showModal","FormTitle","formvalue","AlertMsg","AlertVarient","ModalValueChanged","AlertBox","handleInitialWarningPopup","renderTransferData","ConfirmDialog","handleConfirmOk","hideConfirmationModal","extention","pagination","connect","CommonData","GetCommonData","nextProps","setTimeout","ShowDetail","closeButton","disabled"],"mappings":"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","file":"static/js/42.a4d97670.chunk.js","sourcesContent":["\nimport React from \"react\";\nimport { Button, Modal } from 'react-bootstrap';\n\nclass AlertDialog extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            show: this.props.show,\n            title: this.props.title,\n            message: this.props.message,\n            buttonLabel: this.props.buttonLabel,\n            isLoading: false,\n        }\n    }\n\n    handleClose () {\n        //this.setState({ show: false });\n        this.props.onCancel();\n    }\n    \n    handleConfirm (props) {\n        this.setState({ isLoading: true });\n        this.props.onConfirm();\n    }\n\n    render() {\n            return (                \n            <>\n            <Modal show={this.state.show} onHide={() => this.handleClose()}>\n                <Modal.Header>\n                    <Modal.Title>{this.state.title}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>{this.state.message}</Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"primary\" onClick={() => this.handleConfirm()}>\n                        {this.state.buttonLabel}\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n            </>)\n    }\n}\n\nexport default AlertDialog;","const message = {\r\n    status:  [\r\n        {\r\n            status: 500,\r\n            message: \"Could Not Initiate the call.\",\r\n        },\r\n        {\r\n            status: 502,\r\n            message: \"Could Not Initiate the call.\",\r\n        },\r\n        {\r\n            status: 403,\r\n            message: \"Bad request, Required Parameter missing.\",\r\n        },\r\n        {\r\n            status: 404,\r\n            message: \"Connect with customer first.\",\r\n        },\r\n        {\r\n            status: 405,\r\n            message: \"Requested Channel / Agent is not on call.\",\r\n        },\r\n        {\r\n            status: 200,\r\n            message: \"Success, Call is being transferred\",\r\n        },\r\n        {\r\n            status: 101,\r\n            message: \"Customer has disconnected the call.\",\r\n        },\r\n        {\r\n            status: 102,\r\n            message: \"Third Party Agent is not on call, Transfer first.\",\r\n        }\r\n    ]\r\n  \r\n  };\r\n\r\n  export default message;\r\n  ","\nimport React from \"react\";\nimport { ButtonGroup, Button, Modal, Form } from 'react-bootstrap';\n\nimport {\n  GetCommonData, GetRealTimeAgentData, InsertData, UpdateData, SetAgentStatusBlocked, TransferCallThirdParty,\n  MergeCallThirdParty, UnHoldCallThirdParty, GetRealTimeSingleAgentData, AgentToAgentCall, ReAssignedPODLead,\n  SendReassignNotification, SetAgentStatusDirect\n} from \"../store/actions/CommonAction\";\nimport {\n  addRecord\n} from \"../store/actions/CommonMongoAction\";\n\nimport { If, Then } from 'react-if';\n\n//import { If, Then, Else, When, Unless, Switch, Case, Default } from 'react-if';\n\nimport { connect } from \"react-redux\";\n// import { Link } from \"react-router-dom\";\nimport DataTable from './Common/DataTableWithFilter';\nimport DropDown from './Common/DropDownList';\nimport AlertBox from './Common/AlertBox';\nimport ConfirmDialog from './Common/ConfirmDialog';\nimport AlertDialog from './Common/AlertDialog';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { getUrlParameter, fnBindRootData, fnDatatableCol } from '../utility/utility.jsx';\n\nimport thirdPartyNumbers from \"../Configs/thirdpartynumbers.jsx\";\nimport message from \"../Configs/message.jsx\";\nimport Loader from './Common/Loader';\n\nimport _ from 'underscore';\n\n// reactstrap components\nimport {\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  Table,\n  Row,\n  Col\n} from \"reactstrap\";\nimport { getuser } from \"utility/utility\";\nimport './customStyling.css';\n\nclass BlockAgent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      items: [],\n      AgentData: [],\n      activePage: 1,\n      root: \"BlockAgent\",\n      PageTitle: \"Agents List\",\n      winactive: 0,\n      AgentCode: '',\n      TransferLoader: false,\n      MergeLoader: false,\n      UnholdLoader: false,\n      CallAgentLoader: false,\n      grade: null,\n      IsBlocked: false,\n      DIDNo: '',\n      SalesAgentIp: '',\n      IsConCall: false,\n      IsConferenceSuccussful: false,\n      ConfirmationOpen: false,\n      selectedRow: null,\n      highlightTransferBtn: false,\n      highlightMergeBtn: false,\n      InitialWarningPopup: true,\n      //AgentListResponse: true,\n    };\n\n    this.schdular = null;\n    this.winactive = 0;\n\n    this.StopAgentListSchedular = false;\n\n    this.columnlist = [\n\n      {\n        label: \"Agent Code\",\n        name: \"AgentCode\",\n        sortable: true,\n      },\n      {\n        label: \"Status\",\n        name: \"Status\",\n        sortable: true,\n        cell: row => <div className={row.Status.toUpperCase() + \" RealtimeStatus\"}>{row.Status.toUpperCase()}</div>\n      },\n      {\n        label: \"Agent Name\",\n        name: \"AgentName\",\n        sortable: true,\n      },\n      {\n        label: \"Grade\",\n        name: \"Grade\",\n        sortable: true,\n      },\n      {\n        label: \"Block\", \n        cell: row => \n          <div className=\"moreinfo\">{row.Status.toUpperCase() == 'IDLE' ? <button id=\"blockagent\" className=\"btn btn-primary btn-sm\" onClick={(e) => this.showConfirmationModal(e, row)}>\n            Block\n          </button> : \"\"}\n          </div>\n      },\n      {\n        label: \"CallAgent\", \n        cell: row => \n          <div className=\"moreinfo\">{(row.Status.toUpperCase() == 'IDLE' && getUrlParameter(\"customernumber\")) ? <a href=\"#\" onClick={(e) => this.callAgent(e, row)} id=\"agenttoagent\" className=\"callAgentbtn\">\n          <i className=\"fa fa-phone\"></i> {this.CheckLoader('callagent')} </a> : \"\"}\n          </div>\n      },\n\n    ];\n\n\n  }\n\n\n  componentWillUnmount() {\n    clearInterval(this.schdular);\n  }\n\n\n  componentDidMount() {\n    \n    this.columnlist.map(col => (\n      fnBindRootData(col, this.props)\n    ));\n\n    this.savePageLogs();\n    this.getRealTimeData();\n\n    if (this.schdular == null) {\n      this.schdular = setInterval(function () {\n        //console.log(this.StopAgentListSchedular);\n        if(this.StopAgentListSchedular) {\n          this.getRealTimeData();\n        }\n        //if (this.state.winactive == 1 || document.hasFocus()) {\n        //}\n      }.bind(this), 2500)\n\n      window.addEventListener(\"message\", function (event) {\n        if (event.data.type == \"checkactive\") {\n          this.setState({ winactive: event.data.winactive })\n          this.winactive = event.data.winactive;\n        }\n      }.bind(this));\n    }\n\n    /*this.highlightBtnSchedular = setInterval(function () {\n      this.setState({highlightTransferBtn : true});\n    }.bind(this), 2500);\n    return;*/\n  }\n\n  savePageLogs() {\n    this.props.addRecord({\n      root: \"DashboardLogs\",\n      body: {\n        module: this.state.root,\n        url: window.location.href,\n        request: { \"querystring\": this.props.location.search},\n        response: {},\n        on: new Date(),\n        by: getuser().UserID\n      }\n    });\n  };\n\n  recheckAgentStatusBeforeCall(element) {\n    if(this.state.selectedRow \n      && this.state.selectedRow.AgentCode == element.AgentCode \n      && ['RINGING', 'BUSY', 'CALLINITIATED'].indexOf(element.Status.toUpperCase()) > -1\n    ){\n      toast.remove();\n      toast(\"Selected agent is on another call, please block other agent.\", { type: 'error' });\n    }\n  };\n\n  getRealTimeData() {\n    this.StopAgentListSchedular = false;\n\n    let context = getUrlParameter(\"campaign\");\n    let transfer_type = getUrlParameter(\"transfer_type\");\n    let grade = getUrlParameter(\"grade\");\n\n    let salesagent = '';\n    let assignedagent = '';\n    if([\"service_to_sales\",\"POD\",\"service_assigned_agent\",\"rmhealthweb\",\"sales_assigned\"].indexOf(transfer_type) > -1 ){\n    assignedagent = getUrlParameter(\"assignedagent\");\n    salesagent = getUrlParameter(\"salesagent\");\n    }\n    if([\"service_to_salesagent\"].indexOf(transfer_type) > -1 ){\n      salesagent = getUrlParameter(\"salesagent\");\n    }\n    //if([\"claim_transfer\"].indexOf(transfer_type) == -1){\n\n    if([\"POD\"].indexOf(transfer_type) > -1 ){debugger;\n      \n      GetRealTimeAgentData('', context, function (results) {\n        let AgentData = [];\n        let gradelist = (grade)?grade.split(',').map(Number):'';\n        results.data.forEach(element => {\n          if (gradelist && gradelist.indexOf(parseInt(element.Grade)) > -1) {\n            for(var x=0; x < 15; x++) {\n              AgentData.push(element);\n            }\n            //this.recheckAgentStatusBeforeCall(element);\n          }\n        });\n        this.StopAgentListSchedular = true;\n        this.setState({ \n          isLoaded: true,\n          AgentData: _.sortBy(AgentData, function(item){\n            return parseInt(item.Grade);\n          }) \n        });\n\n      }.bind(this));\n\n    } else {\n\n      if(assignedagent){\n        GetRealTimeSingleAgentData(assignedagent, function (results) {\n          //this.recheckAgentStatusBeforeCall(results.data[0]);\n          this.StopAgentListSchedular = true;\n          this.setState({ isLoaded: true, AgentData: results.data });\n        }.bind(this));\n      }\n      else if(salesagent){\n        GetRealTimeSingleAgentData(salesagent, function (results) {\n          //this.recheckAgentStatusBeforeCall(results.data[0]);\n          this.StopAgentListSchedular = true;\n          this.setState({ isLoaded: true, AgentData: results.data });\n          if(results.data){\n            //console.log(results.data[0],results.data[0].DIDNo,results.data[0].AgentIP,'9999999999999999999999')\n            this.setState({ 'DIDNo': results.data[0].DIDNo, 'SalesAgentIp': results.data[0].AgentIP})\n          }\n        }.bind(this));\n      }\n      else if (context) {\n        GetRealTimeAgentData('', context, function (results) {\n          let campaign = getUrlParameter(\"campaign\");\n          \n          if ([\"transfer_salesservice\", \"sales_to_service\"].indexOf(transfer_type) > -1 && ([\"termmax\"].indexOf(campaign) > -1 || [\"termtata\"].indexOf(campaign) > -1 || [\"hdfclife\"].indexOf(campaign) > -1)) \n          {\n            let AgentData = [];\n            \n            if (grade == \"null\" || grade == \"\" || grade == 0) {\n              this.StopAgentListSchedular = true;\n              this.setState({ isLoaded: true, AgentData: results.data });\n            }\n            else {\n              results.data.forEach(element => {\n                if (element.Grade == grade) {\n                  AgentData.push(element);\n                  //this.recheckAgentStatusBeforeCall(element);\n                }\n              });\n              this.StopAgentListSchedular = true;\n              this.setState({ isLoaded: true, AgentData: AgentData });\n            }\n          }\n          else {\n            this.StopAgentListSchedular = true;\n            this.setState({ isLoaded: true, AgentData: results.data });\n          }\n  \n        }.bind(this));\n      }\n    }\n\n  //}\n\n  }\n\n  callAgent(e, row){\n\n    this.setState({ CallAgentLoader : true});\n    var agenttoagent = document.getElementById(\"agenttoagent\");\n    agenttoagent.classList.add(\"disabled\");\n    let leadid = getUrlParameter(\"bookingid\");\n    let serviceagent = getUrlParameter(\"agent\");\n    let salesagent = getUrlParameter(\"salesagent\");\n    let sericeagentphn = getUrlParameter(\"serviceagentphn\");\n    let salesagentphn = (this.state.DIDNo)? this.state.DIDNo : 0;//getUrlParameter(\"salesagentphn\");\n    let uid = getUrlParameter(\"uid\");\n    let serviceserverip = getUrlParameter(\"serviceserverip\");\n    let salesserverip = this.state.SalesAgentIp;//getUrlParameter(\"salesserverip\");\n\n    AgentToAgentCall(leadid, serviceagent, salesagent, sericeagentphn, salesagentphn,\n      uid, serviceserverip,salesserverip, function (results) {\n        agenttoagent.classList.remove(\"disabled\");\n        this.setState({ CallAgentLoader : false});\n      if (results && results.data && results.data.status == 200) {\n        toast(results.data.message, { type: 'success' });\n      } else {\n        toast(results.data.message, { type: 'error' });\n      }\n    }.bind(this));\n  }\n\n  reassignPODLead() {\n    ReAssignedPODLead({\n      'leadId' : getUrlParameter(\"bookingid\"),\n      'userId' : getUrlParameter(\"u\"),\n      'assignedUserId' : getUrlParameter(\"assigneduserid\"),\n    }, function (response) {\n      //console.log(\"===========Reassignment Response==============\", response);\n      if (response.data.status == 200) {\n        // Send Notification to Agent\n        SendReassignNotification(\n          {\n            \"type\":\"notification\",\n            \"event\":\"chat_notification\",\n            \"text\":`Agent ${getUrlParameter(\"agent\")} has passed a POD lead to you, check it out in 'My POD Leads' section.`,\n            \"empID\":`${getUrlParameter('assignedagent')}`,\n            \"productID\":`${getUrlParameter(\"productid\")}`,\n            \"link\":\"\"\n          }, function (notificationResp) {\n          //console.log(\"*********Notification Response************\", notificationResp);\n        });\n        //window.parent.postMessage({\"IsActiveConference\": \"1\"}, '*');\n      }\n    });\n  }\n\n  scheduleCallback(e) {\n    //console.log('Set Callback triggered');\n    //var wn = document.getElementById('myframe').contentWindow;\n    //     wn.postMessage({ winactive: 1, type: \"checkactive\" }, \"*\");\n    if( [\"POD\"].indexOf(getUrlParameter(\"transfer_type\")) > -1 ) {\n      localStorage.setItem('ReassignedLead', getUrlParameter(\"bookingid\"));\n    }\n    window.parent.postMessage({\"action\": \"ScheduleCallback\"}, '*');\n    e.stopPropagation();\n    e.preventDefault();\n  }\n  \n  hideConfirmationModal() {\n    this.setState({ConfirmationOpen : false, selectedRow: null});\n  }\n  \n  showConfirmationModal(e, row) {\n    this.setState({ConfirmationOpen : true, selectedRow: row});\n  }\n  \n  handleConfirmOk(e){    \n    this.blockAgent(e, this.state.selectedRow);\n  }\n\n  blockAgent(e, row) {\n    //clearInterval(this.schdular); \n\n    var blockagent = document.getElementById(\"transfer\");\n    blockagent.classList.add(\"disabled\");\n\n    var merge = document.getElementById(\"merge\");\n    let AgentCode = row.AgentCode;\n    let grade = row.grade;\n    let managerid = getUrlParameter(\"agent\");\n    let bookingid = getUrlParameter(\"bookingid\");\n    if( ! grade ) {\n      grade = '';\n    }\n    if (AgentCode && managerid && bookingid) {\n        SetAgentStatusBlocked(managerid, AgentCode, bookingid, grade, function (results) {\n          blockagent.classList.remove(\"disabled\");\n          if (results && results.data && results.data.status == 200) {\n            this.setState({AgentCode : AgentCode, highlightTransferBtn : true});\n            merge.classList.add(\"disabled\");\n            toast(\"Agent \" + AgentCode + \" is blocked successfully!!\", { type: 'success' });\n          } else {\n            this.setState({AgentCode : '', selectedRow: null});\n            toast(results.data.message, { type: 'error' });\n          }\n          this.setState({ IsBlocked: true, ConfirmationOpen : false });\n          \n        }.bind(this));\n\n        /*GetRealTimeSingleAgentData(AgentCode, function (resp) {\n          if(resp.data[0] && resp.data[0].Status.toUpperCase() == 'IDLE') {\n            //SetAgentStatusBlocked(managerid, AgentCode, bookingid, grade, function (results) {\n            let params = {\n              \"agentId\" : managerid, \n              \"transferAgent\" : AgentCode\n            }\n            SetAgentStatusDirect(params, function (results) {\n              blockagent.classList.remove(\"disabled\");\n              //if (results && results.data && results.data.status == 200) {\n              if (results && results.data && results.data.status == true) {\n                this.setState({AgentCode : AgentCode});\n                toast(\"Agent \" + AgentCode + \" is blocked successfully!!\", { type: 'success' });\n              } else {\n                this.setState({AgentCode : '', selectedRow: null});\n                toast(results.data.message, { type: 'error' });\n              }\n              this.setState({ IsBlocked: true, ConfirmationOpen : false });\n              \n            }.bind(this));\n          } else {\n              this.setState({AgentCode : '', selectedRow: null, IsBlocked: true, ConfirmationOpen : false});\n              toast(\"Agent is not available at the moment, please block other agent\", { type: 'error' });\n          }\n        }.bind(this));*/\n\n\n    }\n    \n  }\n\n  clickTransfer() {\n    var transfer = document.getElementById(\"transfer\");\n    var merge = document.getElementById(\"merge\");\n    var unhold = document.getElementById(\"unhold\");\n   \n    var grade = getUrlParameter(\"grade\");\n    let campaign = getUrlParameter(\"campaign\");    \n    let transfer_type = getUrlParameter(\"transfer_type\");\n    let bookingid = getUrlParameter(\"bookingid\");\n\n    this.setState({ highlightTransferBtn : false });\n\n    //In case of POD \n    if( [\"POD\"].indexOf(getUrlParameter(\"transfer_type\")) > -1 && localStorage.getItem('ReassignedLead') == bookingid )\n    {\n      toast('Lead is already assigned to the agent', { type: 'error' });\n      return false;\n    }\n    \n\n    if (([\"religarehealth\"].indexOf(campaign) > -1 || [\"starhealth\"].indexOf(campaign) > -1 || [\"maxhealth\"].indexOf(campaign) > -1\n    ||  [\"abhihealth\"].indexOf(campaign) > -1 ) &&  this.state.IsBlocked == false){\n      toast(\"Please block any agent, first!!!\", { type: 'error' });\n      return false; \n    }\n\n    if ([\"transfer_salesservice\", \"sales_to_service\"].indexOf(transfer_type) > -1\n      && ([\"termmax\"].indexOf(campaign) > -1 || [\"termtata\"].indexOf(campaign) > -1 || [\"hdfclife\"].indexOf(campaign) > -1)\n      && this.state.IsBlocked == false) {\n      toast(\"Please block any agent, first!!!\", { type: 'error' });\n      return false;\n    }\n\n    if ([\"service_to_salesagent\"].indexOf(transfer_type) > -1 && this.state.IsBlocked == false && !getUrlParameter('customernumber')) {\n      toast(\"Please block any agent, first!!!\", { type: 'error' });\n      return false;\n    }\n\n    //console.log(thirdPartyNumbers);\n\n    // let tpn = _.where(thirdPartyNumbers.tpn, { id: getUrlParameter(\"insurerid\") })\n\n    // if (tpn.length == 0) {\n    //   toast(\"Insurer not found\", { type: 'error' });\n    //   return;\n    // }\n\n    this.setState({ TransferLoader: true, grade: grade });\n    transfer.classList.add(\"disabled\");\n\n    let agent = getUrlParameter(\"agent\");\n    //let thirdpartynumber = tpn[0].number;\n    let thirdpartynumber = getUrlParameter(\"thirdpartynumber\");\n    //let bookingid = getUrlParameter(\"bookingid\");\n    let dtmf_no = getUrlParameter(\"dtmf_no\");\n    let insurer = getUrlParameter(\"insurer\");\n    let application_number = getUrlParameter(\"application_number\");\n    let transfer_agents = getUrlParameter(\"transfer_agents\");\n    let claimid = getUrlParameter(\"claimid\");\n    let claim_callid = getUrlParameter(\"claim_callid\");\n    let productid = getUrlParameter(\"productid\");\n    let salesagent = getUrlParameter(\"salesagent\");\n    let isenc = getUrlParameter(\"isenc\");\n    let countrycode = getUrlParameter(\"countrycode\");\n    let dialercode = getUrlParameter(\"dialercode\");\n    var context = getUrlParameter(\"campaign\");\n\n    if (getUrlParameter(\"customernumber\")){\n      thirdpartynumber = getUrlParameter(\"customernumber\");      \n    }\n    \n    let blockedAgentid = this.state.AgentCode;\n    if( ! grade ) {\n      grade = '';\n    }\n    TransferCallThirdParty(agent, thirdpartynumber, campaign, bookingid, transfer_type, dtmf_no, insurer,\n      application_number, transfer_agents, grade, blockedAgentid, claimid, claim_callid, productid, salesagent,isenc,countrycode,dialercode, function (results) {\n\n        if (results && results.data && results.data.status) {\n          //debugger;\n          this.setState({ TransferLoader: false });\n          merge.classList.remove(\"disabled\");\n\n          if (results.data.status == 200) {\n            toast(\"Success, Call is being transferred\", { type: 'success' });\n\n            //unhold.classList.remove(\"disabled\");\n\n            //In case of POD \n            this.setState({ IsConferenceSuccussful: true, highlightMergeBtn : true });\n            /*if( [\"POD\"].indexOf(getUrlParameter(\"transfer_type\")) > -1 ) {\n              localStorage.setItem('ReassignedLead', bookingid);\n            }*/\n          }\n          //In case of POD \n          else if(([\"POD\"].indexOf(getUrlParameter(\"transfer_type\")) > -1) && (results.data.status == 405) && (results.data.message == 'NoIdealAgentAvailable')){\n            //this.reassignPODLead();\n            toast('All agents are busy now, Please set a call back.', { type: 'warning' });\n            this.setState({ IsConCall: true });\n            this.setState({ IsConferenceSuccussful: false });\n          } else {\n            \n            let ResponseMessage = _.where(message.status, { status: results.data.status })\n            if (ResponseMessage.length > 0) {\n              toast(ResponseMessage[0].message, { type: 'error' });\n            } else {\n              toast(results.data.message, { type: 'error' });\n            }\n\n          }\n\n\n        }\n        this.setState({ TransferData: results.data });\n      }.bind(this));\n\n  }\n  \n  clickMerge() {\n    var merge = document.getElementById(\"merge\");\n    merge.classList.add(\"disabled\");\n    this.setState({ MergeLoader: true, highlightMergeBtn : false });\n    \n    let agent = getUrlParameter(\"agent\");\n    //var transfer_type = getUrlParameter(\"transfer_type\");\n    //var context = getUrlParameter(\"campaign\");\n    \n    MergeCallThirdParty(agent, function (results) {\n      //this.setState({ IsConCall: true });\n      //let IsConCallSucceed = false;\n      //console.log(\"################# Merge Call Response ################\", results);\n      if (results && results.data && results.data.status) {\n        //debugger;\n        this.setState({ MergeLoader: false });\n        merge.classList.remove(\"disabled\");\n\n        if (results.data.status == 200) {\n          toast(results.data.message, { type: 'success' });\n          \n          //IsConCallSucceed = true;\n          //this.setState({ IsConferenceSuccussful: true });\n          \n        }\n        else {\n          toast(results.data.message, { type: 'error' });\n        }\n        \n        /*\n        //In case of POD \n        if([\"POD\"].indexOf(context) > -1 ){\n          //this.reassignPODLead();\n          window.parent.postMessage({\"IsConferenceSuccussful\": IsConCallSucceed}, '*');\n        }\n        */\n\n      }\n      this.setState({ MergeData: results.data });\n\n    }.bind(this));\n\n  }\n\n  clickUnHold() {\n    var unhold = document.getElementById(\"unhold\");\n    var merge = document.getElementById(\"merge\");\n    //merge.classList.add(\"disabled\");\n    unhold.classList.add(\"disabled\");\n    this.setState({ UnholdLoader: true });\n\n    let agent = getUrlParameter(\"agent\");\n\n    UnHoldCallThirdParty(agent, function (results) {\n      unhold.classList.remove(\"disabled\");\n      this.setState({ UnholdLoader: false });\n      if (results && results.data && results.data.status) {\n        //debugger;\n        if (results.data.status == 200) {\n          toast('Success, Call is Unhold.', { type: 'success' });\n        }\n        else {\n          toast(results.data.message, { type: 'error' });\n        }\n      }\n      this.setState({ UnHoldData: results.data });\n    }.bind(this));\n  }\n\n  CheckLoader(action) {\n    if (action == 'transfer') {\n      if (this.state.TransferLoader)\n        return <Loader />;\n    } else if (action == 'merge') {\n      if (this.state.MergeLoader)\n        return <Loader />;\n    } else if (action == 'unhold') {\n      if (this.state.UnholdLoader)\n        return <Loader />;\n    } else if (action == 'callagent') {\n      if (this.state.CallAgentLoader)\n        return <Loader />;\n    }\n\n  }\n\n  renderTransferData() {\n    if([\"claim_transfer\"].indexOf(getUrlParameter(\"transfer_type\")) > -1){\n      var transferheading = 'Claim Transfer'\n    }else{\n      var transferheading = 'Service Agent Transfer' \n    }\n\n    var context = getUrlParameter(\"campaign\");\n    var colSize = 4;\n    var enableCallback = false;\n    if([\"POD\"].indexOf(getUrlParameter(\"transfer_type\")) > -1 && this.state.IsConCall && this.state.IsConferenceSuccussful === false) {\n      enableCallback = true;\n      colSize = 3;\n    }\n\n    return <Row>\n      <Col md=\"12\">\n        <Card>\n          <CardHeader>\n            <Row>\n              <Col md={12}>\n                <CardTitle tag=\"h5\">\n                  <center>\n                    {transferheading}\n                </center>\n                </CardTitle>\n              </Col>\n            </Row>\n          </CardHeader>\n          <CardBody>\n            <Row>\n              <Col md={colSize}>\n                <button id=\"transfer\" onClick={(e) => this.clickTransfer()} className={ this.state.highlightTransferBtn == true ? \"btn btn-primary full-width blink\" : \"btn btn-primary full-width\"}>Transfer Call {this.CheckLoader('transfer')}</button>\n              </Col>\n              <Col md={colSize}>\n                <button id=\"merge\" onClick={(e) => this.clickMerge()} className={ this.state.highlightMergeBtn == true ? \"btn btn-primary full-width blink\" : \"btn btn-primary full-width\"}>Merge Call {this.CheckLoader('merge')}</button>\n              </Col>\n              <Col md={colSize}>\n                <button id=\"unhold\" onClick={(e) => this.clickUnHold()} className=\"btn btn-primary full-width\">UnHold {this.CheckLoader('unhold')}</button>\n              </Col>\n              {(enableCallback) && (\n                <Col md={colSize}>\n                  <button id=\"scheduleCall\" onClick={(e) => this.scheduleCallback(e)} className=\"btn btn-primary full-width\">Set Call</button>\n                </Col>\n              )\n            }\n            </Row>\n            <Row>\n                <Col md={12} className=\"BlockAgentNoticeMsg\">\n                  <br />\n                  Please brief the new advisor with customer details before merging the call into conference.\n                </Col>\n            </Row>\n          </CardBody>\n        </Card>\n      </Col>\n    </Row>\n\n  }\n  \n  handleInitialWarningPopup(e){    \n    this.setState({InitialWarningPopup : false});\n  }\n\n  fnDatatableCol() {\n\n    var columns = fnDatatableCol(this.columnlist);\n    return columns;\n  }\n\n\n\n  render() {\n    const columns = this.fnDatatableCol();\n    const { items, PageTitle, showModal, FormTitle, formvalue, showAlert, AlertMsg, AlertVarient, ModalValueChanged, event } = this.state;\n    //window.alert(this.state.ConfirmationOpen);\n    return (\n      <>\n        <div className=\"content\">\n          <ToastContainer />\n          <AlertBox show={showAlert} variant={AlertVarient} body={AlertMsg}></AlertBox>\n\n          {(\n          this.state.InitialWarningPopup && \n            <AlertDialog \n              onConfirm={(e) => this.handleInitialWarningPopup(e)} \n              onCancel={(e) => this.handleInitialWarningPopup(e)} \n              buttonLabel=\"OK\"\n              title=\"Confirm\"\n              message=\"Please make sure you have informed the customer about merging this call with another advisor\"\n              show={true} \n            />\n          )}\n\n          {this.renderTransferData()}\n          { (\n            <Row>\n            <Col md=\"12\">\n              <Card>\n\n                <CardHeader>\n                  <Row>\n                    <Col md={7}>\n                      \n                      <CardTitle tag=\"h5\">\n                        {PageTitle} {(!this.state.isLoaded && <Loader />)}          \n                      </CardTitle>\n                    </Col>\n                  </Row>\n                </CardHeader>\n\n                <CardBody className=\"BlockAgentContainer\">\n                  {(\n                    this.state.ConfirmationOpen && \n                    <ConfirmDialog \n                      onConfirm={(e) => this.handleConfirmOk(e)} \n                      onCancel={() => this.hideConfirmationModal()} \n                      title=\"Confirm\"\n                      message=\"Are you sure you wish to block this agent?\"\n                      show={true} \n                    />\n                    )}\n\n                  {/*<ConfirmDialog \n                    onConfirm={(e) => this.handleConfirmOk(e)} \n                    onCancel={() => this.hideConfirmationModal()} \n                    title=\"Confirm\"\n                    message=\"Have you informed the customer that you are transferring the call to your colleague/senior?\"\n                    show={true} \n                  />*/}\n\n                  {(this.state.isLoaded && \n                  <DataTable\n                    columns={columns}\n                    data={this.state.AgentData}\n                    extention={false}\n                    pagination={false}\n                  />\n                  )}\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n          )\n          }\n        </div>\n      </>\n    );\n  }\n}\n\n\nfunction mapStateToProps(state) {\n  return {\n    CommonData: state.CommonData\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  {\n    GetCommonData,\n    addRecord\n  }\n)(BlockAgent);","\r\nimport React from \"react\";\r\nimport { Alert } from 'react-bootstrap';\r\n\r\n\r\nclass AlertBox extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            show: this.props.show\r\n        }\r\n    }\r\n    componentDidUpdate() {\r\n\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        this.setState({ show: nextProps.show });\r\n        if (nextProps.show) {\r\n            setTimeout(function () {\r\n                this.setState({ show: false });\r\n            }.bind(this), 5000);\r\n        }\r\n    }\r\n    render() {\r\n        if (this.state.show) {\r\n            return (\r\n                <Alert variant={this.props.variant}>\r\n                    {this.props.body}\r\n                </Alert>\r\n            );\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nexport default AlertBox;\r\n","import React from 'react';\r\n\r\nfunction ShowDetail() {\r\n  return (\r\n      <i className=\"fa fa-spinner fa-spin\" />\r\n  );\r\n}\r\n\r\nexport default ShowDetail;","\nimport React from \"react\";\nimport { Button, Modal } from 'react-bootstrap';\nimport Loader from './Loader';\n\n\nclass ConfirmDialog extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            show: this.props.show,\n            title: this.props.title,\n            message: this.props.message,\n            isLoading: false,\n        }\n    }\n\n    handleClose () {\n        //this.setState({ show: false });\n        this.props.onCancel();\n    }\n    \n    handleConfirm (props) {\n        this.setState({ isLoading: true });\n        this.props.onConfirm();\n    }\n\n    render() {\n            return (                \n            <>\n            <Modal show={this.state.show} onHide={() => this.handleClose()}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{this.state.title}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>{this.state.message}</Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => this.handleClose()}>\n                        No\n                    </Button>\n                    <Button variant=\"primary\" onClick={() => this.handleConfirm()} disabled={this.state.isLoading}>\n                        Yes\n                    </Button>\n                    {(\n                        this.state.isLoading && <Loader />\n                    )}\n                </Modal.Footer>\n            </Modal>\n            </>)\n    }\n}\n\nexport default ConfirmDialog;\n"],"sourceRoot":""}