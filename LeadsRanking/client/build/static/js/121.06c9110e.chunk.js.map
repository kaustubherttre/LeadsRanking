{"version":3,"sources":["views/LoginLogoutDetails.jsx"],"names":["LoginLogoutDetails","props","validationdate","currentDate","isBefore","moment","state","maxdate","isLoaded","showModal","items","store","activePage","root","PageTitle","FormTitle","formvalue","event","ModalValueChanged","empid","CallDate","format","departmentId","subtract","ResponseData","handleClose","bind","handleShow","empchange","selectedrow","columnlist","selector","name","type","searchable","cell","row","className","LoginTime","utc","LogoutTime","this","map","col","fnBindRootData","setTimeout","setState","user","getuser","nextProps","CommonData","config","joinObject","isError","fnBindStore","fnDatatableCol","Object","assign","od","e","target","value","_isAMomentObject","console","log","json","PostLoginLogoutDetails","results","data","AgentChatLoginData","toast","res","val1","index","history","val2","obj","username","loginTime","logoutTime","push","columns","showAlert","AlertMsg","AlertVarient","md","cols","_id","con","enabled","statename","Idfield","Displayfield","onChange","departmentChange","Date","dateFormat","CallDateChange","variant","onClick","fetchData","src","id","show","onHide","dialogClassName","Header","closeButton","Title","Body","Footer","React","Component","connect","GetCommonData","InsertData","UpdateData","addRecord"],"mappings":"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","file":"static/js/121.06c9110e.chunk.js","sourcesContent":["\r\nimport React from \"react\";\r\nimport { ButtonGroup, Button, Modal, Form } from 'react-bootstrap';\r\n\r\nimport {\r\n  GetCommonData, InsertData, UpdateData, GetFileExists, GetAwsRecordingUrl, GetRecordingName, PostLoginLogoutDetails\r\n} from \"../store/actions/CommonAction\";\r\nimport {\r\n  addRecord\r\n} from \"../store/actions/CommonMongoAction\";\r\n\r\nimport { If, Then } from 'react-if';\r\n//import { If, Then, Else, When, Unless, Switch, Case, Default } from 'react-if';\r\n\r\nimport { connect } from \"react-redux\";\r\n// import { Link } from \"react-router-dom\";\r\nimport DataTable from './Common/DataTableWithFilter';\r\nimport DropDown from './Common/DropDownList';\r\nimport DropDownMongo from './Common/DropDownListMongo';\r\n\r\nimport Moment from 'react-moment';\r\nimport moment from 'moment';\r\n\r\nimport * as Datetime from 'react-datetime';\r\nimport 'react-datetime/css/react-datetime.css';\r\n\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n\r\nimport { CompareJson, fnBindRootData, fnRenderfrmControl, fnDatatableCol, fnCleanData, GetJsonToArray, getMax, joinObject } from '../utility/utility.jsx';\r\n// reactstrap components\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  CardTitle,\r\n  Table,\r\n  Row,\r\n  Col\r\n} from \"reactstrap\";\r\nimport { getuser } from \"utility/utility\";\r\n\r\nclass LoginLogoutDetails extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isLoaded: false,\r\n      showModal: false,\r\n      items: [],\r\n      store: [],\r\n      activePage: 1,\r\n      root: \"LoginLogoutDetails\",\r\n      PageTitle: \"Login Logout History\",\r\n      FormTitle: \"\",\r\n      formvalue: {},\r\n      event: \"\",\r\n      ModalValueChanged: false,\r\n      empid: '',\r\n      CallDate: moment().format(\"YYYY-MM-DD\"),\r\n      departmentId: null, \r\n      maxdate: moment().subtract(59, 'days').format(\"YYYY-MM-DD\"),\r\n      ResponseData :[],\r\n    };\r\n    this.handleClose = this.handleClose.bind(this);\r\n    this.handleShow = this.handleShow.bind(this);\r\n\r\n    this.empchange = this.empchange.bind(this);\r\n    this.selectedrow = { \"CallDataId\": 0, \"CallID\": null, \"LeadID\": null }\r\n    this.columnlist = [\r\n    //   {\r\n    //     selector: \"employeeId\",\r\n    //     name: \"EmployeeId\",\r\n    //     type: \"string\",\r\n    //   },\r\n      {\r\n        selector: \"username\",\r\n        name: \"UserName\",\r\n        type: \"string\",\r\n        searchable: true\r\n      },\r\n      {\r\n        selector: \"LoginTime\",\r\n        name: \"LoginTime\",\r\n        type: \"datetime\",\r\n        cell: row => <div className=\"LoginTime\">{row.LoginTime ? \r\n            <Moment utc={true} format=\"YYYY-MM-DD HH:mm:ss\">{row.LoginTime}</Moment> : \"N.A\"}</div>,\r\n      },\r\n      {\r\n        selector: \"LogoutTime\",\r\n        name: \"LogoutTime\",\r\n        type: \"datetime\",\r\n        cell: row => <div className=\"LogoutTime\">{row.LogoutTime ? <Moment utc={true} format=\"YYYY-MM-DD HH:mm:ss\"\r\n                >{row.LogoutTime}</Moment> : \"N.A\"}</div>,\r\n      }\r\n\r\n    ];\r\n    let count = 0;\r\n  }\r\n\r\n\r\n\r\n  componentDidMount() {\r\n\r\n    this.columnlist.map(col => (\r\n      fnBindRootData(col, this.props)\r\n    ));\r\n\r\n    setTimeout(function () {\r\n      this.setState({ user: getuser() });\r\n    }.bind(this), 500);\r\n\r\n  }\r\n\r\n  fnBindStore(col, nextProps) {\r\n    if (col.type == \"dropdown\") {\r\n      let items;\r\n      if (nextProps.CommonData[this.state.root] && nextProps.CommonData[col.config.root]) {\r\n        items = joinObject(nextProps.CommonData[this.state.root], nextProps.CommonData[col.config.root], col.name)\r\n        this.setState({ items: items });\r\n      }\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n\r\n    if (!nextProps.CommonData.isError) {\r\n      this.setState({ items: nextProps.CommonData[this.state.root] });\r\n      this.setState({ store: nextProps.CommonData });\r\n      this.columnlist.map(col => (\r\n        this.fnBindStore(col, nextProps)\r\n      ));\r\n    }\r\n  }\r\n\r\n  fnDatatableCol() {\r\n\r\n    var columns = fnDatatableCol(this.columnlist);\r\n\r\n    // columns.push({\r\n    //   name: \"Products Name\",\r\n    //   selector: \"ProductID_display\",\r\n    //   sortable: true,\r\n    // });\r\n\r\n    // columns.push({\r\n    //   name: \"Action\",\r\n    //   cell: row => <ButtonGroup aria-label=\"Basic example\">\r\n    //     <Button variant=\"secondary\" onClick={() => this.handleCopy(row)}><i className=\"fa fa-files-o\" aria-hidden=\"true\"></i></Button>\r\n    //     <Button variant=\"secondary\" onClick={() => this.handleEdit(row)}><i className=\"fa fa-pencil-square-o\" aria-hidden=\"true\"></i></Button>\r\n    //   </ButtonGroup>\r\n    // });\r\n    return columns;\r\n  }\r\n  handleCopy(row) {\r\n    this.setState({ formvalue: Object.assign({}, row, {}), event: \"Copy\", showModal: true, FormTitle: \"Copy Record\" });\r\n  }\r\n  handleEdit(row) {\r\n    this.setState({ od: Object.assign({}, row, {}), formvalue: Object.assign({}, row, {}), event: \"Edit\", showModal: true, FormTitle: \"Edit Record\" });\r\n  }\r\n  handleClose() {\r\n    this.setState({ showModal: false });\r\n  }\r\n  handleShow() {\r\n    this.setState({ formvalue: this.selectedrow, event: \"Add\", showModal: true, FormTitle: \"Add New Record\" });\r\n  }\r\n\r\n\r\n  empchange(e, props) {\r\n    this.setState({ empid: e.target.value });\r\n  }\r\n\r\n  CallDateChange(e, props) {\r\n    if (e._isAMomentObject) {\r\n      this.setState({ CallDate: e.format(\"YYYY-MM-DD\") }, function () {\r\n      });\r\n    }\r\n  }\r\n\r\n  departmentChange(event) {\r\n    this.setState({ departmentId: event.target.value});\r\n    console.log(event.target.value); \r\n  };\r\n  fetchData() {     \r\n\r\n    if (!this.state.CallDate) {\r\n      toast(\"Please select Date\", { type: 'error' });\r\n      return;\r\n    }\r\n    if (!this.state.departmentId) {\r\n      toast(\"Please choose department\", { type: 'error' });\r\n      return;\r\n    }\r\n \r\n    var json = {\r\n       \"departmentId\": this.state.departmentId,\r\n       \"searchdate\": this.state.CallDate,\r\n       };\r\n\r\n    PostLoginLogoutDetails(json, function (results) {\r\n        console.log(results);\r\n        this.setState({ ResponseData: results.data.data }, () =>this.AgentChatLoginData()\r\n        );\r\n    }.bind(this));\r\n  }\r\n\r\n  AgentChatLoginData(){\r\n      var data = this.state.ResponseData;\r\n      var res = [];\r\n      data.map((val1,index) => {\r\n        var history = val1.history;\r\n        history.map((val2,index) => {\r\n            var obj = {\r\n                //employeeId: val1.employeeId,\r\n                username:   val1.username,\r\n                LoginTime: val2.loginTime,\r\n                LogoutTime: val2.logoutTime\r\n            };\r\n\r\n            res.push(obj);\r\n        });\r\n      });\r\n\r\n    console.log(res);\r\n    this.setState({ items: res });\r\n\r\n  }\r\n\r\n  validationdate = (currentDate) => {\r\n    return !currentDate.isBefore(moment(this.state.maxdate));\r\n  };\r\n\r\n  render() {\r\n    const ChatAgentDepartmentConfigure = {\r\n      config:\r\n      {\r\n        root: \"livechat_department\",\r\n        cols: { _id: 1, name: 1 },\r\n        con: { enabled: true },\r\n        statename: \"\",\r\n        state: true,\r\n        Idfield: /_id/g,\r\n        Displayfield: /name/g,\r\n      }\r\n    }\r\n    const columns = this.columnlist;\r\n    const { items, PageTitle, showModal, FormTitle, formvalue, showAlert, AlertMsg, AlertVarient, ModalValueChanged, event } = this.state;\r\n    return (\r\n      <>\r\n        <div className=\"content\">\r\n          <ToastContainer />\r\n          <Row>\r\n            <Col md=\"12\">\r\n              <Card>\r\n                <CardHeader>\r\n                  <Row>\r\n                    {/* <Col md={4}>\r\n                      <CardTitle tag=\"h4\">{PageTitle}</CardTitle>\r\n                    </Col> */}               \r\n                    <Col md={4}>\r\n                      <DropDownMongo col={ChatAgentDepartmentConfigure} onChange={this.departmentChange.bind(this)} />               \r\n                    </Col>\r\n                    <Col md={2}>\r\n                      <Datetime value={new Date()}\r\n                        dateFormat=\"YYYY-MM-DD\"\r\n                        value={this.state.CallDate}\r\n                        isValidDate={this.validationdate}\r\n                        onChange={moment => this.CallDateChange(moment)}\r\n                        utc={true}\r\n                        timeFormat={false} />\r\n                    </Col>\r\n                    <Col md={1}>\r\n                      <Button variant=\"primary\" onClick={() => this.fetchData()}>Fetch</Button>\r\n                    </Col>\r\n                    <Col md={1}>\r\n                    </Col>\r\n                  </Row>\r\n                </CardHeader>\r\n                <CardBody>\r\n                  <DataTable\r\n                    columns={columns}\r\n                    data={items}\r\n                  />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <audio src=\"\" id={\"audio1\"}></audio>\r\n          <Modal show={showModal} onHide={this.handleClose} dialogClassName=\"modal-90w\">\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>{FormTitle}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n\r\n            </Modal.Footer>\r\n          </Modal>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    CommonData: state.CommonData\r\n  };\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {\r\n    GetCommonData,\r\n    InsertData,\r\n    UpdateData,\r\n    addRecord\r\n  }\r\n)(LoginLogoutDetails);"],"sourceRoot":""}