{"version":3,"sources":["views/QcReport.jsx"],"names":["SimpleTreeTable","React","lazy","columns","dataField","heading","fixedWidth","percentageWidth","control","tableClasses","buttonClasses","showButton","QcReport","props","state","nodes","ResponseData","console","log","getuser","UserId","RoleId","UserID","EmployeeId","encodedString","btoa","GetQualityReport","results","aiagentdata","data","status","response","output","this","setState","GetDataDirect","root","ManagerId","statename","value","result","getTree","bind","nextProps","node","index","agents","_","where","UserName","RoleName","children","length","forEach","element","agentinnode","filter","item","emp_id","WithInTAT","submission_date","i","TotalCount","TotalPending","TLPending","PendingWithinTAT","PendingOutsideTAT","TotalClosure","TotalClosureWithinTAT","TotalClosureP","TotalClosureWithinTATP","agent","emp_name","push","reduce","s","f","CalculatePercentage","dataRow","dangerouslySetInnerHTML","__html","date","Date","total","values","toFixed","className","md","tag","class","fallback","tableData","Component"],"mappings":"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","file":"static/js/122.555bf23d.chunk.js","sourcesContent":["\r\nimport React, { Suspense } from 'react';\r\n\r\n\r\nimport {\r\n    GetCommonData, GetCommonspData, GetDataDirect, GetExportQuiz, GetQualityReport\r\n} from \"../store/actions/CommonAction\";\r\nimport { getUrlParameter, getuser } from '../utility/utility.jsx';\r\nimport {\r\n    Card,\r\n    CardHeader,\r\n    CardBody,\r\n    CardTitle,\r\n    Table,\r\n    Row,\r\n    Col\r\n} from \"reactstrap\";\r\nimport moment from 'moment';\r\n//import SimpleTreeTable from 'simple-react-treetable';\r\nimport { func } from \"prop-types\";\r\nimport _ from 'underscore';\r\n\r\n\r\nconst SimpleTreeTable = React.lazy(() => import('simple-react-treetable'));\r\n\r\nconst columns = [\r\n    {\r\n        dataField: \"UserName\",\r\n        heading: \"UserName\",\r\n        fixedWidth: true,\r\n        percentageWidth: 25\r\n    },\r\n    {\r\n        dataField: \"TotalCount\",\r\n        heading: \"Total Count\",\r\n    },\r\n    {\r\n        dataField: \"TotalPending\",\r\n        heading: \"Total Pending\",\r\n    },\r\n    {\r\n        dataField: \"TLPending\",\r\n        heading: \"TL Pending\",\r\n    },\r\n    {\r\n        dataField: \"PendingWithinTAT\",\r\n        heading: \"Pending Within TAT\",\r\n    },\r\n    {\r\n        dataField: \"PendingOutsideTAT\",\r\n        heading: \"Pending outside TAT\",\r\n    },\r\n    {\r\n        dataField: \"TotalClosureP\",\r\n        heading: \"Total Closure %\",\r\n    },\r\n    {\r\n        dataField: \"TotalClosureWithinTATP\",\r\n        heading: \"Total Closure% within TAT\",\r\n    },\r\n];\r\n\r\nconst control = {\r\n    tableClasses: \"table table-striped table-responsive\",\r\n    buttonClasses: \"btn btn-default\",\r\n    showButton: false\r\n};\r\n\r\nclass QcReport extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: [],\r\n            ResponseData: [],\r\n        };\r\n\r\n    }\r\n    componentDidMount() {\r\n\r\n        console.log(\"getuser\", getuser());\r\n        let UserId = getuser().RoleId == 2 ? 75 : getuser().UserID;\r\n        //let UserId = getuser().RoleId == 2 ? 2640 : getuser().UserID;\r\n        let RoleId = getuser().RoleId;\r\n        let EmployeeId = getuser().RoleId == 2 ? 'ET01104' : getuser().EmployeeId;\r\n\r\n        //const encodedString = btoa((getuser().RoleId == 2 ? 'ET01104' : getuser().EmployeeId) + '-' + getuser().RoleId);\r\n        const encodedString = btoa(EmployeeId + '-' + RoleId);\r\n        console.log(encodedString);\r\n        //GetQualityReport(\"UFcwMTA4OC0xMQ==\", function (results) {\r\n        GetQualityReport(encodedString, function (results) {\r\n\r\n\r\n            let aiagentdata = null;\r\n            if (results.data.status == true) {\r\n                aiagentdata = results.data.response.output;\r\n                this.setState({ ResponseData: results.data.response.output });\r\n            }\r\n\r\n            GetDataDirect({\r\n                root: \"Hierarchy\",\r\n                ManagerId: UserId,\r\n                statename: \"Hierarchy-\" + UserId,\r\n                value: this.props.value,\r\n                state: true\r\n            }, function (result) {\r\n                result = this.getTree(result, aiagentdata);\r\n                this.setState({ nodes: result });\r\n            }.bind(this));\r\n        }.bind(this));\r\n\r\n    }\r\n    componentWillReceiveProps(nextProps) {//debugger;\r\n\r\n    }\r\n\r\n    getTree(node, aiagentdata) {\r\n\r\n        for (let index = 0; index < node.length; index++) {\r\n            let agents = _.where(aiagentdata, { ManagerId: node[index].UserID });\r\n\r\n            node[index][\"data\"] = {\r\n                \"RoleId\": node[index].RoleId,\r\n                \"UserID\": node[index].UserID,\r\n                \"EmployeeId\": node[index].EmployeeId,\r\n                \"UserName\": node[index].UserName,\r\n                \"ManagerId\": node[index].ManagerId,\r\n                \"RoleName\": node[index].RoleName,\r\n                \"TotalCount\": 0,\r\n                \"TotalPending\": 0,\r\n                \"TLPending\": 0,\r\n                \"PendingWithinTAT\": 0,\r\n                \"PendingOutsideTAT\": 0,\r\n                \"TotalClosure\": 0,\r\n                \"TotalClosureWithinTAT\": 0,\r\n                \"TotalClosureP\": 0,\r\n                \"TotalClosureWithinTATP\": 0,\r\n            }\r\n\r\n            if (node[index].children && node[index].children.length > 0) {\r\n                node[index].children = this.getTree(node[index].children, aiagentdata);\r\n            }\r\n            else {\r\n                node[index][\"children\"] = [];\r\n            }\r\n\r\n            agents.forEach(element => {\r\n                var agentinnode = _.filter(node[index][\"children\"], function (item) { return item.EmployeeId == element.emp_id; });\r\n\r\n                let WithInTAT = this.WithInTAT(element.submission_date);\r\n                if (agentinnode.length > 0) {\r\n                    for (var i in node[index][\"children\"]) {\r\n                        if (node[index][\"children\"][i].EmployeeId == element.emp_id) {\r\n                            node[index][\"children\"][i][\"data\"].TotalCount = node[index][\"children\"][i][\"data\"].TotalCount + 1;\r\n                            node[index][\"children\"][i][\"data\"].TotalPending = node[index][\"children\"][i][\"data\"].TotalPending + (element.status == 'verifiedByTl' ? 1 : 0);\r\n                            node[index][\"children\"][i][\"data\"].TLPending = node[index][\"children\"][i][\"data\"].TLPending + (element.status == 'submitted' ? 1 : 0);\r\n                            node[index][\"children\"][i][\"data\"].PendingWithinTAT = node[index][\"children\"][i][\"data\"].PendingWithinTAT + ((element.status == 'submitted' && WithInTAT) ? 1 : 0);\r\n                            node[index][\"children\"][i][\"data\"].PendingOutsideTAT = node[index][\"children\"][i][\"data\"].PendingOutsideTAT + ((element.status == 'submitted' && WithInTAT == false) ? 1 : 0);\r\n                            node[index][\"children\"][i][\"data\"].TotalClosure = node[index][\"children\"][i][\"data\"].TotalClosure + ((element.status == 'verified') ? 1 : 0);\r\n                            node[index][\"children\"][i][\"data\"].TotalClosureWithinTAT = node[index][\"children\"][i][\"data\"].TotalClosureWithinTAT + ((element.status == 'verified' && WithInTAT == false) ? 1 : 0);\r\n                            node[index][\"children\"][i][\"data\"].TotalClosureP = node[index][\"children\"][i][\"data\"].TotalClosureP + ((element.status == 'verified') ? 1 : 0);\r\n                            node[index][\"children\"][i][\"data\"].TotalClosureWithinTATP = node[index][\"children\"][i][\"data\"].TotalClosureWithinTATP + ((element.status == 'verified' && WithInTAT == false) ? 1 : 0);\r\n\r\n                            break; //Stop this loop, we found it!\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    let agent = {\r\n                        \"EmployeeId\": element.emp_id,\r\n                        \"UserName\": element.emp_name,\r\n                        \"ManagerId\": element.ManagerId,\r\n                        \"data\": {\r\n                            \"EmployeeId\": element.emp_id,\r\n                            \"UserName\": element.emp_name,\r\n                            \"ManagerId\": element.ManagerId,\r\n                            \"TotalCount\": 1,\r\n                            \"TotalPending\": element.status == 'verifiedByTl' ? 1 : 0,\r\n                            \"TLPending\": element.status == 'submitted' ? 1 : 0,\r\n                            \"PendingWithinTAT\": (element.status == 'submitted' && WithInTAT) ? 1 : 0,\r\n                            \"PendingOutsideTAT\": (element.status == 'submitted' && WithInTAT == false) ? 1 : 0,\r\n                            \"TotalClosure\": (element.status == 'verified') ? 1 : 0,\r\n                            \"TotalClosureWithinTAT\": (element.status == 'verified' && WithInTAT == false) ? 1 : 0,\r\n                            \"TotalClosureP\": (element.status == 'verified') ? 1 : 0,\r\n                            \"TotalClosureWithinTATP\": (element.status == 'verified' && WithInTAT == false) ? 1 : 0,\r\n                        },\r\n                        \"children\": []\r\n                    }\r\n                    node[index][\"children\"].push(agent);\r\n                }\r\n            });\r\n\r\n            node[index][\"data\"].TotalCount = node[index][\"children\"].reduce((s, f) => { return s + f.data.TotalCount; }, 0);\r\n            node[index][\"data\"].TotalPending = node[index][\"children\"].reduce((s, f) => { return s + f.data.TotalPending; }, 0);\r\n            node[index][\"data\"].TLPending = node[index][\"children\"].reduce((s, f) => { return s + f.data.TLPending; }, 0);\r\n            node[index][\"data\"].PendingWithinTAT = node[index][\"children\"].reduce((s, f) => { return s + f.data.PendingWithinTAT; }, 0);\r\n            node[index][\"data\"].PendingOutsideTAT = node[index][\"children\"].reduce((s, f) => { return s + f.data.PendingOutsideTAT; }, 0);\r\n\r\n            let TotalClosure = node[index][\"children\"].reduce((s, f) => { return s + f.data.TotalClosure; }, 0);\r\n            let TotalClosureWithinTAT = node[index][\"children\"].reduce((s, f) => { return s + f.data.TotalClosureWithinTAT; }, 0);\r\n\r\n            let TotalClosureP = this.CalculatePercentage(node[index][\"data\"].TotalCount, TotalClosure);\r\n            let TotalClosureWithinTATP = this.CalculatePercentage(node[index][\"data\"].TotalCount, TotalClosureWithinTAT);\r\n\r\n            node[index][\"data\"].TotalClosure = TotalClosure;\r\n            node[index][\"data\"].TotalClosureWithinTAT = TotalClosureWithinTAT;\r\n            node[index][\"data\"].TotalClosureP = TotalClosure + ' / ' + TotalClosureP + \" %\";\r\n            node[index][\"data\"].TotalClosureWithinTATP = TotalClosureWithinTAT + ' / ' + TotalClosureWithinTATP + \" %\";\r\n\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    descriptionRenderer(dataRow, dataField) {\r\n        return <span dangerouslySetInnerHTML={{ __html: dataRow.data[dataField] }}></span>;\r\n    };\r\n\r\n    WithInTAT(date) {\r\n        let durationTime = ((new Date() - new Date(date)) / 1000) / 60;\r\n        if ((durationTime / 60) <= 72) {\r\n            return true;\r\n        }\r\n        return false\r\n    }\r\n\r\n    CalculatePercentage(total, values) {\r\n        if (total == 0 || values == 0) {\r\n            return 0;\r\n        }\r\n        return ((values / total) * 100).toFixed(2)\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <div className=\"content\">\r\n\r\n                <Row>\r\n                    <Col md=\"12\">\r\n                        <Card>\r\n                            <CardHeader>\r\n                                <CardTitle tag=\"h4\">QC Report</CardTitle>\r\n                            </CardHeader>\r\n                            <CardBody>\r\n                                {\r\n                                    this.state.nodes.length == 0 ? <i class=\"fa fa-spinner fa-spin\"></i> :\r\n                                        <Suspense fallback={<div>Loading...</div>}>\r\n                                            <SimpleTreeTable tableData={this.state.nodes} columns={columns} control={control} />\r\n                                        </Suspense>\r\n                                }\r\n\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default QcReport;\r\n"],"sourceRoot":""}