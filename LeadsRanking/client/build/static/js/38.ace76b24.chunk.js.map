{"version":3,"sources":["views/InboundQueueReport.jsx","views/Common/AlertBox.jsx","store/actions/CommonMysqlAction.jsx","views/Common/ManagerHierarchy.jsx","views/Common/DropDownListMysql.jsx","views/Common/DropDown.jsx"],"names":["InboundQueueReport","props","handleChange","e","_isAMomentObject","setState","ReportDate","format","this","fetchCallBackData","handleStartDateChange","startdate","handleEndDateChange","enddate","validation","currentDate","isBefore","moment","state","maxdate","validationEndDate","root","PageTitle","ProductData","ProductId","subtract","ReportTime","showMoreInfoModal","MoreInfoData","selectedIvrProduct","ivrType","ivrProducts","ivrQueues","SelectedQueues","queueServerIp","selectedValue","label","value","ConfType","addClass","ivrtypechange","bind","ivrproductchange","onSelect","columnlist","name","selector","width","type","cell","row","className","CallId","searchable","IvrType","Ivr1","Ivr2","TollFreeNumber","TollFreeType","Queueselector","LeadID","AgentId","CallTime","utc","sortable","QueueEnterTime","AnswerTime","CallEndTime","QueueWaitTime","IvrTime","IsAgentCall","talktime","duration","IsTransferCall","CallStatus","MainCall","TransferTo","TransferFrom","QueryType","IssueName","SubIssueName","InsurerName","QueueName","BMSQueueName","IvrTypeList","config","data","Id","Display","col","nextProps","items","CommonData","joinObject","isError","store","console","log","map","fnBindStore","fnDatatableCol","toast","queues","selectedqueues","val","serverip","join","GetCommonData","ProductID","Process","result","GetMySqlData","ProductType","length","target","fetchProductData","fetchQueueData","selectedList","selectedItem","columns","moreinfolist","showAlert","AlertMsg","AlertVarient","show","variant","body","md","tag","Group","controlId","firstoption","onChange","options","labelledBy","selectAllLabel","Date","dateFormat","onClick","fetchInboundData","React","Component","connect","GetCommonspData","GetDataDirect","AlertBox","setTimeout","GetCommonData_fetched","Todos","dataToSend","statename","localStorage","setItem","JSON","stringify","constants","GET_COMMON_SUCCESS","payload","GetCommonData_fetch_error","error","GET_COMMON_FAIL","cb","undefined","dispatch","getState","getItem","parse","axios","get","api","base_url","params","then","catch","InsertData","post","INSERT_COMMON_SUCCESS","INSERT_COMMON_FAIL","InsertData_fetch_error","UpdateData","UPDATE_COMMON_SUCCESS","UPDATE_COMMON_FAIL","UpdateData_fetch_error","ManagerHierarchy","nodes","checked","expanded","UserId","getuser","RoleId","UserID","ManagerId","res","replace","handleShow","SelectedSupervisors","forceUpdate","document","getElementById","style","right","checkeditem","index","indexOf","splice","id","onMouseLeave","onMouseOut","onMouseEnter","onButtonClick","checkModel","showNodeIcon","onCheck","onExpand","showExpandAll","DropDownListMysql","CallApi","Idfield","Displayfield","limit","skip","cols","con","visible","Control","as","disabled","key","item","DropDown","displayoption"],"mappings":"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","file":"static/js/38.ace76b24.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n    GetCommonData, GetCommonspData, GetFileExists\r\n} from \"../store/actions/CommonAction\";\r\nimport {\r\n    GetMySqlData, GetDataDirect\r\n} from \"../store/actions/CommonMysqlAction\";\r\nimport { connect } from \"react-redux\";\r\nimport { OpenSalesView, getUrlParameter, getuser, fnDatatableCol, hhmmss, joinObject } from '../utility/utility.jsx';\r\n//import { Multiselect } from 'multiselect-react-dropdown';\r\n//import { MDBSelect } from \"mdbreact\";\r\n//import Select from 'react-select'; \r\n//import makeAnimated from 'react-select/animated'; \r\nimport DropDownListMysql from './Common/DropDownListMysql';\r\nimport MultiSelect from \"react-multi-select-component\";\r\nimport DataTable from './Common/DataTableWithFilter';\r\nimport DropDown from './Common/DropDown';\r\nimport ManagerHierarchy from './Common/ManagerHierarchy';\r\nimport Moment from 'react-moment';\r\nimport moment from 'moment';\r\nimport { If, Then, Else } from 'react-if';\r\nimport AlertBox from './Common/AlertBox';\r\n\r\n\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport * as Datetime from 'react-datetime';\r\nimport 'react-datetime/css/react-datetime.css'\r\n\r\n\r\n\r\n// reactstrap components\r\nimport {\r\n    Card,\r\n    CardHeader,\r\n    CardBody,\r\n    CardTitle,\r\n    Table,\r\n    Row,\r\n    Col\r\n} from \"reactstrap\";\r\nimport { ButtonGroup, Button, Modal, Form } from 'react-bootstrap';\r\nimport { func, string } from \"prop-types\";\r\n\r\nclass InboundQueueReport extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            root: \"InboundCallData\",\r\n            PageTitle: \"Inbound Queue Report\",\r\n            ProductData: [],\r\n            ProductId: 0,\r\n            ReportDate: moment().subtract(1, 'days').format(\"YYYY-MM-DD\"),\r\n            ReportTime: null,\r\n            startdate: moment().format(\"YYYY-MM-DD\"),\r\n            enddate: moment().format(\"YYYY-MM-DD\"),\r\n            maxdate: moment().subtract(60, 'days').format(\"YYYY-MM-DD\"),\r\n            showMoreInfoModal: false,\r\n            MoreInfoData: [],\r\n            selectedIvrProduct: \"\",\r\n            ivrType: \"0\",\r\n            ivrProducts: [],\r\n            ivrQueues: [],\r\n            SelectedQueues: [],\r\n            queueServerIp: \"\",\r\n            selectedValue: [{ label: \"Select IVR Queues\", value: \"0\" }],\r\n            ConfType: '',\r\n            addClass: '',\r\n\r\n        };\r\n        this.ivrtypechange = this.ivrtypechange.bind(this);\r\n        this.ivrproductchange = this.ivrproductchange.bind(this);\r\n        this.onSelect = this.onSelect.bind(this);\r\n\r\n        this.columnlist = [\r\n            {\r\n                name: \"CallId\",\r\n                selector: \"CallId\",\r\n                width: \"150px\",\r\n                type: \"string\",\r\n                cell: row => <div className=\"CallId\">{row.CallId ? row.CallId : \"N.A\"}</div>,\r\n            },\r\n            {\r\n                name: \"Product\",\r\n                selector: \"Product\",\r\n                searchable: true\r\n            },\r\n            {\r\n                name: \"IvrType\",\r\n                selector: \"IvrType\",\r\n                cell: row => <div className=\"IvrType\">{row.IvrType ? row.IvrType : \"N.A\"}</div>,\r\n\r\n            },\r\n            {\r\n                name: \"Ivr1\",\r\n                selector: \"Ivr1\",\r\n                cell: row => <div className=\"Ivr1\">{row.Ivr1 ? row.Ivr1 : \"N.A\"}</div>,\r\n\r\n            },\r\n            {\r\n                name: \"Ivr2\",\r\n                selector: \"Ivr2\",\r\n                cell: row => <div className=\"Ivr2\">{row.Ivr2 ? row.Ivr2 : \"N.A\"}</div>,\r\n\r\n            },\r\n            {\r\n                name: \"TollFreeNumber\",\r\n                selector: \"TollFreeNumber\",\r\n                type: \"number\",\r\n                searchable: true,\r\n                cell: row => <div className=\"LeadID\">{row.TollFreeNumber ? row.TollFreeNumber : \"N.A\"}</div>,\r\n\r\n            },\r\n            {\r\n                name: \"TollFreeType\",\r\n                selector: \"TollFreeType\",\r\n                cell: row => <div className=\"LeadID\">{row.TollFreeType ? row.TollFreeType : \"N.A\"}</div>,\r\n            },\r\n            {\r\n                name: \"Queueselector\",\r\n                selector: \"Queueselector\",\r\n                type: \"string\",\r\n                searchable: true,\r\n                cell: row => <div className=\"LeadID\">{row.Queueselector ? row.Queueselector : \"N.A\"}</div>,\r\n            },\r\n            {\r\n                name: \"LeadID\",\r\n                selector: \"LeadID\",\r\n                width: \"150px\",\r\n                type: \"string\",\r\n                searchable: true,\r\n                cell: row => <div className=\"LeadID\">{row.LeadID ? row.LeadID : \"N.A\"}</div>,\r\n            },\r\n            {\r\n                name: \"AgentId\",\r\n                selector: \"AgentId\",\r\n                width: \"150px\",\r\n                type: \"string\",\r\n                searchable: true,\r\n                cell: row => <div className=\"AgentId\">{row.AgentId ? row.AgentId : \"N.A\"}</div>,\r\n            },\r\n            {\r\n                name: \"CallTime\",\r\n                selector: \"CallTime\",\r\n                cell: row => <div className=\"CallTime\">{row.CallTime ? <Moment format=\"YYYY-MM-DD HH:mm:ss\" utc={true}\r\n                >{row.CallTime}</Moment> : \"N.A\"}</div>,\r\n                type: \"datetime\",\r\n                sortable: true,\r\n                width: \"150px\",\r\n            },\r\n            {\r\n                name: \"QueueEnterTime\",\r\n                selector: \"QueueEnterTime\",\r\n                cell: row => <div className=\"QueueEnterTime\">{row.QueueEnterTime ? <Moment format=\"YYYY-MM-DD HH:mm:ss\" utc={true}\r\n                >{row.QueueEnterTime}</Moment> : \"N.A\"}</div>,\r\n                type: \"datetime\",\r\n                sortable: true,\r\n                width: \"150px\",\r\n            },\r\n            {\r\n                name: \"AnswerTime\",\r\n                selector: \"AnswerTime\",\r\n                cell: row => <div className=\"AnswerTime\">{row.AnswerTime ? <Moment format=\"YYYY-MM-DD HH:mm:ss\" utc={true}\r\n                >{row.AnswerTime}</Moment> : \"N.A\"}</div>,\r\n                type: \"datetime\",\r\n                sortable: true,\r\n                width: \"150px\",\r\n            },\r\n            {\r\n                name: \"CallEndTime\",\r\n                selector: \"CallEndTime\",\r\n                cell: row => <div className=\"CallEndTime\">{row.CallEndTime ? <Moment format=\"YYYY-MM-DD HH:mm:ss\" utc={true}\r\n                >{row.CallEndTime}</Moment> : \"N.A\"}</div>,\r\n                type: \"datetime\",\r\n                sortable: true,\r\n                width: \"150px\",\r\n            },\r\n            {\r\n                name: \"QueueWaitTime\",\r\n                selector: \"QueueWaitTime\",\r\n                cell: row => <div className=\"QueueWaitTime\">{row.QueueWaitTime ? row.QueueWaitTime : \"N.A\"}</div>,\r\n\r\n            },\r\n            {\r\n                name: \"IvrTime\",\r\n                selector: \"IvrTime\",\r\n                cell: row => <div className=\"IvrTime\">{row.IvrTime ? row.IvrTime : \"N.A\"}</div>,\r\n            },\r\n            {\r\n                name: \"IsAgentCall\",\r\n                selector: \"IsAgentCall\",\r\n                cell: row => <div className=\"IsAgentCall\">{row.IsAgentCall ? row.IsAgentCall : \"N.A\"}</div>,\r\n            },\r\n            {\r\n                name: \"talktime\",\r\n                selector: \"talktime\",\r\n                cell: row => <div className=\"talktime\">{row.talktime ? row.talktime : \"N.A\"}</div>,\r\n            },\r\n            {\r\n                name: \"duration\",\r\n                selector: \"duration\",\r\n                cell: row => <div className=\"duration\">{row.duration ? row.duration : \"N.A\"}</div>,\r\n            },\r\n            {\r\n                name: \"IsTransferCall\",\r\n                selector: \"IsTransferCall\",\r\n                cell: row => <div className=\"IsTransferCall\">{row.IsTransferCall ? row.IsTransferCall : \"N.A\"}</div>,\r\n            },\r\n            {\r\n                name: \"CallStatus\",\r\n                selector: \"CallStatus\",\r\n                searchable: true,\r\n                cell: row => <div className=\"CallStatus\">{row.CallStatus ? row.CallStatus : \"N.A\"}</div>,\r\n\r\n            },\r\n            {\r\n                name: \"MainCall\",\r\n                selector: \"MainCall\",\r\n                cell: row => <div className=\"MainCall\">{row.MainCall ? row.MainCall : \"N.A\"}</div>,\r\n            },\r\n            {\r\n                name: \"TransferTo\",\r\n                selector: \"TransferTo\",\r\n                cell: row => <div className=\"TransferTo\">{row.TransferTo ? row.TransferTo : \"N.A\"}</div>,\r\n            },\r\n            {\r\n                name: \"TransferFrom\",\r\n                selector: \"TransferFrom\",\r\n                cell: row => <div className=\"TransferFrom\">{row.TransferFrom ? row.TransferFrom : \"N.A\"}</div>,\r\n            },\r\n            {\r\n                name: \"IvrType\",\r\n                selector: \"IvrType\",\r\n                cell: row => <div className=\"IvrType\">{row.IvrType ? row.IvrType : \"N.A\"}</div>,\r\n\r\n            },\r\n            {\r\n                name: \"QueryType\",\r\n                selector: \"QueryType\",\r\n                cell: row => <div className=\"QueryType\">{row.QueryType ? row.QueryType : \"N.A\"}</div>,\r\n\r\n            },\r\n            {\r\n                name: \"IssueName\",\r\n                selector: \"IssueName\",\r\n                cell: row => <div className=\"IssueName\">{row.IssueName ? row.IssueName : \"N.A\"}</div>,\r\n\r\n            },\r\n            {\r\n                name: \"SubIssueName\",\r\n                selector: \"SubIssueName\",\r\n                cell: row => <div className=\"SubIssueName\">{row.SubIssueName ? row.SubIssueName : \"N.A\"}</div>,\r\n\r\n            },\r\n            {\r\n                name: \"InsurerName\",\r\n                selector: \"InsurerName\",\r\n                cell: row => <div className=\"InsurerName\">{row.InsurerName ? row.InsurerName : \"N.A\"}</div>,\r\n\r\n            },\r\n            {\r\n                name: \"QueueName\",\r\n                selector: \"QueueName\",\r\n                cell: row => <div className=\"QueueName\">{row.QueueName ? row.QueueName : \"N.A\"}</div>,\r\n\r\n            },\r\n            {\r\n                name: \"BMSQueueName\",\r\n                selector: \"BMSQueueName\",\r\n                cell: row => <div className=\"BMSQueueName\">{row.BMSQueueName ? row.BMSQueueName : \"N.A\"}</div>,\r\n\r\n            },\r\n            {\r\n                name: \"IsTicketAssignedAgent\",\r\n                selector: \"IsTicketAssignedAgent\",\r\n                type: \"bool\",\r\n\r\n            }\r\n\r\n        ];\r\n\r\n\r\n\r\n        this.IvrTypeList = {\r\n            config:\r\n            {\r\n                root: \"Ivrtypelist\",\r\n                data: [{ Id: \"Service\", Display: \"Service\" }, { Id: \"Sales\", Display: \"Sales\" }\r\n                    , { Id: \"Claim\", Display: \"Claim\" }],\r\n            }\r\n        };\r\n\r\n\r\n    }\r\n\r\n\r\n    componentWillMount() {\r\n        // this.props.GetMySqlData({\r\n        //   root: this.state.root,\r\n        //   startdate: this.state.startdate,\r\n        //   enddate: this.state.enddate,\r\n        //   conftype: 'sales_to_service',\r\n        // }, function (result) {\r\n        //   this.setState({ InboundQueueReport: result.data.data[0] });\r\n        // }.bind(this));\r\n\r\n    }\r\n\r\n    fnBindStore(col, nextProps) {\r\n        //debugger;\r\n        if (col.type == \"dropdown\") {\r\n            let items;\r\n            if (nextProps.CommonData[this.state.root] && (nextProps.CommonData[col.config.root] || col.config.data)) {\r\n                items = joinObject(nextProps.CommonData[this.state.root], (nextProps.CommonData[col.config.root] || col.config.data), col.name)\r\n                this.setState({ items: items });\r\n            }\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        //debugger;\r\n        if (!nextProps.CommonData.isError) {\r\n            //debugger;\r\n            //this.setState({ InboundQueueReport: nextProps.CommonData[this.state.root] });\r\n            this.setState({ items: nextProps.CommonData[this.state.root] });\r\n            this.setState({ store: nextProps.CommonData });\r\n            console.log(nextProps.CommonData[this.state.root]);\r\n            this.columnlist.map(col => (\r\n                this.fnBindStore(col, nextProps)\r\n            ));\r\n        }\r\n    }\r\n\r\n    fnDatatableCol() {\r\n\r\n        var columns = fnDatatableCol(this.columnlist);\r\n        return columns;\r\n    }\r\n\r\n\r\n    fetchInboundData() {\r\n        this.setState({addClass:'fa fa-play-circle'});\r\n        if (this.state.ivrType == 0) {\r\n        toast(\"Please enter ivrType\", { type: 'error' });\r\n        this.setState({ addClass: '' });\r\n        return;\r\n          }\r\n        // if (this.state.ivrProducts == '') {\r\n        // toast(\"Please enter ivrProducts\", { type: 'error' });\r\n        // return;\r\n        // }\r\n        // if (this.state.ivrQueues == '') {\r\n        // toast(\"Please enter ivrQueues\", { type: 'error' });\r\n        // return;\r\n        // }  \r\n          \r\n        let queues = this.state.selectedValue;\r\n\r\n        var serverip = queues.map(function (val) {\r\n            return val.serverip;\r\n        });\r\n\r\n        var queuestring = queues.map(function (val) {\r\n            return val.label;\r\n        });\r\n        var selectedqueues = queuestring.join(\",\");\r\n\r\n        this.props.GetCommonData({\r\n            root: this.state.root,\r\n            startdate: this.state.startdate,\r\n            enddate: this.state.enddate,\r\n            queues: selectedqueues,\r\n            ProductID: this.state.selectedIvrProduct,\r\n            Process: this.state.ivrType,\r\n\r\n        }, function (result) {\r\n            this.setState({ InboundQueueReport: result.data.data[0] ,addClass:''});\r\n            let nextProps = this.props;\r\n            this.columnlist.map(col => (\r\n                this.fnBindStore(col, nextProps)\r\n            ));\r\n        }.bind(this));\r\n        this.setState({ addClass: '' });\r\n\r\n    }\r\n\r\n    fetchProductData() {\r\n\r\n        this.props.GetMySqlData({\r\n            root: \"getProductByIvrType\",\r\n            ProductType: this.state.ivrType,\r\n        }, function (result) {\r\n            this.setState({ ivrProducts: result.data.data[0] });\r\n        }.bind(this));\r\n\r\n    }\r\n\r\n    fetchQueueData() {\r\n\r\n        //debugger;\r\n        this.props.GetMySqlData({\r\n            root: \"getQueuesByIvrProduct\",\r\n            ProductType: this.state.ivrType,\r\n            ProductId: this.state.selectedIvrProduct,\r\n        }, function (result) {\r\n            this.setState({\r\n                ivrQueues: result.data.data[0],\r\n            });\r\n            if (result.data.data[0].length == 1) {\r\n                this.setState({\r\n                    selectedValue: result.data.data[0]\r\n                });\r\n            }\r\n        }.bind(this));\r\n\r\n    }\r\n\r\n\r\n    ivrtypechange(e, props) {\r\n        this.setState({\r\n            ivrType: e.target.value\r\n        }, function () {\r\n            this.fetchProductData();\r\n        });\r\n\r\n    }\r\n\r\n    ivrproductchange(e, props) {\r\n        this.setState({\r\n            selectedIvrProduct: e.target.value,\r\n            ivrQueues : [],\r\n            selectedValue : [{ label: \"Select IVR Queues\", value: \"0\" }]\r\n        }, function () {\r\n            this.fetchQueueData();\r\n        });\r\n    }\r\n\r\n    conftypechange(e, props) {\r\n        this.setState({\r\n            ConfType: e.target.value\r\n        }, function () {\r\n            //this.fetchConferenceData();\r\n        });\r\n\r\n    }\r\n\r\n    handleChange = (e, props) => {\r\n\r\n        if (e._isAMomentObject) {\r\n            this.setState({ ReportDate: e.format(\"YYYY-MM-DD\") }, function () {\r\n                this.fetchCallBackData();\r\n            });\r\n        }\r\n\r\n\r\n    }\r\n\r\n    handleStartDateChange = (e, props) => {\r\n\r\n        if (e._isAMomentObject) {\r\n            this.setState({ startdate: e.format(\"YYYY-MM-DD\") }, function () {\r\n                //this.fetchCallBackData();\r\n            });\r\n        }\r\n\r\n\r\n    }\r\n\r\n    handleEndDateChange = (e, props) => {\r\n\r\n        if (e._isAMomentObject) {\r\n            this.setState({ enddate: e.format(\"YYYY-MM-DD\") }, function () {\r\n                //this.fetchCallBackData();\r\n            });\r\n        }\r\n\r\n\r\n    }\r\n\r\n    onSelect(selectedList, selectedItem) {\r\n        console.log(selectedList);\r\n        this.setState({ selectedValue: selectedList })\r\n    }\r\n\r\n    validation = (currentDate) => {\r\n        return !currentDate.isBefore(moment(this.state.maxdate));\r\n    };\r\n\r\n    validationEndDate = (currentDate) => {\r\n        return !currentDate.isBefore(moment(this.state.startdate));\r\n    };\r\n\r\n    render() {\r\n        const columns = this.columnlist;\r\n        //const columns = this.fnDatatableCol();\r\n        const moreinfocolumns = this.moreinfolist;\r\n        const { items, PageTitle, InboundQueueReport, showAlert, AlertMsg, AlertVarient, ReportTime, MoreInfoData } = this.state;\r\n        console.log(\"InboundQueueReport\", InboundQueueReport);\r\n        console.log(\"columns\", columns);\r\n        let selectedLeads = [];\r\n\r\n\r\n        return (\r\n            <>\r\n                <div className=\"content\">\r\n                    <AlertBox show={showAlert} variant={AlertVarient} body={AlertMsg}></AlertBox>\r\n                    <ToastContainer />\r\n                    <Row>\r\n                        <Col md=\"12\">\r\n                            <Card>\r\n                                <CardHeader>\r\n                                    <Row>\r\n                                        <Col md={12}>\r\n                                            <CardTitle tag=\"h5\">{PageTitle}</CardTitle>\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n                                    <Row>\r\n                                        <Col md={2}>\r\n                                            <Form.Group controlId=\"ivrtype_dropdown\">\r\n                                                <DropDownListMysql firstoption=\"Select Ivr Type\" value={this.state.ivrType} col={this.IvrTypeList} onChange={this.ivrtypechange}>\r\n                                                </DropDownListMysql>\r\n                                            </Form.Group>\r\n                                        </Col>\r\n                                        <Col md={2}>\r\n                                            <Form.Group controlId=\"product_dropdown\">\r\n                                                <DropDown firstoption=\"Select Ivr Product\" items={this.state.ivrProducts} onChange={this.ivrproductchange}>\r\n                                                </DropDown>\r\n                                            </Form.Group>\r\n\r\n                                        </Col>\r\n                                        <Col md={3}>\r\n                                            <MultiSelect\r\n                                                options={this.state.ivrQueues} // Options to display in the dropdown\r\n                                                value={this.state.selectedValue} // Preselected value to persist in dropdown\r\n                                                onChange={this.onSelect} // Function will trigger on select event                                                \r\n                                                labelledBy={\"Select IVR Queues\"}\r\n                                                selectAllLabel={\"Select ALL IVR Queues\"}\r\n                                            />\r\n                                        </Col>\r\n\r\n                                        <Col md={2}>\r\n                                            <Datetime value={new Date()}\r\n                                                dateFormat=\"YYYY-MM-DD\"\r\n                                                value={this.state.startdate}\r\n                                                isValidDate={this.validation}\r\n                                                onChange={moment => this.handleStartDateChange(moment)}\r\n                                                utc={true}\r\n                                                timeFormat={false}\r\n                                                className=\"form-group\"\r\n                                            />\r\n                                        </Col>\r\n                                        <Col md={2}>\r\n                                            <Datetime value={new Date()}\r\n                                                dateFormat=\"YYYY-MM-DD\"\r\n                                                value={this.state.enddate}\r\n                                                isValidDate={this.validationEndDate}\r\n                                                onChange={moment => this.handleEndDateChange(moment)}\r\n                                                utc={true}\r\n                                                timeFormat={false}\r\n                                                className=\"form-group\"\r\n                                            />\r\n                                        </Col>\r\n                                        <Col md={1}>\r\n                                            <Button className={this.state.addClass} variant=\"primary\" onClick={() => this.fetchInboundData()}>Fetch</Button>\r\n                                        </Col>\r\n\r\n                                    </Row>\r\n\r\n                                </CardHeader>\r\n                                <CardBody>\r\n                                    <DataTable\r\n                                        columns={columns}\r\n                                        data={(InboundQueueReport && InboundQueueReport.length > 0) ? InboundQueueReport : []}\r\n                                    />\r\n                                </CardBody>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n\r\n\r\n\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        CommonData: state.CommonData\r\n    };\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    {\r\n        GetCommonData,\r\n        GetCommonspData,\r\n        GetMySqlData,\r\n        GetDataDirect,\r\n\r\n    }\r\n)(InboundQueueReport);","\r\nimport React from \"react\";\r\nimport { Alert } from 'react-bootstrap';\r\n\r\n\r\nclass AlertBox extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            show: this.props.show\r\n        }\r\n    }\r\n    componentDidUpdate() {\r\n\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        this.setState({ show: nextProps.show });\r\n        if (nextProps.show) {\r\n            setTimeout(function () {\r\n                this.setState({ show: false });\r\n            }.bind(this), 5000);\r\n        }\r\n    }\r\n    render() {\r\n        if (this.state.show) {\r\n            return (\r\n                <Alert variant={this.props.variant}>\r\n                    {this.props.body}\r\n                </Alert>\r\n            );\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nexport default AlertBox;\r\n","import axios from \"axios\";\nimport config from \"../../config.jsx\";\nimport constants from \"../../Constants/Constants.jsx\";\n\nconst GetCommonData_fetched = Todos => {\n\n  if (Todos.dataToSend.state && Todos.dataToSend.statename) {\n    localStorage.setItem(Todos.dataToSend.statename, JSON.stringify(Todos.data));\n  }\n\n  return {\n    type: constants.GET_COMMON_SUCCESS,\n    payload: Todos.data,\n    root: Todos.dataToSend.root\n  };\n};\n\nconst GetCommonData_fetch_error = error => {\n  return {\n    type: constants.GET_COMMON_FAIL,\n    payload: error\n  };\n};\n\nexport const GetMySqlData = (dataToSend,cb) => {\n\n  if (dataToSend.data != null || dataToSend.data != undefined) {\n    return function (dispatch, getState) {\n      dispatch(GetCommonData_fetched({ data: dataToSend.data, dataToSend: dataToSend }));\n    };\n  }\n  try {\n    if ((dataToSend.state && localStorage.getItem(dataToSend.statename)) || localStorage.getItem(dataToSend.statename)) {\n\n      return function (dispatch, getState) {\n        let data = JSON.parse(localStorage.getItem(dataToSend.statename))\n        dispatch(GetCommonData_fetched({ data: data, dataToSend: dataToSend }));\n      }\n    }\n  }\n  catch (e) {\n\n  }\n\n\n  return function (dispatch, getState) {\n    axios\n      .get(config.api.base_url + \"/mydb/list/\", {\n        params: dataToSend\n      })\n      .then(data => {\n        if (dataToSend.state && dataToSend.statename) {\n          localStorage.setItem(dataToSend.statename, JSON.stringify(data.data.data));\n        }\n        if (cb) {\n          cb(data);\n        }\n        dispatch(GetCommonData_fetched({ data: data.data.data[0], dataToSend: dataToSend }));\n      })\n      .catch(error => {\n        dispatch(GetCommonData_fetch_error(error, dataToSend));\n      });\n  };\n};\n\n\n\n\nconst InsertData_fetched = Todos => {\n\n  return {\n    type: constants.INSERT_COMMON_SUCCESS,\n    payload: Todos.data\n  };\n};\n\nconst InsertData_fetch_error = error => {\n  return {\n    type: constants.INSERT_COMMON_FAIL,\n    payload: error\n  };\n};\n\nexport const InsertData = (dataToSend, cb) => {\n  return function (dispatch, getState) {\n    axios\n      .post(config.api.base_url + \"/mydb/insert/\", {\n        data: dataToSend\n      })\n      .then(data => {\n        if (cb) {\n          cb(data);\n        }\n        dispatch(InsertData_fetched({ data: data.data }));\n      })\n      .catch(error => {\n        dispatch(InsertData_fetch_error(error));\n      });\n  };\n};\n\n\nconst UpdateData_fetched = Todos => {\n\n  return {\n    type: constants.UPDATE_COMMON_SUCCESS,\n    payload: Todos.data\n  };\n};\n\nconst UpdateData_fetch_error = error => {\n  return {\n    type: constants.UPDATE_COMMON_FAIL,\n    payload: error\n  };\n};\n\nexport const UpdateData = (dataToSend, cb) => {\n\n  return function (dispatch, getState) {\n    axios\n      .post(config.api.base_url + \"/mydb/update/\", {\n        data: dataToSend\n      })\n      .then(data => {\n        if (cb) {\n          cb(data);\n        }\n        dispatch(UpdateData_fetched({ data: data.data }));\n      })\n      .catch(error => {\n        dispatch(UpdateData_fetch_error(error));\n      });\n  };\n};\n\n\n\n\nexport const GetDataDirect = (dataToSend, cb) => {\n\n  try {\n    if ((dataToSend.state && localStorage.getItem(dataToSend.statename)) || localStorage.getItem(dataToSend.statename)) {\n\n      let data = JSON.parse(localStorage.getItem(dataToSend.statename));\n      cb(data);\n      return;\n    }\n  }\n  catch (e) {\n\n  }\n  //return function (dispatch, getState) {\n  axios\n    .get(config.api.base_url + \"/mydb/list/\", {\n      params: dataToSend\n    })\n    .then(data => {\n      if (dataToSend.state && dataToSend.statename) {\n        localStorage.setItem(dataToSend.statename, JSON.stringify(data.data.data));\n      }\n      cb(data.data.data);\n\n      //dispatch(GetCommonData_fetched({ data: data.data.data[0], dataToSend: dataToSend }));\n    })\n    .catch(error => {\n      //dispatch(GetCommonData_fetch_error(error, dataToSend));\n    });\n  //};\n\n};\n\nexport const GetRealTimeAgentData = (manager, context, cb) => {\n\n  let url = config.api.realtimeurl + \"RealTimeAgentStatus?managercode=\" + (context == \"\" ? manager : \"\") + \"&context=\" + context;\n\n  axios\n    .get(url)\n    .then(data => {\n\n      cb(data);\n      //dispatch(GetCommonData_fetched({ data: data.data.data[0], dataToSend: dataToSend }));\n    })\n    .catch(error => {\n      //dispatch(GetCommonData_fetch_error(error, dataToSend));\n    });\n  //};\n\n};\n\nexport const GetRealTimeTotalData = (context, cb) => {\n\n  let url = config.api.realtimeurl + \"RealTimeData?context=\" + context;\n\n  axios\n    .get(url)\n    .then(data => {\n\n      cb(data);\n      //dispatch(GetCommonData_fetched({ data: data.data.data[0], dataToSend: dataToSend }));\n    })\n    .catch(error => {\n      //dispatch(GetCommonData_fetch_error(error, dataToSend));\n    });\n  //};\n\n};\n\n\nexport const SendOTP = (dataToSend, cb) => {\n  let url = config.api.SendOTP;\n  const headers = {\n    'Content-Type': 'application/json',\n    'Authorization': 'cG9saWN5 YmF6YWFy'\n  }\n  axios\n    .post(url,\n      dataToSend\n      , {\n        headers: headers\n      })\n    .then(data => {\n\n      cb(data);\n    })\n    .catch(error => {\n    });\n};\n\nexport const ValidateOTP = (dataToSend, cb) => {\n  let url = config.api.ValidateOTP;\n  const headers = {\n    'Content-Type': 'application/json',\n    'Authorization': 'cG9saWN5 YmF6YWFy'\n  }\n  axios\n    .post(url,\n      dataToSend\n      , {\n        headers: headers\n      })\n    .then(data => {\n\n      cb(data);\n    })\n    .catch(error => {\n    });\n};\n\nexport const GetComunicationData = (dataToSend, cb) => {\n\n  return function (dispatch, getState) {\n    axios\n      .get(config.api.ServiceAPI + dataToSend.root, {\n        params: dataToSend.data\n      })\n      .then(data => {\n        cb(data);\n        //dispatch(GetCommonData_fetched({ data: data, dataToSend: dataToSend }));\n      })\n      .catch(error => {\n        dispatch(GetCommonData_fetch_error(error, dataToSend));\n      });\n  };\n};","\r\nimport React, { Suspense } from 'react';\r\n\r\nimport {\r\n    GetCommonData, GetCommonspData, GetDataDirect\r\n} from \"../../store/actions/CommonAction\";\r\nimport { getUrlParameter, getuser } from '../../utility/utility.jsx';\r\n\r\n\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport 'react-checkbox-tree/lib/react-checkbox-tree.css';\r\nimport CheckboxTree from 'react-checkbox-tree';\r\n\r\n\r\nclass ManagerHierarchy extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: [],\r\n            checked: [],\r\n            expanded: [],\r\n        }\r\n        //this.onExpand = this.onExpand.bind(this);\r\n    }\r\n    componentDidMount() {\r\n\r\n        let UserId = getuser().RoleId == 2 ? 75 : getuser().UserID;\r\n\r\n        GetDataDirect({\r\n            root: \"Hierarchy\",\r\n            ManagerId: UserId,\r\n            statename: \"Hierarchy-\" + UserId,\r\n            value: this.props.value,\r\n            state: true\r\n        }, function (result) {\r\n\r\n            let str = JSON.stringify(result);\r\n            var res = str.replace(/UserName/g, \"label\");\r\n            res = res.replace(this.props.value, \"value\");\r\n\r\n            this.setState({ nodes: JSON.parse(res) });\r\n        }.bind(this));\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n\r\n    }\r\n\r\n\r\n    onButtonClick() {\r\n        this.props.handleShow({\r\n            SelectedSupervisors: this.state.checked\r\n        });\r\n        this.forceUpdate();\r\n    }\r\n    onMouseEnter(e) {\r\n        document.getElementById(\"floating\").style.right = 0\r\n        document.getElementById(\"handle\").style.right = \"395px\"\r\n        //e.target.style.right = 0;\r\n    }\r\n    onMouseOut(e) {\r\n        setTimeout(function () {\r\n            document.getElementById(\"floating\").style.right = \"-400px\"\r\n            document.getElementById(\"handle\").style.right = \"-15px\"\r\n        }, 700);\r\n\r\n        //e.target.style.right = \"-350px\";\r\n    }\r\n    RemoveChecked(checkeditem) {\r\n        const { checked } = this.state;\r\n        let index = checked.indexOf(checkeditem);\r\n        if (index > -1) {\r\n            checked.splice(index, 1);\r\n        }\r\n        this.setState(checked);\r\n    }\r\n    onClick() {\r\n\r\n    }\r\n    render() {\r\n        const { nodes, checked } = this.state;\r\n        if (nodes.length == 0) {\r\n            return null;\r\n        }\r\n        return (\r\n\r\n\r\n            <div id=\"floating\" className=\"floating\" onMouseLeave={this.onMouseOut}>\r\n\r\n                <Row >\r\n                    <Col md=\"8\"><div id=\"handle\" className=\"handle\" onClick={this.onMouseEnter}>Filter</div></Col>\r\n                    <Col md=\"4\"><input type=\"button\" className=\"btn btn-primary\" onClick={this.onButtonClick.bind(this)} value=\"Show\" /></Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                    <Col>\r\n\r\n                        <div className=\"managers\">\r\n                            <CheckboxTree\r\n                                nodes={nodes}\r\n                                checked={this.state.checked}\r\n                                expanded={this.state.expanded}\r\n                                checkModel=\"all\"\r\n                                name=\"UserName\"\r\n                                showNodeIcon={false}\r\n                                onCheck={checked => this.setState({ checked })}\r\n                                onExpand={expanded => this.setState({ expanded })}\r\n                                showExpandAll={true}\r\n                            />\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n\r\n\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default ManagerHierarchy;\r\n","\r\nimport React from \"react\";\r\nimport { Form } from 'react-bootstrap';\r\nimport { connect } from \"react-redux\";\r\n// reactstrap components\r\n\r\nimport {\r\n    GetMySqlData\r\n} from \"../../store/actions/CommonMysqlAction\";\r\nclass DropDownListMysql extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            items: [],\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        if (this.state.items && this.state.items.length === 0) {\r\n            this.CallApi();\r\n        }\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        \r\n        // if (nextProps.col.config.rebind) {\r\n            \r\n        // }\r\n\r\n        if (!nextProps.CommonData.isError) {\r\n            //debugger;\r\n            if (nextProps.CommonData[this.props.col.config.root]) {\r\n                let str = JSON.stringify(nextProps.CommonData[this.props.col.config.root]);\r\n                var res = str.replace(this.props.col.config.Idfield, \"Id\");\r\n                res = res.replace(this.props.col.config.Displayfield, \"Display\");\r\n\r\n                this.setState({ items: JSON.parse(res) });\r\n            }\r\n        }\r\n    }\r\n\r\n    componentWillUpdate(){\r\n        //this.CallApi();\r\n    }\r\n\r\n    CallApi() {\r\n\r\n        this.props.GetMySqlData({\r\n            limit: 10,\r\n            skip: 0,\r\n            root: this.props.col.config.root,\r\n            cols: this.props.col.config.cols,\r\n            con: this.props.col.config.con,\r\n            data: this.props.col.config.data,\r\n            statename: this.props.col.config.statename,\r\n            state: this.props.col.config.state\r\n        });\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        let { items } = this.state;\r\n        const { value, onChange, visible } = this.props;\r\n\r\n        if (!items) {\r\n            items = [];\r\n        }\r\n        if (visible == false) {\r\n            return null;\r\n        }\r\n        return (\r\n\r\n            <div>\r\n\r\n                <Form.Control as=\"select\" disabled={this.props.disabled} value={value} name={this.props.col.name} onChange={onChange}>\r\n                    <option key={0} value={0}>{this.props.firstoption ? this.props.firstoption : \"Select\"}</option>\r\n                    {items.map(item => (\r\n                        <option key={item.Id} value={item.Id}>{item.Display}</option>\r\n                    ))}\r\n\r\n                </Form.Control>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        CommonData: state.CommonData\r\n    };\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    {\r\n        GetMySqlData\r\n    }\r\n)(DropDownListMysql);\r\n\r\n","\nimport React from \"react\";\nimport { Form } from 'react-bootstrap';\nimport { connect } from \"react-redux\";\n// reactstrap components\n\nimport {\n    GetCommonData\n} from \"../../store/actions/CommonAction\";\nclass DropDown extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: [],\n        }\n    }\n    componentDidMount() {\n    }\n    componentWillReceiveProps(nextProps) {\n        this.setState({ items: nextProps.items });\n\n    }\n\n    displayoption(item) {\n        return <option key={item.Id} value={item.Id}>{item.Display}</option>\n    }\n\n    render() {\n\n\n        let { name, value, onChange, visible, items } = this.props;\n        if (!items) {\n            items = [];\n        }\n        if (visible == false) {\n            return null;\n        }\n        return (\n\n            <div>\n\n                <Form.Control as=\"select\" disabled={this.props.disabled} value={value} name={name} onChange={onChange}>\n                    {(this.props.firstoption !== false) && (\n                        <option key={0} value={0}>{this.props.firstoption ? this.props.firstoption : \"Select\"}</option>\n                    )}\n                    {items.map(item => (\n                        this.displayoption(item)\n                    ))}\n\n                </Form.Control>\n            </div>\n\n        );\n    }\n}\n\n\nexport default DropDown;\n\n"],"sourceRoot":""}