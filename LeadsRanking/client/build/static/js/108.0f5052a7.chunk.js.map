{"version":3,"sources":["views/SurveyForm.jsx"],"names":["Question","props","formEntry","asterix","FieldOptions","split","NestedQuestions","items","filter","item","QuestionID","NestedQuestionId","display","FieldType","toLowerCase","Group","as","Col","md","key","controlId","Label","QuestionText","IsRequired","className","map","option","index","onClick","handleChange","value","name","type","formvalue","Check","onChange","custom","label","id","Control","required","placeholder","disabled","selected","target","href","src","allow","style","width","border","height","NestedQuestion","SelectedOption","SurveyForm","e","state","od","handleFormvalue","getAttribute","indexOf","splice","length","push","_isAMomentObject","format","parseInt","setState","ModalValueChanged","i","console","log","isLoaded","showModal","store","activePage","root","departmentId","stepOnePart","saved","PageTitle","PageDescription","FormTitle","event","user","handleClose","bind","handleShow","handleSave","selectedrow","getUrlParameter","SurveyMasterList","columnlist","searchable","editable","sid","uid","this","GetCommonData","limit","skip","c","result","cols","GetJsonToArray","con","GetCommonspData","params","data","Eligible","IsComplete","setTimeout","getuser","nextProps","CommonData","isError","SurveyName","Description","row","Object","assign","preventDefault","document","getElementsByName","reportValidity","JSON","parse","stringify","toast","error","flag","body","SurveyId","UserId","CreatedOn","moment","QuestionId","AnswerText","AnswerId","IsActive","InsertData","status","UpdateData","querydata","alert","nested","count","dangerouslySetInnerHTML","__html","IsNestedQuestion","Row","tag","renderSwitch","React","Component","connect"],"mappings":"sWA8BMA,EAAW,SAAXA,EAAYC,GAEhB,IAeIC,EAfAC,EAAU,mCACVC,EAAeH,EAAMG,aAAaC,MAAM,KAUxCC,EAAkBL,EAAMM,MAAMC,QAAO,SAAAC,GACvC,OAAOA,EAAKC,aAAeT,EAAMU,oBAqInC,OAjIIV,EAAMW,UAC6B,SAAjCX,EAAMY,UAAUC,gBAClBZ,EACE,kBAAC,IAAKa,MAAN,CAAYC,GAAIC,IAAKC,GAAI,GAAIC,IAAKlB,EAAMS,WAAYU,UAAWnB,EAAMS,YAClE,6BAAK,kBAAC,IAAKW,MAAN,KAAapB,EAAMqB,aAAcrB,EAAMsB,YAAcpB,IAC3D,wBAAIqB,UAAU,gBACXpB,EAAaqB,KAAI,SAACC,EAAQC,GACzB,OACE,wBACEC,QAAS3B,EAAM4B,aACfC,MAAOJ,EACPK,KAAM9B,EAAMS,WACZsB,KAAK,QACLR,UAAWvB,EAAMgC,UAAUhC,EAAMS,cAAgBgB,EAAS,gBAAkB,IAC3EA,SASsB,YAAjCzB,EAAMY,UAAUC,gBAClBZ,EACE,kBAAC,IAAKa,MAAN,CAAYC,GAAIC,IAAKC,GAAI,GAAIC,IAAKlB,EAAMS,WAAYU,UAAWnB,EAAMS,YAClE,6BAAK,kBAAC,IAAKW,MAAN,KAAapB,EAAMqB,aAAcrB,EAAMsB,YAAcpB,IAC1DC,EAAaqB,KAAI,SAACC,EAAQC,GACzB,OACE,kBAAC,IAAKO,MAAN,CAEEC,SAAUlC,EAAM4B,aAChBO,QAAM,EACNZ,UAAU,wBAEVa,MAAOX,EACPI,MAAOJ,EACPM,KAAM/B,EAAMY,UAAUC,cACtBiB,KAAM9B,EAAMS,WACZ4B,GAAIZ,EAAS,IAAMzB,EAAMY,UAAUC,qBAOV,YAAjCb,EAAMY,UAAUC,gBAClBZ,EACE,kBAAC,IAAKa,MAAN,CAAYC,GAAIC,IAAKC,GAAI,GAAIE,UAAWnB,EAAMS,WAAYS,IAAKlB,EAAMS,YACnE,6BAAK,kBAAC,IAAKW,MAAN,KAAapB,EAAMqB,aAAcrB,EAAMsB,YAAcpB,IAC1D,kBAAC,IAAKoC,QAAN,CAAcC,SAAUvC,EAAMsB,WAC5BS,KAAK,OAAOG,SAAUlC,EAAM4B,aAAcb,GAAG,WAAWyB,YAAY,YAIvC,SAAjCxC,EAAMY,UAAUC,gBAClBZ,EACE,kBAAC,IAAKa,MAAN,CAAYC,GAAIC,IAAKC,GAAI,GAAIE,UAAWnB,EAAMS,WAAYS,IAAKlB,EAAMS,YACnE,6BAAK,kBAAC,IAAKW,MAAN,KAAapB,EAAMqB,aAAcrB,EAAMsB,YAAcpB,IAC1D,kBAAC,IAAKoC,QAAN,CAAcC,SAAUvC,EAAMsB,WAC5BS,KAAK,QAAQG,SAAUlC,EAAM4B,aAAcY,YAAY,kBAI1B,UAAjCxC,EAAMY,UAAUC,gBAClBZ,EACE,kBAAC,IAAKa,MAAN,CAAYC,GAAIC,IAAKC,GAAI,GAAIE,UAAWnB,EAAMS,WAAYS,IAAKlB,EAAMS,YACnE,6BAAK,kBAAC,IAAKW,MAAN,KAAapB,EAAMqB,aAAcrB,EAAMsB,YAAcpB,IAC1D,kBAAC,IAAKoC,QAAN,CAAcC,SAAUvC,EAAMsB,WAC5BS,KAAK,SAASG,SAAUlC,EAAM4B,aAAcY,YAAY,YAI3B,YAAjCxC,EAAMY,UAAUC,gBAClBZ,EACE,kBAAC,IAAKa,MAAN,CAAYC,GAAIC,IAAKC,GAAI,GAAIE,UAAWnB,EAAMS,WAAYS,IAAKlB,EAAMS,YACnE,6BAAK,kBAAC,IAAKW,MAAN,KAAapB,EAAMqB,aAAcrB,EAAMsB,YAAcpB,IAC1D,kBAAC,IAAKoC,QAAN,CAAcvB,GAAG,SAASmB,SAAUlC,EAAM4B,aACxCY,YAAY,SAASD,SAAUvC,EAAMsB,YACrC,4BAAQJ,IAAI,aAAaW,MAAM,GAAGY,UAAQ,EAACC,UAAQ,GAAnD,sBACCvC,EAAaqB,KAAI,SAACC,EAAQC,GACzB,OACE,4BAAQR,IAAKQ,EAAQ,EAAI,YAAaG,MAAOJ,GAASA,SAO7B,UAAjCzB,EAAMY,UAAUC,gBAClBZ,EACE,kBAAC,IAAKa,MAAN,CAAYC,GAAIC,IAAKC,GAAI,GAAIC,IAAKlB,EAAMS,WAAYU,UAAWnB,EAAMS,YACnE,kBAAC,IAAKW,MAAN,KAAapB,EAAMqB,aAAcrB,EAAMsB,YAAcpB,GACrD,kBAAC,IAAKoC,QAAN,CACEC,SAAUvC,EAAMsB,WAChBS,KAAK,OAAOG,SAAUlC,EAAM4B,aAAcY,YAAa,YAI1B,SAAjCxC,EAAMY,UAAUC,gBAClBZ,EACE,kBAAC,IAAKa,MAAN,CAAYC,GAAIC,IAAKC,GAAI,GAAIC,IAAKlB,EAAMS,WAAYU,UAAWnB,EAAMS,YACnE,kBAAC,IAAKW,MAAN,KAAapB,EAAMqB,aAAcrB,EAAMsB,YAAcpB,KAItB,QAAjCF,EAAMY,UAAUC,gBAClBZ,EACE,kBAAC,IAAKa,MAAN,CAAYC,GAAIC,IAAKC,GAAI,GAAIC,IAAKlB,EAAMS,WAAYU,UAAWnB,EAAMS,YACnE,uBAAGkC,OAAO,SAASC,KAAM5C,EAAMqB,cAAerB,EAAMqB,gBAIrB,YAAjCrB,EAAMY,UAAUC,gBAClBZ,EAEE,4BAAQ4C,IAAK7C,GAASA,EAAMqB,aAAcyB,MAAM,kCAAkCC,MAAK,aAEnFC,MAAO,OACPC,OAAQ,EACRC,OAAQ,SAJ2E,SAK3E,YAQV,6BACLjD,EACAI,EAAgBmB,KAAI,SAAC2B,EAAgBzB,GACpC,OACE,kBAAC3B,EAAD,CACEU,WAAY0C,EAAe1C,WAC3BY,aAAc8B,EAAe9B,aAC7BlB,aAAcgD,EAAehD,aAC7BS,UAAWuC,EAAevC,UAC1BU,WAAY6B,EAAe7B,WAC3B8B,eAAgBD,EAAeC,eAC/B1C,iBAAkByC,EAAezC,iBACjCJ,MAAON,EAAMM,MACbK,QAASX,EAAMgC,UAAUhC,EAAMS,aAAeT,EAAMoD,gBAA2B,GAAT1B,EACtEM,UAAWhC,EAAMgC,UACjBJ,aAAc5B,EAAM4B,oBAOxByB,E,kDACJ,WAAYrD,GAAQ,IAAD,8BACjB,cAAMA,IAkRR4B,aAAe,SAAC0B,EAAGtD,GACjB,IAAIgC,EAAY,EAAKuB,MAAMvB,UAClB,EAAKuB,MAAMC,GAEpB,GAAIF,EAAEX,QAA2B,SAAjBW,EAAEX,OAAOZ,KACvB,EAAK0B,gBAAgBH,EAAEX,OAAOe,aAAa,SAC3C1B,EAAUsB,EAAEX,OAAOe,aAAa,SAAWJ,EAAEX,OAAOe,aAAa,cAE9D,GAAIJ,EAAEX,QAA2B,YAAjBW,EAAEX,OAAOZ,KAC5B,GAAMuB,EAAEX,OAAOb,QAAQE,EAEhB,CACL,IAAMN,EAAQM,EAAUsB,EAAEX,OAAOb,MAAM6B,QAAQL,EAAEX,OAAOd,OACpDH,GAAS,GACXM,EAAUsB,EAAEX,OAAOb,MAAM8B,OAAOlC,EAAO,GACA,GAAnCM,EAAUsB,EAAEX,OAAOb,MAAM+B,eACpB7B,EAAUsB,EAAEX,OAAOb,OAG5BE,EAAUsB,EAAEX,OAAOb,MAAMgC,KAAKR,EAAEX,OAAOd,YATzCG,EAAUsB,EAAEX,OAAOb,MAAQ,CAACwB,EAAEX,OAAOd,YAYhCyB,EAAES,iBACT/B,EAAUhC,GAASsD,EAAEU,UAGrB,EAAKP,gBAAgBH,EAAEX,OAAON,IAC9BL,EAAUsB,EAAEX,OAAON,IAAwB,WAAlBiB,EAAEX,OAAOZ,KAAoBkC,SAASX,EAAEX,OAAOd,OAASyB,EAAEX,OAAOd,OAK5F,EAAKqC,SAAS,CAAElC,UAAWA,EAAWmC,mBAAmB,KAnTxC,EAsTnBV,gBAAkB,SAAChD,GACjB,IAAIuB,EAAY,EAAKuB,MAAMvB,UAAe1B,EAAQ,EAAKiD,MAAMjD,aACtD0B,EAAUvB,GACjB,IAAK,IAAI2D,EAAI,EAAGA,EAAI9D,EAAMuD,OAAQO,IAC5B9D,EAAM8D,GAAG3D,YAAcA,GAA2C,GAA7BH,EAAM8D,GAAG1D,mBAChD2D,QAAQC,IAAI,sBAAuBhE,EAAM8D,GAAG1D,kBAC5C,EAAK+C,gBAAgBnD,EAAM8D,GAAG1D,mBAGlC,EAAKwD,UAAS,iBAAO,CACnBlC,iBA9TF,EAAKuB,MAAQ,CACXgB,UAAU,EACVC,WAAW,EACXlE,MAAO,GACPmE,MAAO,GACPC,WAAY,EACZC,KAAM,2BACNC,aAAc,IACdC,YAAa,EACbC,OAAO,EAEPC,UAAW,GACXC,gBAAiB,GACjBC,UAAW,GACXjD,UAAW,GACXkD,MAAO,GACPf,mBAAmB,EACnBgB,KAAM,IAER,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,gBAClB,EAAK5B,gBAAkB,EAAKA,gBAAgB4B,KAArB,gBACvB,EAAKG,YAAc,CACjB,aAAgB,GAAI,aAAgB,GAAI,SAAYC,YAAgB,QAEtE,EAAKC,iBAAmB,CACtB,CACE5D,KAAM,WACNM,MAAO,WACPL,KAAM,UAER,CACED,KAAM,aACNM,MAAO,aACPL,KAAM,UAER,CACED,KAAM,cACNM,MAAO,cACPL,KAAM,WAGV,EAAK4D,WAAa,CAChB,CACE7D,KAAM,aACNM,MAAO,aACPL,KAAM,SACN6D,YAAY,EACZC,UAAU,GAEZ,CACE/D,KAAM,eACNM,MAAO,eACPL,KAAM,SACN6D,YAAY,EACZrD,UAAU,GAGZ,CACET,KAAM,WACNM,MAAO,WACPL,KAAM,SAEN8D,UAAU,GAEZ,CACE/D,KAAM,YACNM,MAAO,YACPL,KAAM,SACN6D,YAAY,EACZC,UAAU,GAEZ,CACE/D,KAAM,eACNM,MAAO,eACPL,KAAM,SACN6D,YAAY,EACZrD,UAAU,GAEZ,CACET,KAAM,aACNM,MAAO,aACPL,KAAM,OACN6D,YAAY,EACZrD,UAAU,GAEZ,CACET,KAAM,iBACNM,MAAO,iBACPL,KAAM,SACN6D,YAAY,EACZrD,UAAU,GAEZ,CACET,KAAM,mBACNM,MAAO,mBACPL,KAAM,SACN6D,YAAY,EACZrD,UAAU,IArGG,E,qDA4GnB,WACE,IAAIuD,EAAML,YAAgB,OACtBM,EAAMN,YAAgB,KAC1BO,KAAKhG,MAAMiG,cAAc,CACvBC,MAAO,GACPC,KAAM,EACNxB,KAAMqB,KAAKzC,MAAMoB,KAEjB,SAAYmB,EAGZM,EAAG,MACF,SAACC,OAGJL,KAAKhG,MAAMiG,cAAc,CACvBC,MAAO,GACPC,KAAM,EACNxB,KAAM,eACN2B,KAAMC,YAAeP,KAAKN,iBAAkB,QAC5Cc,IAAK,CAAC,CAAE,SAAYV,IACpBM,EAAG,MAGDL,EACFC,KAAKhG,MAAMyG,gBAAgB,CACzB9B,KAAM,mBACNyB,EAAG,IACHM,OAAQ,CAAC,CAAE,OAAUX,EAAK,SAAYD,KACrC,SAAUO,GAEPA,EAAOM,MAAQN,EAAOM,KAAKA,KAAK,GAAG9C,OAAS,IAC9CQ,QAAQC,IAAI+B,EAAOM,KAAKA,KAAK,GAAG,GAAGC,SAAUP,EAAOM,KAAKA,KAAK,GAAG,GAAGE,YAC7B,GAAnCR,EAAOM,KAAKA,KAAK,GAAG,GAAGC,UAAyD,GAArCP,EAAOM,KAAKA,KAAK,GAAG,GAAGE,WACpEb,KAAK9B,SAAS,CAAEW,YAAa,IACe,GAAnCwB,EAAOM,KAAKA,KAAK,GAAG,GAAGC,UAAyD,GAArCP,EAAOM,KAAKA,KAAK,GAAG,GAAGE,WAC3Eb,KAAK9B,SAAS,CAAEW,YAAa,IAE7BmB,KAAK9B,SAAS,CAAEW,YAAa,MAGjCQ,KAAKW,OAEPA,KAAK9B,SAAS,CAAEW,YAAa,IAG/BiC,WAAW,WACTd,KAAK9B,SAAS,CAAEiB,KAAM4B,iBACtB1B,KAAKW,MAAO,O,uCAIhB,SAA0BgB,GAAY,IAAD,OAE9BA,EAAUC,WAAWC,UAEpBF,EAAUC,WAAV,cAAwCD,EAAUC,WAAV,aAAqC,IAC/EjB,KAAK9B,UAAS,iBAAO,CACnBa,UAAWiC,EAAUC,WAAV,aAAqC,GAAGE,WACnDnC,gBAAiBgC,EAAUC,WAAV,aAAqC,GAAGG,gBAI7DpB,KAAK9B,UAAS,iBAAO,CACnB5D,MAAO0G,EAAUC,WAAW,EAAK1D,MAAMoB,UAGzCqB,KAAK9B,SAAS,CAAEO,MAAOuC,EAAUC,gB,wBAOrC,SAAWI,GACTrB,KAAK9B,SAAS,CAAEV,GAAI8D,OAAOC,OAAO,GAAIF,EAAK,IAAKrF,UAAWsF,OAAOC,OAAO,GAAIF,EAAK,IAAKnC,MAAO,OAAQV,WAAW,EAAMS,UAAW,kB,yBAEpI,WACEe,KAAK9B,SAAS,CAAEM,WAAW,M,wBAE7B,WACEwB,KAAK9B,SAAS,CAAElC,UAAU,eAAMgE,KAAKR,aAAeN,MAAO,MAAOV,WAAW,EAAMS,UAAW,qB,wBAGhG,SAAW3B,GACTA,EAAEkE,iBACF,IAAIzB,EAAMN,YAAgB,KACtBK,EAAML,YAAgB,OAC1B,GAAIgC,SAASC,kBAAkB,yBAAyB7D,OAAS,GAC/D4D,SAASC,kBAAkB,yBAAyB,GAAGC,iBAAkB,CAEzE,IAAI3F,EAAY4F,KAAKC,MAAMD,KAAKE,UAAU9B,KAAKzC,MAAMvB,YACrDqC,QAAQC,IAAI,YAAatC,GAEzB,IADA,IAAI1B,EAAQ0F,KAAKzC,MAAMjD,MACd8D,EAAI,EAAGA,EAAI9D,EAAMuD,OAAQO,IAChC,GAAI9D,EAAM8D,GAAG9C,aAAqC,SAAtBhB,EAAM8D,GAAGxD,WAA8C,YAAtBN,EAAM8D,GAAGxD,aAC/DoB,EAAU1B,EAAM8D,GAAG3D,aACtBgH,SAASC,kBAAkBpH,EAAM8D,GAAG3D,YAAYoD,OAAS,EAEzD,YADAkE,IAAMC,MAAM,wCAOlB,GAAwB,QAApBhC,KAAKzC,MAAM2B,WACR,CAGL,IAAI+C,GAAO,EACX,IAAK,IAAI/G,KAAOc,EAAW,CACzB,IAAIkG,EAAO,CACTC,SAAUrC,EAAKsC,OAAQrC,EACvBsC,UAAWC,MAAStE,OAAO,wBAE7BkE,EAAKK,WAAarH,EAClBgH,EAAKM,WAAaxG,EAAUd,GAC5BgH,EAAKO,SAAW,EAChBP,EAAKQ,SAAW,EAChB1C,KAAKhG,MAAM2I,WAAW,CACpBhE,KAAM,iBACNuD,KAAMA,IACL,SAAUvB,GACa,KAApBA,EAAKA,KAAKiC,SACZX,GAAO,MAIb,GAAIA,EAAM,CAGEjC,KAAKhG,MAAM6I,WAAW,CAC9BlE,KAAM,qBACNuD,KAAM,CACJ,YAAe,EACf,UAAaI,MAAStE,OAAO,wBAE/B8E,UAAW,CAAE,OAAU/C,EAAK,SAAYD,GACxCM,EAAG,MAGL2C,MAAM,+BACN/C,KAAK9B,UAAS,iBAAO,CACnBY,OAAO,WAGTiD,IAAMC,MAAM,yBAKhBlB,WAAW,WACTd,KAAKhG,MAAMiG,cAAc,CACvBC,MAAO,GACPC,KAAM,EACNxB,KAAMqB,KAAKzC,MAAMoB,KACjB2B,KAAMC,YAAeP,KAAKL,WAAY,QACtCa,IAAK,CAAC,CAAE,SAAYV,IACpBM,EAAG,OAELf,KAAKW,MAAO,KAEdA,KAAK9B,SAAS,CAAEM,WAAW,IAE7B,OAAO,I,0BAoDT,SAAaK,EAAavE,GAAQ,IAAD,OAE/B,GAAmB,GAAfuE,EACF,OAAO,uBAAGtD,UAAU,0BAEtB,GAAmB,GAAfsD,EACF,OAAO,uBAAGtD,UAAU,wBAAb,kBAET,GAAmB,GAAfsD,EACF,OAAO,uBAAGtD,UAAU,wBAAb,4CAET,GAAmB,GAAfsD,EAAkB,CACpB,GAAImB,KAAKzC,MAAMuB,MACb,OAAO,uBAAGvD,UAAU,wBAAb,2CAEIyE,KAAKzC,MAAMyF,OAAxB,IAAoChH,EAAYgE,KAAKzC,MAAMvB,UACvDiH,EAAQ,GACZ,OACE,oCACGjD,KAAKzC,MAAMyB,gBAAkB,yBAAKkE,wBAAyB,CAAEC,OAAQnD,KAAKzC,MAAMyB,mBAAwB,KACzG,kBAAC,IAAD,CAAMlD,KAAK,yBACRxB,GAASA,EAAMkB,KAAI,SAAAhB,GAKlB,OAHKyI,EAAMzI,EAAKC,cAAawI,EAAMzI,EAAKC,YAAc,GACtDwI,EAAMzI,EAAKC,YAAcwI,EAAMzI,EAAKC,YAAc,EAE1C,8BACJD,EAAK4I,kBACL,kBAACrJ,EAAD,CACEU,WAAYD,EAAKC,WACjBY,aAAcb,EAAKa,aACnBlB,aAAcK,EAAKL,aACnBS,UAAWJ,EAAKI,UAChBU,WAAYd,EAAKc,WACjB8B,eAAgB5C,EAAK4C,eACrB1C,iBAAkBF,EAAKE,iBACvBJ,MAAO,EAAKiD,MAAMjD,MAClB0B,UAAWA,EACXrB,QAAmC,GAA1BsI,EAAMzI,EAAKC,YACpBmB,aAAc,EAAKA,mBAI3B,kBAAC,IAAKd,MAAN,CAAYC,GAAIsI,KACd,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQtH,KAAK,SAASJ,QAASqE,KAAKT,YAApC,wB,oBAQd,WACE,MAAsHS,KAAKzC,MAAnHsB,EAAR,EAAQA,YAAavE,EAArB,EAAqBA,MAAOyE,EAA5B,EAA4BA,UAAkD/C,GAA9E,EAAuCgD,gBAAvC,EAAwDR,UAAxD,EAAmES,UAAnE,EAA8EjD,WAA9E,EAAyFmC,kBAAzF,EAA4Ge,MAI5G,OAHAb,QAAQC,IAAI,cAAehE,EAAO0B,GAIhC,oCACE,yBAAKT,UAAU,WACb,kBAAC,IAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKN,GAAG,MACN,kBAAC,IAAD,CAAMM,UAAU,iCACd,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKN,GAAI,EAAGM,UAAU,yBACpB,kBAAC,IAAD,CAAW+H,IAAI,MACZvE,MAKT,kBAAC,IAAD,KAEGiB,KAAKuD,aAAa1E,EAAavE,a,GAjZzBkJ,IAAMC,WAmahBC,uBANf,SAAyBnG,GACvB,MAAO,CACL0D,WAAY1D,EAAM0D,cAMpB,CACEhB,kBACA0C,eACAE,eACApC,qBANWiD,CAQbrG","file":"static/js/108.0f5052a7.chunk.js","sourcesContent":["\nimport React from \"react\";\nimport { Button, Form } from 'react-bootstrap';\nimport moment from 'moment';\n// import {\n//   GetCommonData, addRecord, UpdateData, DeleteData\n// } from \"../store/actions/CommonMongoAction\";\n\nimport { GetCommonData, InsertData, UpdateData, GetCommonspData } from \"../store/actions/CommonAction\";\n\n//import { If, Then, Else, When, Unless, Switch, Case, Default } from 'react-if';\n\nimport { connect } from \"react-redux\";\n// import { Link } from \"react-router-dom\";\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { GetJsonToArray, getUrlParameter } from '../utility/utility.jsx';\n// reactstrap components\nimport {\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  Row,\n  Col\n} from \"reactstrap\";\nimport { getuser } from \"utility/utility\";\n\nconst Question = (props) => {\n  // console.log('--------',QuestionText, FieldOptions, FieldType) ; \n  let asterix = <span>*</span>;\n  let FieldOptions = props.FieldOptions.split(',');\n  // console.log('--------',QuestionText, FieldOptions, FieldType, IsRequired) ;\n\n  // let NestedQuestion ;\n  // for(let i=0 ; i<props.items.length ; i++){\n  //   if(props.items[i]['QuestionID'] == props.NestedQuestionId)\n  //   {\n  //     NestedQuestion = props.items[i] ; break;\n  //   }\n  // }\n  let NestedQuestions = props.items.filter(item => {\n    return item.QuestionID === props.NestedQuestionId\n  });\n\n  let formEntry;\n  if (props.display) {\n    if (props.FieldType.toLowerCase() == 'radio') {\n      formEntry = (\n        <Form.Group as={Col} md={12} key={props.QuestionID} controlId={props.QuestionID}>\n          {<div><Form.Label>{props.QuestionText}{props.IsRequired && asterix}</Form.Label></div>}\n          <ul className='survey-radio'>\n            {FieldOptions.map((option, index) => {\n              return (\n                <li\n                  onClick={props.handleChange}\n                  value={option}\n                  name={props.QuestionID}\n                  type=\"radio\"\n                  className={props.formvalue[props.QuestionID] === option ? 'active-rating' : \"\"}>\n                  {option}\n                </li>\n\n              )\n            })}\n          </ul>\n        </Form.Group>\n      )\n    }\n    if (props.FieldType.toLowerCase() == 'checkbox') {\n      formEntry = (\n        <Form.Group as={Col} md={12} key={props.QuestionID} controlId={props.QuestionID}>\n          {<div><Form.Label>{props.QuestionText}{props.IsRequired && asterix}</Form.Label></div>}\n          {FieldOptions.map((option, index) => {\n            return (\n              <Form.Check\n                // required={props.IsRequired&&index==0}\n                onChange={props.handleChange}\n                custom\n                className=\"survey-checkbox-radio\"\n                // inline\n                label={option}\n                value={option}\n                type={props.FieldType.toLowerCase()}\n                name={props.QuestionID}\n                id={option + '_' + props.FieldType.toLowerCase()}\n              />\n            )\n          })}\n        </Form.Group>\n      )\n    }\n    if (props.FieldType.toLowerCase() == 'textarea') {\n      formEntry = (\n        <Form.Group as={Col} md={12} controlId={props.QuestionID} key={props.QuestionID}>\n          <div><Form.Label>{props.QuestionText}{props.IsRequired && asterix}</Form.Label></div>\n          <Form.Control required={props.IsRequired}\n            type=\"text\" onChange={props.handleChange} as=\"textarea\" placeholder=\"Enter\" />\n        </Form.Group>\n      )\n    }\n    if (props.FieldType.toLowerCase() == 'email') {\n      formEntry = (\n        <Form.Group as={Col} md={12} controlId={props.QuestionID} key={props.QuestionID}>\n          <div><Form.Label>{props.QuestionText}{props.IsRequired && asterix}</Form.Label></div>\n          <Form.Control required={props.IsRequired}\n            type=\"email\" onChange={props.handleChange} placeholder=\"Enter email\" />\n        </Form.Group>\n      )\n    }\n    if (props.FieldType.toLowerCase() == 'number') {\n      formEntry = (\n        <Form.Group as={Col} md={12} controlId={props.QuestionID} key={props.QuestionID}>\n          <div><Form.Label>{props.QuestionText}{props.IsRequired && asterix}</Form.Label></div>\n          <Form.Control required={props.IsRequired}\n            type=\"number\" onChange={props.handleChange} placeholder=\"Enter\" />\n        </Form.Group>\n      )\n    }\n    if (props.FieldType.toLowerCase() == 'dropdown') {\n      formEntry = (\n        <Form.Group as={Col} md={12} controlId={props.QuestionID} key={props.QuestionID}>\n          <div><Form.Label>{props.QuestionText}{props.IsRequired && asterix}</Form.Label></div>\n          <Form.Control as=\"select\" onChange={props.handleChange}\n            placeholder=\"Select\" required={props.IsRequired}>\n            <option key='0_dropdown' value=\"\" disabled selected>Select your option</option>\n            {FieldOptions.map((option, index) => {\n              return (\n                <option key={index + 1 + '_dropdown'} value={option}>{option}</option>\n              )\n            })}\n          </Form.Control>\n        </Form.Group>\n      )\n    }\n    if (props.FieldType.toLowerCase() == 'string') {\n      formEntry = (\n        <Form.Group as={Col} md={12} key={props.QuestionID} controlId={props.QuestionID}>\n          <Form.Label>{props.QuestionText}{props.IsRequired && asterix}</Form.Label>\n          <Form.Control\n            required={props.IsRequired}\n            type=\"text\" onChange={props.handleChange} placeholder={\"Enter\"} />\n        </Form.Group>\n      )\n    }\n    if (props.FieldType.toLowerCase() == 'empty') {\n      formEntry = (\n        <Form.Group as={Col} md={12} key={props.QuestionID} controlId={props.QuestionID}>\n          <Form.Label>{props.QuestionText}{props.IsRequired && asterix}</Form.Label>\n        </Form.Group>\n      )\n    }\n    if (props.FieldType.toLowerCase() == 'link') {\n      formEntry = (\n        <Form.Group as={Col} md={12} key={props.QuestionID} controlId={props.QuestionID}>\n          <a target=\"_blank\" href={props.QuestionText}>{props.QuestionText}</a>\n        </Form.Group>\n      )\n    }\n    if (props.FieldType.toLowerCase() == 'embedded') {\n      formEntry = (\n        // <Form.Group as={Col} md={12} key={props.QuestionID} controlId={props.QuestionID}>\n        <iframe src={props && props.QuestionText} allow='geolocation; microphone; camera' style={\n          {\n            width: \"100%\",\n            border: 0,\n            height: '250px',\n            border: 'none'\n          }\n        } ></iframe>\n        //</Form.Group>          \n      )\n    }\n  }\n\n  return (<div>\n    {formEntry}\n    {NestedQuestions.map((NestedQuestion, index) => {\n      return (\n        <Question\n          QuestionID={NestedQuestion.QuestionID}\n          QuestionText={NestedQuestion.QuestionText}\n          FieldOptions={NestedQuestion.FieldOptions}\n          FieldType={NestedQuestion.FieldType}\n          IsRequired={NestedQuestion.IsRequired}\n          SelectedOption={NestedQuestion.SelectedOption}\n          NestedQuestionId={NestedQuestion.NestedQuestionId}\n          items={props.items}\n          display={props.formvalue[props.QuestionID] == props.SelectedOption && index == 0}\n          formvalue={props.formvalue}\n          handleChange={props.handleChange} />\n      )\n    })}\n  </div>);\n\n}\n\nclass SurveyForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      showModal: false,\n      items: [],\n      store: [],\n      activePage: 1,\n      root: \"SurveyQuestionMasterJoin\",\n      departmentId: \"0\",\n      stepOnePart: 1,\n      saved: false,\n\n      PageTitle: \"\",\n      PageDescription: \"\",\n      FormTitle: \"\",\n      formvalue: {},\n      event: \"\",\n      ModalValueChanged: false,\n      user: {}\n    };\n    this.handleClose = this.handleClose.bind(this);\n    this.handleShow = this.handleShow.bind(this);\n    this.handleSave = this.handleSave.bind(this);\n    this.handleFormvalue = this.handleFormvalue.bind(this);\n    this.selectedrow = {\n      \"QuestionText\": \"\", \"FieldOptions\": \"\", \"SurveyID\": getUrlParameter(\"sid\")\n    }\n    this.SurveyMasterList = [\n      {\n        name: \"SurveyId\",\n        label: \"SurveyId\",\n        type: \"number\"\n      },\n      {\n        name: \"SurveyName\",\n        label: \"SurveyName\",\n        type: \"string\"\n      },\n      {\n        name: \"Description\",\n        label: \"Description\",\n        type: \"string\"\n      }\n    ];\n    this.columnlist = [\n      {\n        name: \"QuestionID\",\n        label: \"QuestionID\",\n        type: \"number\",\n        searchable: true,\n        editable: false\n      },\n      {\n        name: \"QuestionText\",\n        label: \"QuestionText\",\n        type: \"string\",\n        searchable: true,\n        required: true\n        // editable: false\n      },\n      {\n        name: \"SurveyID\",\n        label: \"SurveyID\",\n        type: \"number\",\n        // searchable: true,\n        editable: false\n      },\n      {\n        name: \"FieldType\",\n        label: \"FieldType\",\n        type: \"string\",\n        searchable: true,\n        editable: false\n      },\n      {\n        name: \"FieldOptions\",\n        label: \"FieldOptions\",\n        type: \"string\",\n        searchable: true,\n        required: true\n      },\n      {\n        name: \"IsRequired\",\n        label: \"IsRequired\",\n        type: \"bool\",\n        searchable: true,\n        required: true\n      },\n      {\n        name: \"SelectedOption\",\n        label: \"SelectedOption\",\n        type: \"string\",\n        searchable: true,\n        required: true\n      },\n      {\n        name: \"NestedQuestionId\",\n        label: \"NestedQuestionId\",\n        type: \"number\",\n        searchable: true,\n        required: true\n      }\n    ];\n  }\n\n\n\n  componentDidMount() {\n    let sid = getUrlParameter(\"sid\");\n    let uid = getUrlParameter(\"u\");\n    this.props.GetCommonData({\n      limit: 10,\n      skip: 0,\n      root: this.state.root,\n      //cols: GetJsonToArray(this.columnlist, \"name\"),\n      \"SurveyID\": sid,\n      //order : 1,\n      //direction: 'ASC',\n      c: \"L\",\n    }, (result) => {\n    });\n\n    this.props.GetCommonData({\n      limit: 10,\n      skip: 0,\n      root: \"SurveyMaster\",\n      cols: GetJsonToArray(this.SurveyMasterList, \"name\"),\n      con: [{ \"SurveyId\": sid }],\n      c: \"R\",\n    });\n\n    if (uid) {\n      this.props.GetCommonspData({\n        root: 'CheckSurveyAgent',\n        c: \"L\",\n        params: [{ \"UserId\": uid, \"SurveyId\": sid }],\n      }, function (result) {\n        debugger;\n        if (result.data && result.data.data[0].length > 0) {\n          console.log(result.data.data[0][0].Eligible, result.data.data[0][0].IsComplete)\n          if (result.data.data[0][0].Eligible == true && result.data.data[0][0].IsComplete == false) {\n            this.setState({ stepOnePart: 4 });\n          } else if (result.data.data[0][0].Eligible == true && result.data.data[0][0].IsComplete == true) {\n            this.setState({ stepOnePart: 3 });\n          } else {\n            this.setState({ stepOnePart: 2 });\n          }\n        }\n      }.bind(this));\n    } else {\n      this.setState({ stepOnePart: 2 });\n    }\n\n    setTimeout(function () {\n      this.setState({ user: getuser() });\n    }.bind(this), 500);\n  }\n\n\n  componentWillReceiveProps(nextProps) {\n    debugger;\n    if (!nextProps.CommonData.isError) {\n\n      if (nextProps.CommonData['SurveyMaster'] && nextProps.CommonData['SurveyMaster'][0]) {\n        this.setState(() => ({\n          PageTitle: nextProps.CommonData['SurveyMaster'][0].SurveyName,\n          PageDescription: nextProps.CommonData['SurveyMaster'][0].Description,\n        }))\n      }\n\n      this.setState(() => ({\n        items: nextProps.CommonData[this.state.root]\n      }));\n\n      this.setState({ store: nextProps.CommonData });\n\n    }\n\n  }\n\n\n  handleEdit(row) {\n    this.setState({ od: Object.assign({}, row, {}), formvalue: Object.assign({}, row, {}), event: \"Edit\", showModal: true, FormTitle: \"Edit Survey\" });\n  }\n  handleClose() {\n    this.setState({ showModal: false });\n  }\n  handleShow() {\n    this.setState({ formvalue: { ...this.selectedrow }, event: \"Add\", showModal: true, FormTitle: \"Add New Survey\" });\n  }\n\n  handleSave(e) {\n    e.preventDefault();\n    let uid = getUrlParameter(\"u\");\n    let sid = getUrlParameter(\"sid\");\n    if (document.getElementsByName(\"frmChatAgentConfigure\").length > 0 &&\n      document.getElementsByName(\"frmChatAgentConfigure\")[0].reportValidity()) {\n\n      let formvalue = JSON.parse(JSON.stringify(this.state.formvalue));\n      console.log(\"formvalue\", formvalue);\n      let items = this.state.items;\n      for (let i = 0; i < items.length; i++) {\n        if (items[i].IsRequired && (items[i].FieldType == 'radio' || items[i].FieldType == 'checkbox')) {\n          if (!formvalue[items[i].QuestionID] &&\n            document.getElementsByName(items[i].QuestionID).length > 0) {\n            toast.error(\"Please fill all the required fields!\")\n            return;\n          }\n        }\n      }\n      // this.fnCleanData(formvalue);\n      debugger;\n      if (this.state.event == \"Edit\") {\n      } else {\n        // formvalue.SurveyId = this.state.items[this.state.items.length-1].SurveyId + 1; \n        // formvalue.CreatedOn = moment().format(\"YYYY-MM-DD HH:mm:ss\") ;\n        let flag = true;\n        for (let key in formvalue) {\n          let body = {\n            SurveyId: sid, UserId: uid,\n            CreatedOn: moment().format(\"YYYY-MM-DD HH:mm:ss\")\n          };\n          body.QuestionId = key;\n          body.AnswerText = formvalue[key];\n          body.AnswerId = 1;\n          body.IsActive = 1;\n          this.props.InsertData({\n            root: \"SurveyResponse\",\n            body: body\n          }, function (data) {\n            if (data.data.status != 200) {\n              flag = false;\n            }\n          });\n        }\n        if (flag) {\n\n          // Update survey reponse completed\n          let res = this.props.UpdateData({\n            root: \"SurveyAgentMapping\",\n            body: {\n              'IsCompleted': 1,\n              'UpdatedOn': moment().format(\"YYYY-MM-DD HH:mm:ss\")\n            },\n            querydata: { \"UserId\": uid, \"SurveyId\": sid },\n            c: \"L\",\n          });\n\n          alert('Form submitted successfully');\n          this.setState(() => ({\n            saved: true\n          }));\n        } else {\n          toast.error(\"Cannot Submit Survey!\");\n        }\n      }\n      // let departmentid = formvalue[\"departmentId\"];\n\n      setTimeout(function () {\n        this.props.GetCommonData({\n          limit: 10,\n          skip: 0,\n          root: this.state.root,\n          cols: GetJsonToArray(this.columnlist, \"name\"),\n          con: [{ \"SurveyID\": sid }],\n          c: \"L\",\n        });\n      }.bind(this), 1000);\n\n      this.setState({ showModal: false });\n    }\n    return false;\n  }\n\n  handleChange = (e, props) => {\n    let formvalue = this.state.formvalue;\n    let od = this.state.od;\n\n    if (e.target && e.target.type == \"radio\") {\n      this.handleFormvalue(e.target.getAttribute('name'));\n      formvalue[e.target.getAttribute('name')] = e.target.getAttribute('value');\n    }\n    else if (e.target && e.target.type == \"checkbox\") {\n      if (!(e.target.name in formvalue)) {\n        formvalue[e.target.name] = [e.target.value];\n      } else {\n        const index = formvalue[e.target.name].indexOf(e.target.value);\n        if (index > -1) {\n          formvalue[e.target.name].splice(index, 1);\n          if (formvalue[e.target.name].length == 0) {\n            delete formvalue[e.target.name];\n          }\n        } else\n          formvalue[e.target.name].push(e.target.value);\n      }\n    }\n    else if (e._isAMomentObject) {\n      formvalue[props] = e.format()\n    }\n    else {\n      this.handleFormvalue(e.target.id);\n      formvalue[e.target.id] = e.target.type === 'number' ? parseInt(e.target.value) : e.target.value;\n    }\n    //debugger;\n    //let Changed = CompareJson(od, formvalue);\n\n    this.setState({ formvalue: formvalue, ModalValueChanged: true });\n  }\n\n  handleFormvalue = (QuestionID) => {\n    let formvalue = this.state.formvalue; let items = this.state.items;\n    delete formvalue[QuestionID];\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].QuestionID == QuestionID && items[i].NestedQuestionId != 0) {\n        console.log('-------------------', items[i].NestedQuestionId);\n        this.handleFormvalue(items[i].NestedQuestionId)\n      }\n    }\n    this.setState(() => ({\n      formvalue\n    }));\n  }\n\n  renderSwitch(stepOnePart, items) {\n    debugger;\n    if (stepOnePart == 1)\n      return <i className=\"fa fa-spinner fa-spin\"></i>\n\n    if (stepOnePart == 2)\n      return <p className=\"survey-response info\">Invalid action</p>\n\n    if (stepOnePart == 3)\n      return <p className=\"survey-response info\">Your survey response is already recorded</p>\n\n    if (stepOnePart == 4) {\n      if (this.state.saved) {\n        return <p className=\"survey-response info\">Your response is submitted successfully</p>\n      }\n      let nested = this.state.nested; let formvalue = this.state.formvalue;\n      let count = {};\n      return (\n        <>\n          {this.state.PageDescription ? <div dangerouslySetInnerHTML={{ __html: this.state.PageDescription }} /> : null}\n          <Form name=\"frmChatAgentConfigure\">\n            {items && items.map(item => {\n\n              if (!count[item.QuestionID]) count[item.QuestionID] = 0;\n              count[item.QuestionID] = count[item.QuestionID] + 1;\n\n              return (<div>\n                {!item.IsNestedQuestion &&\n                  <Question\n                    QuestionID={item.QuestionID}\n                    QuestionText={item.QuestionText}\n                    FieldOptions={item.FieldOptions}\n                    FieldType={item.FieldType}\n                    IsRequired={item.IsRequired}\n                    SelectedOption={item.SelectedOption}\n                    NestedQuestionId={item.NestedQuestionId}\n                    items={this.state.items}\n                    formvalue={formvalue}\n                    display={count[item.QuestionID] == 1}\n                    handleChange={this.handleChange} />\n                }\n              </div>)\n            })}\n            <Form.Group as={Row}>\n              <Col>\n                <Button type=\"submit\" onClick={this.handleSave}>Submit survey</Button>\n              </Col>\n            </Form.Group>\n          </Form></>)\n    }\n  }\n\n\n  render() {\n    const { stepOnePart, items, PageTitle, PageDescription, showModal, FormTitle, formvalue, ModalValueChanged, event } = this.state;\n    console.log(\"renderitems\", items, formvalue);\n\n\n    return (\n      <>\n        <div className=\"content\">\n          <ToastContainer />\n          <Row>\n            <Col md=\"12\">\n              <Card className=\"surveyform col-md-6 col-xs-12\">\n                <CardHeader>\n                  <Row>\n                    <Col md={6} className=\"col-md-12 text-center\">\n                      <CardTitle tag=\"h3\">\n                        {PageTitle}\n                      </CardTitle>\n                    </Col>\n                  </Row>\n                </CardHeader>\n                <CardBody>\n\n                  {this.renderSwitch(stepOnePart, items)}\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n        </div>\n      </>\n    );\n  }\n}\n\n\nfunction mapStateToProps(state) {\n  return {\n    CommonData: state.CommonData\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  {\n    GetCommonData,\n    InsertData,\n    UpdateData,\n    GetCommonspData\n  }\n)(SurveyForm);"],"sourceRoot":""}