{"version":3,"sources":["views/EmiPaymentFailed.jsx","views/Common/AlertBox.jsx","views/Common/DropDown.jsx"],"names":["EmiPaymentFailed","props","state","PageTitle","EmiPaymentFailedLeads","showAssignLeadPopUp","SelectedAgentAssigTo","SelectedRow","hideAssign","ReportTime","SelectedSupervisors","SelectedRows","clearSelected","formvalue","paymentStatuses","dtRef","React","createRef","myInputRef","columnlist","name","selector","sortable","cell","row","utc","format","GracePeriodDate","width","Status","className","firstoption","value","StatusId","id","LeadId","items","onChange","e","handlePaymentStatusChange","this","setState","nextProps","CommonData","isError","CBList","target","toast","error","newStatus","parseInt","handleSave","JSON","parse","stringify","GetCommonspData","limit","skip","root","params","UserId","getuser","UserID","status","data","type","setTimeout","window","location","reload","bind","getPaymentStatusList","fetchCallBackData","length","current","handleClearRows","GetCommonData","con","c","result","paymentStatuslist","forEach","element","push","Id","index","lead","CustName","CustomerID","ProductId","reqData","PostCommunicationData","columns","showAlert","AlertMsg","AlertVarient","console","log","selectedLeads","show","variant","body","md","tag","onClick","OpenAssignLeadPopUp","defaultSortField","defaultSortAsc","selectableRows","export","ref","onSelectedRows","onHide","handleClose","Header","closeButton","Title","Body","join","Footer","condition","AssignLead","Component","connect","AlertBox","DropDown","item","key","Display","visible","Control","as","disabled","map","displayoption"],"mappings":"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","file":"static/js/55.2b2a5cd1.chunk.js","sourcesContent":["\nimport React from \"react\";\nimport {\n  GetCommonData, GetCommonspData, GetDataDirect, PostCommunicationData\n} from \"../store/actions/CommonAction\";\nimport { connect } from \"react-redux\";\nimport { OpenSalesView, getUrlParameter, getuser } from '../utility/utility.jsx';\nimport DataTable from './Common/DataTableWithFilter';\nimport Moment from 'react-moment';\nimport { If, Then, Else } from 'react-if';\nimport AlertBox from './Common/AlertBox';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport _ from 'underscore';\nimport DropDown from './Common/DropDown';\n\n// reactstrap components\nimport {\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  Table,\n  Row,\n  Col\n} from \"reactstrap\";\nimport { ButtonGroup, Button, Modal, Form } from 'react-bootstrap';\nimport { func } from \"prop-types\";\nimport moment from \"moment\";\nimport './customStyling.css';\n\nclass EmiPaymentFailed extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      PageTitle: \"EMI Payment Failed Leads\",\n      EmiPaymentFailedLeads: [],\n      showAssignLeadPopUp: false,\n      SelectedAgentAssigTo: 0,\n      SelectedRow: null,\n      hideAssign: false,\n      ReportTime: null,\n      SelectedSupervisors: [],\n      SelectedRows: [],\n      clearSelected: false,\n      formvalue: {},\n      paymentStatuses: []\n    };\n    this.dtRef = React.createRef();\n    this.myInputRef = React.createRef();\n\n    this.columnlist = [\n      {\n        name: \"LeadId\",\n        selector: \"LeadId\",        \n      },\n      {\n        name: \"Proposal No\",\n        selector: \"ProposalNo\",        \n      },\n      {\n        name: \"Insurer Name\",\n        selector: \"InsurerName\",        \n      },\n      {\n        name: \"Cancellation Reason\",\n        selector: \"FailureReason\",        \n      },\n      {\n        name: \"Mode Of Payment\",\n        selector: \"PaymentMode\",        \n      },\n      {\n        name: \"EMI Missed\",\n        selector: \"EMIMissed\",        \n      },\n      {\n        name: \"Total Amount Pending\",\n        selector: \"AmountPending\",        \n      },\n      {\n        name: \"Grace Period Ends By\",\n        sortable: true,\n        cell: row => <Moment utc={true} format=\"DD/MM/YYYY HH:mm:ss\">{row.GracePeriodDate}</Moment>\n      },\n      {\n        name: \"Current Status\",\n        selector: \"Status\",\n        width: \"150px\",\n        cell: row => \n        row.Status !== '-' ? \n        (\n          <div className=\"wrap currentPaymentStatus\">\n            {row.Status}\n          </div>\n        ) : row.Status        \n      },\n      {\n        name: \"Action\",\n        width: \"120px\",\n        cell: row => \n        (\n          <div className=\"py-1\">\n            <DropDown firstoption=\"Select\" value={row.StatusId} id={\"select_\" + row.LeadId} items={this.state.paymentStatuses} onChange={(e) => this.handlePaymentStatusChange(e, row)}></DropDown>\n          {/*\n            <Row>\n              <Col md=\"6\">\n              </Col>\n              <Col md=\"6\">\n                <ButtonGroup aria-label=\"\">\n                  <Button variant=\"secondary\" id={\"save_\" + row.LeadId} onClick={() => this.handleSave(row)}>Save</Button>\n                </ButtonGroup>\n              </Col>\n            </Row>\n          */}\n          </div>\n        )\n      },\n      \n    ];\n  }\n  \n  OpenAssignLeadPopUp(row) {\n    this.setState({ showAssignLeadPopUp: true });\n  }\n  \n  componentWillReceiveProps(nextProps) {\n    \n    if (!nextProps.CommonData.isError) {\n      if (nextProps.CommonData[\"EmiPaymentFailed\"]) {\n        let CBList = nextProps.CommonData[\"EmiPaymentFailed\"];\n        this.setState({ EmiPaymentFailedLeads: CBList[0] });\n      }\n    }\n  }\n  \n  handlePaymentStatusChange(e, row) {\n    //console.log(e.target.value, row);\n    if(e.target.value === \"0\" || e.target.value === \"\") {\n      toast.error(\"Select a status\"); \n    } else {\n      row.newStatus = parseInt(e.target.value);\n      this.setState({ formvalue: row });\n      this.handleSave(row);\n    }\n  };\n\n  handleSave(row) {\n    let formvalue = JSON.parse(JSON.stringify(row));\n\n    this.props.GetCommonspData({\n      limit: 10,\n      skip: 0,\n      root: \"UpdateEMIPaymentStatus\",\n      params: [{ UserId: getuser().UserID, LeadId: formvalue.LeadId, status: formvalue.newStatus }]\n      }, function (data) {\n        if(data.data.status === 200) \n        toast(\"Status submitted successfully!\", { type: 'success' });\n        else \n        toast.error(\"Status could not be submitted\"); \n        \n        setTimeout(function () {\n          window.location.reload(false);\n          //this.fetchCallBackData();\n        }.bind(this), 2000);\n\n      });\n  }\n\n  handleClose() {\n    this.setState({ showAssignLeadPopUp: false })\n  }\n\n  componentDidMount() {\n    this.getPaymentStatusList();\n    this.fetchCallBackData();\n  }\n\n  fetchCallBackData() {\n    var SelectedSupervisors = this.state.SelectedSupervisors;\n    this.props.GetCommonspData({\n      limit: 10,\n      skip: 0,\n      root: \"EmiPaymentFailed\",\n      params: [{ UserId: getuser().UserID }]\n      //params: [{ UserId: 8224 }]\n    });\n\n    if (this.state.SelectedRows.length > 0) {\n      this.dtRef.current.handleClearRows();\n    }\n\n  }\n\n  getPaymentStatusList() {\n    this.props.GetCommonData({\n      limit: 10,\n      skip: 0,\n      root: \"EMIFailedStatusMaster\",\n      //cols: GetJsonToArray(this.SurveyMasterList, \"name\"),\n      con: [{\"IsActive\" : 1}],\n      c: \"L\",\n    }, function (result) {\n        var paymentStatuslist = [];\n        result.data.data[0].forEach(element => {\n            paymentStatuslist.push({\n                \"Id\": element.Id,\n                \"Display\": element.status\n            });\n        });\n        this.setState({ paymentStatuses: paymentStatuslist });\n    }.bind(this));\n  }\n\n  onSelectedAgent(e) {\n    this.setState({ SelectedAgentAssigTo: e.target.value });\n  }\n  AssignLead() {\n    const { SelectedRows, SelectedAgentAssigTo } = this.state;\n    for (let index = 0; index < SelectedRows.length; index++) {\n      const element = SelectedRows[index];\n      //toast(\"Lead (\" + element.LeadId + \") assign successfully\", { type: 'success' });\n\n      var lead = {\n        \"LeadId\": element.LeadId,\n        \"Name\": element.CustName,\n        \"CustomerId\": element.CustomerID,\n        \"UserID\": getuser().UserID,\n        \"Priority\": 0,\n        \"ProductId\": element.ProductId,\n        \"Reason\": 'BookedLead',\n        \"ReasonId\": 30,\n        \"CallStatus\": \"\"\n      }\n      var reqData = {\n        \"UserId\": getuser().UserID,\n        \"Leads\": [lead]\n      };\n\n\n      this.props.PostCommunicationData({\n        root: 'communication/LeadPrioritization.svc/AddLeadToPriorityQueue',\n        data: reqData\n      }, function (data) {\n        toast(\"Lead (\" + element.LeadId + \") Added in Call Queue\", { type: 'success' });\n      });\n    }\n\n    this.setState({ showAssignLeadPopUp: false });\n\n    // setTimeout(function () {\n    //   this.fetchCallBackData();\n    // }.bind(this), 300);\n  }\n  onSelectedRows(SelectedRows) {\n    this.setState({ SelectedRows: SelectedRows });\n  }\n  render() {\n    const columns = this.columnlist;\n    const { items, PageTitle, EmiPaymentFailedLeads, showAssignLeadPopUp, showAlert, AlertMsg, AlertVarient, ReportTime, SelectedRows } = this.state;\n    console.log(this.state.paymentStatuses);\n    let selectedLeads = [];\n    SelectedRows.forEach(element => {\n      selectedLeads.push(element.LeadId);\n    });\n\n    return (\n      <>\n        <div className=\"content EmiPaymentFailedLeadsContainer\">\n          <AlertBox show={showAlert} variant={AlertVarient} body={AlertMsg}></AlertBox>\n          <ToastContainer />\n          <Row>\n            <Col md=\"12\">\n              <Card>\n                <CardHeader>\n                  <Row>\n                    <Col md={6}>\n                      <CardTitle tag=\"h4\">{PageTitle}</CardTitle>\n                    </Col>\n                    <Col md={4}>\n                      <CardTitle tag=\"h5\">\n                        {ReportTime ? <Moment format=\"DD/MM/YYYY HH:mm:ss\">{ReportTime}</Moment> : null}\n                      </CardTitle>\n\n                    </Col>\n                    <Col md={2}>\n                      {this.state.hideAssign ? null : <button className=\"btn btn-info btn-sm float-right\" onClick={() => this.OpenAssignLeadPopUp()} >Add Lead</button>}\n                    </Col>\n                  </Row>\n\n                </CardHeader>\n                <CardBody>\n                  <DataTable\n                    columns={columns}\n                    data={(EmiPaymentFailedLeads && EmiPaymentFailedLeads.length > 0) ? EmiPaymentFailedLeads : []}\n                    defaultSortField=\"GracePeriodDate\"\n                    defaultSortAsc={false}\n                    selectableRows={true}\n                    export={false}\n                    ref={this.dtRef}\n                    onSelectedRows={this.onSelectedRows.bind(this)}\n                  />\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n\n          <Modal show={showAssignLeadPopUp} onHide={this.handleClose.bind(this)} >\n            <Modal.Header closeButton>\n              <Modal.Title>Add Leads</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n              <Row>\n                <Col>\n                  LeadId : {selectedLeads.join()}\n                </Col>\n              </Row>\n              <Row>\n                <Col>\n                  {/* <Form.Control as=\"select\" name=\"products\" onChange={this.onSelectedAgent.bind(this)} >\n                    <option key={0} value={0}>Select</option>\n                    {\n                      this.bindAgentDropdown()\n                    }\n                  </Form.Control> */}\n                </Col>\n              </Row>\n\n            </Modal.Body>\n            <Modal.Footer>\n\n              <If condition={this.state.SelectedRows.length > 0}>\n                <Then>\n                  <Button variant=\"primary\" onClick={this.AssignLead.bind(this)}>Add Lead</Button>\n                </Then>\n              </If>\n              <Button variant=\"secondary\" onClick={this.handleClose.bind(this)}>\n                Close\n                </Button>\n            </Modal.Footer>\n          </Modal>\n\n\n        </div>\n      </>\n    );\n  }\n}\n\n\nfunction mapStateToProps(state) {\n  return {\n    CommonData: state.CommonData\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  {\n    GetCommonData,\n    GetCommonspData,\n    PostCommunicationData\n  }\n)(EmiPaymentFailed);","\r\nimport React from \"react\";\r\nimport { Alert } from 'react-bootstrap';\r\n\r\n\r\nclass AlertBox extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            show: this.props.show\r\n        }\r\n    }\r\n    componentDidUpdate() {\r\n\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        this.setState({ show: nextProps.show });\r\n        if (nextProps.show) {\r\n            setTimeout(function () {\r\n                this.setState({ show: false });\r\n            }.bind(this), 5000);\r\n        }\r\n    }\r\n    render() {\r\n        if (this.state.show) {\r\n            return (\r\n                <Alert variant={this.props.variant}>\r\n                    {this.props.body}\r\n                </Alert>\r\n            );\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nexport default AlertBox;\r\n","\nimport React from \"react\";\nimport { Form } from 'react-bootstrap';\nimport { connect } from \"react-redux\";\n// reactstrap components\n\nimport {\n    GetCommonData\n} from \"../../store/actions/CommonAction\";\nclass DropDown extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: [],\n        }\n    }\n    componentDidMount() {\n    }\n    componentWillReceiveProps(nextProps) {\n        this.setState({ items: nextProps.items });\n\n    }\n\n    displayoption(item) {\n        return <option key={item.Id} value={item.Id}>{item.Display}</option>\n    }\n\n    render() {\n\n\n        let { name, value, onChange, visible, items } = this.props;\n        if (!items) {\n            items = [];\n        }\n        if (visible == false) {\n            return null;\n        }\n        return (\n\n            <div>\n\n                <Form.Control as=\"select\" disabled={this.props.disabled} value={value} name={name} onChange={onChange}>\n                    {(this.props.firstoption !== false) && (\n                        <option key={0} value={0}>{this.props.firstoption ? this.props.firstoption : \"Select\"}</option>\n                    )}\n                    {items.map(item => (\n                        this.displayoption(item)\n                    ))}\n\n                </Form.Control>\n            </div>\n\n        );\n    }\n}\n\n\nexport default DropDown;\n\n"],"sourceRoot":""}