{"version":3,"sources":["views/AgentSurvey.jsx"],"names":["AgentSurvey","props","handleChange","e","formvalue","state","od","target","type","id","checked","_isAMomentObject","format","parseInt","value","setState","ModalValueChanged","isLoaded","showModal","items","store","activePage","root","departmentId","PageTitle","FormTitle","event","user","departmentchange","bind","handleRemove","handleClose","handleShow","handleSave","selectedrow","columnlist","name","label","searchable","editable","this","GetCommonData","limit","skip","cols","GetJsonToArray","order","c","setTimeout","getuser","nextProps","CommonData","isError","columns","fnDatatableCol","push","cell","row","aria-label","variant","onClick","handleEdit","className","aria-hidden","window","location","href","SurveyId","UpdateData","body","IsActive","querydata","data","toast","Object","assign","document","getElementsByName","length","reportValidity","JSON","parse","stringify","console","log","fnCleanData","sid","CreatedOn","moment","InsertData","status","error","message","md","tag","extention","export","print","show","onHide","dialogClassName","Header","closeButton","Title","Body","map","col","fnRenderfrmControl","Footer","condition","React","Component","connect"],"mappings":"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","file":"static/js/116.c99c70c2.chunk.js","sourcesContent":["\r\nimport React from \"react\";\r\nimport { ButtonGroup, Button, Modal, Form } from 'react-bootstrap';\r\nimport moment from 'moment';\r\n// import {\r\n//   GetCommonData, addRecord, UpdateData, DeleteData\r\n// } from \"../store/actions/CommonMongoAction\";\r\n\r\nimport { GetCommonData, InsertData, UpdateData, GetCommonspData} from \"../store/actions/CommonAction\";\r\n\r\nimport { If, Then } from 'react-if';\r\n//import { If, Then, Else, When, Unless, Switch, Case, Default } from 'react-if';\r\n\r\nimport { connect } from \"react-redux\";\r\n// import { Link } from \"react-router-dom\";\r\nimport DataTable from './Common/DataTableWithFilter';\r\nimport DropDown from './Common/DropDownListMongo';\r\n\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport { fnRenderfrmControl, fnDatatableCol, fnCleanData, GetJsonToArray } from '../utility/utility.jsx';\r\n// reactstrap components\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  CardTitle,\r\n  Row,\r\n  Col\r\n} from \"reactstrap\";\r\nimport { getuser } from \"utility/utility\";\r\n\r\nclass AgentSurvey extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isLoaded: false,\r\n      showModal: false,\r\n      items: [],\r\n      store: [],\r\n      activePage: 1,\r\n      root: \"SurveyMaster\",\r\n      departmentId: \"0\",\r\n\r\n      PageTitle: \"Agent Survey List\",\r\n      FormTitle: \"\",\r\n      formvalue: {},\r\n      event: \"\",\r\n      ModalValueChanged: false,\r\n      user: {}\r\n    };\r\n    this.departmentchange = this.departmentchange.bind(this);\r\n    this.handleRemove = this.handleRemove.bind(this);\r\n    this.handleClose = this.handleClose.bind(this);\r\n    this.handleShow = this.handleShow.bind(this);\r\n    this.handleSave = this.handleSave.bind(this);\r\n    this.selectedrow = {\"SurveyName\": \"\", \"IsActive\": true\r\n        // , \"isOutbound\": false, \"chatbot\": false, \"offline\": false, \"newcar\": false \r\n    }\r\n    this.columnlist = [\r\n      {\r\n        name: \"SurveyId\",\r\n        label: \"SurveyId\",\r\n        type: \"number\",\r\n        searchable: true,\r\n        editable: false\r\n      },\r\n      {\r\n        name: \"SurveyName\",\r\n        label: \"SurveyName\",\r\n        type: \"string\",\r\n        searchable: true,\r\n        // editable: false\r\n      },\r\n      {\r\n        name: \"Description\",\r\n        label: \"Description\",\r\n        type: \"textarea\",\r\n        searchable: true,\r\n        // editable: false\r\n      },\r\n      {\r\n        name: \"IsActive\",\r\n        label: \"IsActive\",\r\n        type: \"bool\"\r\n        // searchable: true,\r\n      },\r\n    //   {\r\n    //     name: \"limit\",\r\n    //     label: \"OpenLimit\",\r\n    //     type: \"number\"\r\n    //   },\r\n    //   {\r\n    //     name: \"dailylimit\",\r\n    //     label: \"Dailylimit\",\r\n    //     type: \"number\"\r\n    //   },\r\n    //   {\r\n    //     name: \"assigned\",\r\n    //     label: \"Assigned\",\r\n    //     type: \"number\",\r\n    //     editable: false\r\n    //   },\r\n\r\n    //   {\r\n    //     name: \"isOutbound\",\r\n    //     label: \"IsOutbound\",\r\n    //     type: \"bool\"\r\n    //   },\r\n    //   {\r\n    //     name: \"chatbot\",\r\n    //     label: \"Chatbot\",\r\n    //     type: \"bool\"\r\n    //   },\r\n    //   {\r\n    //     name: \"offline\",\r\n    //     label: \"Offline\",\r\n    //     type: \"bool\"\r\n    //   },\r\n    //   {\r\n    //     name: \"newcar\",\r\n    //     label: \"Newcar\",\r\n    //     type: \"bool\"\r\n    //   },\r\n    ];\r\n  }\r\n\r\n\r\n\r\n  componentDidMount() {\r\n\r\n    this.props.GetCommonData({\r\n        limit: 10,\r\n        skip: 0,\r\n        root: this.state.root,\r\n        cols: GetJsonToArray(this.columnlist, \"name\"),\r\n        order: 1,\r\n        c: \"L\",\r\n      });\r\n\r\n    setTimeout(function () {\r\n      this.setState({ user: getuser() });\r\n    }.bind(this), 500);\r\n  }\r\n\r\n\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n\r\n    if (!nextProps.CommonData.isError) {\r\n\r\n      this.setState({ items: nextProps.CommonData[this.state.root] });\r\n\r\n      this.setState({ store: nextProps.CommonData });\r\n\r\n    }\r\n\r\n  }\r\n\r\n\r\n  fnDatatableCol() {\r\n\r\n    var columns = fnDatatableCol(this.columnlist);\r\n\r\n    columns.push({\r\n      name: \"Action\",\r\n      cell: row => <ButtonGroup aria-label=\"Basic example\">\r\n        <Button variant=\"secondary\" onClick={() => this.handleEdit(row)}><i className=\"fa fa-pencil-square-o\" aria-hidden=\"true\"></i></Button>\r\n        <Button variant=\"secondary\" onClick={() => window.location.href=\"/admin/AgentSurveyQuestions?sid=\" + row.SurveyId}><i className=\"fa fa-plus\" aria-hidden=\"true\"></i></Button>\r\n        {/* <Button variant=\"secondary\" onClick={() => { if (window.confirm('Are you disable this survey?')) this.handleRemove(row)}}><i className=\"fa fa-trash\" aria-hidden=\"true\"></i></Button> */}\r\n      </ButtonGroup>\r\n    });\r\n    return columns;\r\n  }\r\n\r\n  handleRemove(row){\r\n\r\n    this.props.UpdateData({\r\n      root: this.state.root,\r\n      body: {IsActive: false},\r\n      querydata: { SurveyId: row.SurveyId },\r\n      c: \"L\",\r\n\r\n    }, function (data) {\r\n      toast(\"Survey disabled Successfully!\", { type: 'success' });\r\n    });\r\n\r\n    setTimeout(function () {\r\n      this.props.GetCommonData({\r\n        limit: 10,\r\n        skip: 0,\r\n        root: this.state.root,\r\n        cols: GetJsonToArray(this.columnlist, \"name\"),\r\n        order: 1,\r\n        c: \"L\",\r\n      });\r\n    }.bind(this), 1000);\r\n\r\n    // this.props.DeleteData({\r\n    //   root: this.state.root,\r\n    //   body: {departmentId: row.departmentId, username: row.username}\r\n    // }, function (data) {\r\n    //   if(data.data.status === 200) \r\n    //     toast(\"Agent removed!\", { type: 'success' });\r\n    //   else \r\n    //     toast.error(\"Agent could not be removed\"); \r\n    // })\r\n\r\n    // setTimeout(function () {\r\n    //   this.props.GetCommonData({\r\n    //     root: this.state.root,\r\n    //     cols: {},\r\n    //     c: \"L\",\r\n    //     con: { \"departmentId\": row.departmentId},\r\n    //   });\r\n    // }.bind(this), 1000);\r\n\r\n  }\r\n  handleEdit(row) {\r\n    this.setState({ od: Object.assign({}, row, {}), formvalue: Object.assign({}, row, {}), event: \"Edit\", showModal: true, FormTitle: \"Edit Survey\" });\r\n  }\r\n  handleClose() {\r\n    this.setState({ showModal: false });\r\n  }\r\n  handleShow() {\r\n    this.setState({ formvalue: {...this.selectedrow}, event: \"Add\", showModal: true, FormTitle: \"Add New Survey\" });\r\n  }\r\n\r\n  handleSave() {\r\n    if (document.getElementsByName(\"frmChatAgentConfigure\").length > 0 &&\r\n      document.getElementsByName(\"frmChatAgentConfigure\")[0].reportValidity()) {\r\n\r\n      let formvalue = JSON.parse(JSON.stringify(this.state.formvalue));\r\n      console.log(\"formvalue\", formvalue);\r\n      this.fnCleanData(formvalue);\r\n      let sid = formvalue.SurveyId;\r\n      delete formvalue[\"SurveyId\"]\r\n\r\n      if (this.state.event == \"Edit\") {\r\n        this.fnCleanData(formvalue);\r\n\r\n        let res = this.props.UpdateData({\r\n          root: this.state.root,\r\n          body: formvalue,\r\n          querydata: { SurveyId: sid },\r\n          c: \"L\",\r\n\r\n        }, function (data) {\r\n          toast(\"Survey Saved Successfully!\", { type: 'success' });\r\n        });\r\n\r\n\r\n\r\n        // this.props.addRecord({\r\n        //   root: \"History\",\r\n        //   body: {\r\n        //     module: \"ChatAgentDepartmentConfigure\",\r\n        //     od: this.state.od,\r\n        //     nd: formvalue,\r\n        //     ts: new Date(),\r\n        //     by: getuser().UserId\r\n        //   }\r\n        // }, function (data) {\r\n        //   toast(\"History Maintained!\", { type: 'success' });\r\n        // });\r\n      } else{\r\n        // formvalue.SurveyId = this.state.items[this.state.items.length-1].SurveyId + 1; \r\n        formvalue.CreatedOn = moment().format(\"YYYY-MM-DD HH:mm:ss\") ; \r\n        this.props.InsertData({\r\n          root: this.state.root,\r\n          body: formvalue\r\n        }, function (data) {\r\n          if(data.data.status != 200){\r\n            toast.error(data.data.message) ; \r\n          } else\r\n            toast(\"Survey Added Successfully!\", { type: 'success' });\r\n        });\r\n      }\r\n      // let departmentid = formvalue[\"departmentId\"];\r\n\r\n      setTimeout(function () {\r\n        this.props.GetCommonData({\r\n          limit: 10,\r\n          skip: 0,\r\n          root: this.state.root,\r\n          cols: GetJsonToArray(this.columnlist, \"name\"),\r\n          order: 1,\r\n          c: \"L\",\r\n        });\r\n      }.bind(this), 1000);\r\n\r\n      this.setState({ showModal: false });\r\n    }\r\n    return false;\r\n  }\r\n  handleChange = (e, props) => {\r\n    let formvalue = this.state.formvalue;\r\n    let od = this.state.od;\r\n\r\n    if (e.target && e.target.type == \"checkbox\") {\r\n      formvalue[e.target.id] = e.target.checked;\r\n    }\r\n    else if (e._isAMomentObject) {\r\n      formvalue[props] = e.format()\r\n    }\r\n    else {\r\n      formvalue[e.target.id] = e.target.type === 'number' ? parseInt(e.target.value) : e.target.value;\r\n    }\r\n    //debugger;\r\n    //let Changed = CompareJson(od, formvalue);\r\n\r\n    this.setState({ formvalue: formvalue, ModalValueChanged: true });\r\n  }\r\n\r\n  fnCleanData(formvalue) {\r\n    // formvalue = fnCleanData(this.columnlist, formvalue);\r\n    // this.setState({ formvalue: formvalue });\r\n  }\r\n\r\n  departmentchange(e) {\r\n    // this.setState({departmentId: e.target.value}); \r\n    // this.props.GetCommonData({\r\n    //   limit: 10,\r\n    //   skip: 0,\r\n    //   root: this.state.root,\r\n    //   cols: {},\r\n    //   c: \"L\",\r\n    //   con: { \"departmentId\": e.target.value },\r\n    // });\r\n\r\n  }\r\n\r\n  render() {\r\n    const columns = this.fnDatatableCol();\r\n    const { items, PageTitle, showModal, FormTitle, formvalue, ModalValueChanged, event } = this.state;\r\n    console.log(\"renderitems\", items);\r\n    // let departments = [];\r\n    // departments.push(items);\r\n    // const ChatAgentDepartmentConfigure = {\r\n    //   config:\r\n    //   {\r\n    //     root: \"livechat_department\",\r\n    //     cols: { _id: 1, name: 1 },\r\n    //     con: { enabled: true },\r\n    //     statename: \"\",\r\n    //     state: true,\r\n    //     Idfield: /_id/g,\r\n    //     Displayfield: /name/g,\r\n    //   }\r\n    // }\r\n\r\n\r\n    return (\r\n      <>\r\n        <div className=\"content\">\r\n          <ToastContainer />\r\n          <Row>\r\n            <Col md=\"12\">\r\n              <Card>\r\n                <CardHeader>\r\n                  <Row>\r\n                    <Col md={10}>\r\n                      <CardTitle tag=\"h4\">{PageTitle}</CardTitle>\r\n                    </Col>\r\n                    {/* <Col md={3}>\r\n                      <Form.Group as={Col} md={12} controlId=\"Department_dropdown\">\r\n                        <DropDown firstoption=\"Select Department\" col={ChatAgentDepartmentConfigure} onChange={this.departmentchange}>\r\n\r\n                        </DropDown>\r\n                      </Form.Group>\r\n\r\n                    </Col> */}\r\n                    <Col md={2}>\r\n                      <Button variant=\"primary\" onClick={this.handleShow}>Add New Survey</Button>\r\n                    </Col>\r\n                  </Row>\r\n                </CardHeader>\r\n                <CardBody>\r\n                  <DataTable\r\n                    columns={columns}\r\n                    data={items}\r\n                    extention={true}\r\n                    export={false}\r\n                    print={false}\r\n                  />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n\r\n          <Modal show={showModal} onHide={this.handleClose} dialogClassName=\"modal-90w\">\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>{FormTitle}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n              <Form name=\"frmChatAgentConfigure\">\r\n                <Row>\r\n                  {this.columnlist.map(col => (\r\n                    col.name == 'SurveyId' ? false : \r\n                      fnRenderfrmControl(col, formvalue, this.handleChange, event)\r\n                  ))}\r\n                </Row>\r\n              </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Button variant=\"secondary\" onClick={this.handleClose}>\r\n                Close\r\n              </Button>\r\n              <If condition={ModalValueChanged}>\r\n                <Then>\r\n                  <input type=\"submit\" value=\"Save Changes\" className=\"btn btn-primary\" onClick={this.handleSave} />\r\n                </Then>\r\n              </If>\r\n            </Modal.Footer>\r\n          </Modal>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    CommonData: state.CommonData\r\n  };\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {\r\n    GetCommonData,\r\n    InsertData,\r\n    UpdateData\r\n  }\r\n)(AgentSurvey);"],"sourceRoot":""}