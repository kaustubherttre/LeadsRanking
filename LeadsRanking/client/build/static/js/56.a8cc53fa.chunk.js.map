{"version":3,"sources":["views/QuoteLeadsList.jsx","views/Common/AlertBox.jsx","views/Common/DropDown.jsx"],"names":["QuoteLeadsList","props","state","PageTitle","showAssignLeadPopUp","SelectedAgentAssigTo","SelectedRow","hideAssign","ReportTime","SelectedSupervisors","SelectedRows","clearSelected","formvalue","dtRef","React","createRef","myInputRef","columnlist","name","selector","cell","row","className","QuoteUpdatedOn","format","utc","type","sortable","CallDateTime","this","setState","nextProps","CommonData","isError","CBList","fetchCallBackData","GetCommonspData","limit","skip","root","params","agentId","getuser","UserID","length","current","handleClearRows","e","target","value","index","element","lead","leadId","Name","CustomerID","ProductID","reqData","PostCommunicationData","data","toast","columns","items","showAlert","AlertMsg","AlertVarient","console","log","paymentStatuses","selectedLeads","forEach","push","show","variant","body","md","tag","onClick","OpenAssignLeadPopUp","defaultSortField","defaultSortAsc","selectableRows","export","ref","onSelectedRows","bind","onHide","handleClose","Header","closeButton","Title","Body","join","Footer","condition","AssignLead","Component","connect","GetCommonData","AlertBox","setTimeout","DropDown","item","key","Id","Display","onChange","visible","Control","as","disabled","firstoption","map","displayoption"],"mappings":"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","file":"static/js/56.a8cc53fa.chunk.js","sourcesContent":["\nimport React from \"react\";\nimport {\n  GetCommonData, GetCommonspData, GetDataDirect, PostCommunicationData\n} from \"../store/actions/CommonAction\";\nimport { connect } from \"react-redux\";\nimport { OpenSalesView, getUrlParameter, getuser } from '../utility/utility.jsx';\nimport DataTable from './Common/DataTableWithFilter';\nimport Moment from 'react-moment';\nimport { If, Then, Else } from 'react-if';\nimport AlertBox from './Common/AlertBox';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport DropDown from './Common/DropDown';\n\n// reactstrap components\nimport {\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  Table,\n  Row,\n  Col\n} from \"reactstrap\";\nimport { ButtonGroup, Button, Modal, Form } from 'react-bootstrap';\nimport { func } from \"prop-types\";\nimport moment from \"moment\";\nimport './customStyling.css';\n\nclass QuoteLeadsList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      PageTitle: \"Quote Shared Leads\",\n      QuoteLeadsList: [],\n      showAssignLeadPopUp: false,\n      SelectedAgentAssigTo: 0,\n      SelectedRow: null,\n      hideAssign: false,\n      ReportTime: null,\n      SelectedSupervisors: [],\n      SelectedRows: [],\n      clearSelected: false,\n      formvalue: {},\n    };\n    this.dtRef = React.createRef();\n    this.myInputRef = React.createRef();\n\n    this.columnlist = [\n      {\n        name: \"LeadId\",\n        selector: \"leadId\",        \n      },\n      {\n        name: \"ParentId\",\n        selector: \"ParentId\",        \n      },\n      {\n        name: \"StatusName\",\n        selector: \"StatusName\",        \n      },\n      {\n        name: \"Lead Status\",\n        selector: \"QuoteStatus\",        \n      },\n      {\n        name: \"Quote Updated on\",\n        selector: \"QuoteUpdatedOn\",   \n        cell: row => <div className=\"calldate\">{row.QuoteUpdatedOn ? <Moment format=\"YYYY-MM-DD HH:mm:ss\" utc={true}\n        >{row.QuoteUpdatedOn}</Moment> : \"N.A\"}</div>,  \n        type: \"datetime\",\n        sortable: true,   \n      },\n      {\n        name: \"Last contacted Date\",\n        selector: \"CallDateTime\", \n        cell: row => <div className=\"calldate\">{row.CallDateTime ? <Moment format=\"YYYY-MM-DD HH:mm:ss\" utc={true}\n        >{row.CallDateTime}</Moment> : \"N.A\"}</div>,  \n        type: \"datetime\", \n        sortable: true,        \n      },\n      \n    ];\n  }\n  \n  OpenAssignLeadPopUp(row) {\n    this.setState({ showAssignLeadPopUp: true });\n  }\n  \n  componentWillReceiveProps(nextProps) {\n    \n    if (!nextProps.CommonData.isError) {\n      if (nextProps.CommonData[\"GetQuoteLeads\"]) {\n        let CBList = nextProps.CommonData[\"GetQuoteLeads\"];\n        this.setState({ QuoteLeadsList: CBList[0] });\n      }\n    }\n  }\n\n  handleClose() {\n    this.setState({ showAssignLeadPopUp: false })\n  }\n\n  componentDidMount() {\n    this.fetchCallBackData();\n  }\n\n  fetchCallBackData() {debugger;\n    this.props.GetCommonspData({\n      limit: 10,\n      skip: 0,\n      root: \"GetQuoteLeads\",\n      params: [{ agentId: getuser().UserID }]\n    });\n\n    if (this.state.SelectedRows.length > 0) {\n      this.dtRef.current.handleClearRows();\n    }\n\n  }\n\n  onSelectedAgent(e) {\n    this.setState({ SelectedAgentAssigTo: e.target.value });\n  }\n  AssignLead() {debugger;\n    const { SelectedRows, SelectedAgentAssigTo } = this.state;\n    for (let index = 0; index < SelectedRows.length; index++) {\n      const element = SelectedRows[index];\n\n      var lead = {\n        \"LeadId\": element.leadId,\n        \"Name\": element.Name,\n        \"CustomerId\": element.CustomerID,\n        \"UserID\": getuser().UserID,\n        \"Priority\": 0,\n        \"ProductId\": element.ProductID,\n        \"Reason\": 'Manual added',\n        \"ReasonId\": 33,\n        \"CallStatus\": \"\"\n      }\n      var reqData = {\n        \"UserId\": getuser().UserID,\n        \"Leads\": [lead]\n      };\n\n\n      this.props.PostCommunicationData({\n        root: 'communication/LeadPrioritization.svc/AddLeadToPriorityQueue',\n        data: reqData\n      }, function (data) {\n        toast(\"Lead (\" + element.leadId + \") Added in Call Queue\", { type: 'success' });\n      });\n    }\n\n    this.setState({ showAssignLeadPopUp: false });\n\n    // setTimeout(function () {\n    //   this.fetchCallBackData();\n    // }.bind(this), 300);\n  }\n  onSelectedRows(SelectedRows) {\n    this.setState({ SelectedRows: SelectedRows });\n  }\n  render() {\n    const columns = this.columnlist;\n    const { items, PageTitle, QuoteLeadsList,showAssignLeadPopUp, showAlert, AlertMsg, AlertVarient, ReportTime, SelectedRows } = this.state;\n    console.log(this.state.paymentStatuses);\n    let selectedLeads = [];\n    SelectedRows.forEach(element => {\n      selectedLeads.push(element.leadId);\n    });\n\n    return (\n      <>\n        <div className=\"content QuoteLeadsListLeadsContainer\">\n          <AlertBox show={showAlert} variant={AlertVarient} body={AlertMsg}></AlertBox>\n          <ToastContainer />\n          <Row>\n            <Col md=\"12\">\n              <Card>\n                <CardHeader>\n                  <Row>\n                    <Col md={6}>\n                      <CardTitle tag=\"h4\">{PageTitle}</CardTitle>\n                    </Col>\n                    <Col md={4}>\n                      <CardTitle tag=\"h5\">\n                        {ReportTime ? <Moment format=\"DD/MM/YYYY HH:mm:ss\">{ReportTime}</Moment> : null}\n                      </CardTitle>\n\n                    </Col>\n                    <Col md={2}>\n                      {this.state.hideAssign ? null : <button className=\"btn btn-info btn-sm float-right\" onClick={() => this.OpenAssignLeadPopUp()} >Add Lead</button>}\n                    </Col>\n                  </Row>\n\n                </CardHeader>\n                <CardBody>\n                  <DataTable\n                    columns={columns}\n                    data={(QuoteLeadsList && QuoteLeadsList.length > 0) ? QuoteLeadsList : []}\n                    defaultSortField=\"GracePeriodDate\"\n                    defaultSortAsc={false}\n                    selectableRows={true}\n                    export={false}\n                    ref={this.dtRef}\n                    onSelectedRows={this.onSelectedRows.bind(this)}\n                  />\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n\n          <Modal show={showAssignLeadPopUp} onHide={this.handleClose.bind(this)} >\n            <Modal.Header closeButton>\n              <Modal.Title>Add Leads</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n              <Row>\n                <Col>\n                  LeadId : {selectedLeads.join()}\n                </Col>\n              </Row>\n              <Row>\n                <Col>\n                  {/* <Form.Control as=\"select\" name=\"products\" onChange={this.onSelectedAgent.bind(this)} >\n                    <option key={0} value={0}>Select</option>\n                    {\n                      this.bindAgentDropdown()\n                    }\n                  </Form.Control> */}\n                </Col>\n              </Row>\n\n            </Modal.Body>\n            <Modal.Footer>\n\n              <If condition={this.state.SelectedRows.length > 0}>\n                <Then>\n                  <Button variant=\"primary\" onClick={this.AssignLead.bind(this)}>Add Lead</Button>\n                </Then>\n              </If>\n              <Button variant=\"secondary\" onClick={this.handleClose.bind(this)}>\n                Close\n                </Button>\n            </Modal.Footer>\n          </Modal>\n\n\n        </div>\n      </>\n    );\n  }\n}\n\n\nfunction mapStateToProps(state) {\n  return {\n    CommonData: state.CommonData\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  {\n    GetCommonData,\n    GetCommonspData,\n    PostCommunicationData\n  }\n)(QuoteLeadsList);","\r\nimport React from \"react\";\r\nimport { Alert } from 'react-bootstrap';\r\n\r\n\r\nclass AlertBox extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            show: this.props.show\r\n        }\r\n    }\r\n    componentDidUpdate() {\r\n\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        this.setState({ show: nextProps.show });\r\n        if (nextProps.show) {\r\n            setTimeout(function () {\r\n                this.setState({ show: false });\r\n            }.bind(this), 5000);\r\n        }\r\n    }\r\n    render() {\r\n        if (this.state.show) {\r\n            return (\r\n                <Alert variant={this.props.variant}>\r\n                    {this.props.body}\r\n                </Alert>\r\n            );\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nexport default AlertBox;\r\n","\nimport React from \"react\";\nimport { Form } from 'react-bootstrap';\nimport { connect } from \"react-redux\";\n// reactstrap components\n\nimport {\n    GetCommonData\n} from \"../../store/actions/CommonAction\";\nclass DropDown extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: [],\n        }\n    }\n    componentDidMount() {\n    }\n    componentWillReceiveProps(nextProps) {\n        this.setState({ items: nextProps.items });\n\n    }\n\n    displayoption(item) {\n        return <option key={item.Id} value={item.Id}>{item.Display}</option>\n    }\n\n    render() {\n\n\n        let { name, value, onChange, visible, items } = this.props;\n        if (!items) {\n            items = [];\n        }\n        if (visible == false) {\n            return null;\n        }\n        return (\n\n            <div>\n\n                <Form.Control as=\"select\" disabled={this.props.disabled} value={value} name={name} onChange={onChange}>\n                    {(this.props.firstoption !== false) && (\n                        <option key={0} value={0}>{this.props.firstoption ? this.props.firstoption : \"Select\"}</option>\n                    )}\n                    {items.map(item => (\n                        this.displayoption(item)\n                    ))}\n\n                </Form.Control>\n            </div>\n\n        );\n    }\n}\n\n\nexport default DropDown;\n\n"],"sourceRoot":""}